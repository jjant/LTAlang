{"version":3,"sources":["../src/DebugChannel.js"],"names":["DebugChannel","fs","dbgOptions","inFilePath","join","__dirname","outFilePath","requestReceived","line","readIn","writeOut","contents","length","readFileSync","writeFileSync"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAUA;;;;;;;;IAGaA,Y,WAAAA,Y;AACX,wBAAYC,EAAZ,EAAqBC,UAArB,EAAkD;AAAA;;AAChD,SAAKC,UAAL,GAAkB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,KAArB,EAA4BH,WAAWC,UAAvC,CAAlB;AACA,SAAKG,WAAL,GAAmB,eAAKF,IAAL,CAAUC,SAAV,EAAqB,KAArB,EAA4BH,WAAWI,WAAvC,CAAnB;AACA,SAAKL,EAAL,GAAUA,EAAV;AACA,SAAKM,eAAL,GAAuB,KAAvB;AACD;;;;;;AAMD;;;yCAG8B;AAC5B,UAAIC,OAAO,KAAKC,MAAL,EAAX;AACA,UAAID,SAAS,qBAAb,EAAoC;AAClC,aAAKE,QAAL,CAAc,SAAd;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;6BAMiB;AACf,UAAIC,WAAW,EAAf;AACA,aAAOA,SAASC,MAAT,KAAoB,CAA3B,EAA8B;AAC5BD,mBAAW,KAAKV,EAAL,CAAQY,YAAR,CAAqB,KAAKV,UAA1B,EAAsC,MAAtC,CAAX;AACD;AACD;AACA,WAAKF,EAAL,CAAQa,aAAR,CAAsB,KAAKX,UAA3B,EAAuC,EAAvC;AACA,WAAKI,eAAL,GAAuB,IAAvB;AACA,aAAOI,QAAP;AACD;;AAED;;;;;;;6BAISA,Q,EAAwB;AAC/B;AACA,UAAI,KAAKJ,eAAT,EAA0B;AACxB,aAAKN,EAAL,CAAQa,aAAR,CAAsB,KAAKR,WAA3B,EAAwCK,QAAxC;AACA,aAAKJ,eAAL,GAAuB,KAAvB;AACD;AACF","file":"DebugChannel.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport path from \"path\";\nimport type { DebuggerOptions } from \"./options\";\n\nexport class DebugChannel {\n  constructor(fs: any, dbgOptions: DebuggerOptions) {\n    this.inFilePath = path.join(__dirname, \"../\", dbgOptions.inFilePath);\n    this.outFilePath = path.join(__dirname, \"../\", dbgOptions.outFilePath);\n    this.fs = fs;\n    this.requestReceived = false;\n  }\n  inFilePath: string;\n  outFilePath: string;\n  fs: any;\n  requestReceived: boolean;\n\n  /*\n  /* Only called in the beginning to check if a debugger is attached\n  */\n  debuggerIsAttached(): boolean {\n    let line = this.readIn();\n    if (line === \"Debugger Attached\\n\") {\n      this.writeOut(\"Ready\\n\");\n      return true;\n    }\n    return false;\n  }\n\n  /* Reads in a request from the debug adapter\n  /* The caller is responsible for sending a response with the appropriate\n  /* contents at the right time.\n  /* For now, it returns the request as a string. It will be made to return a\n  /* Request object based on the protocol\n  */\n  readIn(): string {\n    let contents = \"\";\n    while (contents.length === 0) {\n      contents = this.fs.readFileSync(this.inFilePath, \"utf8\");\n    }\n    //clear the file\n    this.fs.writeFileSync(this.inFilePath, \"\");\n    this.requestReceived = true;\n    return contents;\n  }\n\n  /* Write out a response to the debug adapter\n  /* For now, it writes the response as a string. It will be made to return\n  /* a Response object based on the protocol\n  */\n  writeOut(contents: string): void {\n    //Prepack only writes back to the debug adapter in response to a request\n    if (this.requestReceived) {\n      this.fs.writeFileSync(this.outFilePath, contents);\n      this.requestReceived = false;\n    }\n  }\n}\n"]}