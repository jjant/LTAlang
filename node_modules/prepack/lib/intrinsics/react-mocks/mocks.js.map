{"version":3,"sources":["../../../src/intrinsics/react-mocks/mocks.js"],"names":["createMockReact","reactCode","reactAst","plugins","realm","reactValue","GetValue","$GlobalEnv","evaluate","intrinsicName","reactComponentValue","$FunctionKind","reactComponentPrototypeValue","reactCloneElementValue"],"mappings":";;;;;QAqGgBA,e,GAAAA,e;;AAzFhB;;AACA;;AACA;;AACA;;AACA;;;;;;AAhBA;;;;;;;;;AAkBA,IAAIC,4sEAAJ;AAiFA,IAAIC,WAAW,8BAAgBD,SAAhB,EAA2B,EAAEE,SAAS,CAAC,MAAD,CAAX,EAA3B,CAAf;;AAEO,SAASH,eAAT,CAAyBI,KAAzB,EAAoD;AACzD,MAAIC,aAAa,wBAAYC,QAAZ,CAAqBF,KAArB,EAA4BA,MAAMG,UAAN,CAAiBC,QAAjB,CAA0BN,QAA1B,EAAoC,KAApC,CAA5B,CAAjB;AACAG,aAAWI,aAAX;AACA,2BAAUJ,wCAAV;;AAEA,MAAIK,sBAAsB,iBAAIN,KAAJ,EAAWC,UAAX,EAAuB,WAAvB,CAA1B;AACAK,sBAAoBD,aAApB;AACA,2BAAUC,6DAAV;AACAA,sBAAoBC,aAApB,GAAoC,QAApC;AACA,2BAAUD,iDAAV;;AAEA,MAAIE,+BAA+B,iBAAIR,KAAJ,EAAWM,mBAAX,EAAgC,WAAhC,CAAnC;AACAE,+BAA6BH,aAA7B;;AAEA,MAAII,yBAAyB,iBAAIT,KAAJ,EAAWC,UAAX,EAAuB,cAAvB,CAA7B;AACAQ,yBAAuBJ,aAAvB;;AAEA,SAAOJ,UAAP;AACD","file":"mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { parseExpression } from \"babylon\";\nimport { ObjectValue, ECMAScriptFunctionValue } from \"../../values/index.js\";\nimport { Get } from \"../../methods/index.js\";\nimport { Environment } from \"../../singletons.js\";\nimport invariant from \"../../invariant\";\n\nlet reactCode = `\n  {\n    Component: class Component {\n      constructor(props, context) {\n        this.props = props || {};\n        this.context = context || {};\n        this.refs = {};\n        this.state = {};\n      }\n      isReactComponent() {\n        return true;\n      }\n      getChildContext() {}\n    },\n    createElement: function() {\n      // TODO\n    },\n    cloneElement(element, config, children) {\n      var propName;\n      var RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true,\n      };\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var props = Object.assign({}, element.props);\n\n      var key = element.key;\n      var ref = element.ref;\n      var self = element._self;\n      var source = element._source;\n      var owner = element._owner;\n\n      if (config != null) {\n        if (config.ref !== undefined) {\n          // owner = ReactCurrentOwner.current;\n        }\n        if (config.key !== undefined) {\n          key = '' + config.key;\n        }\n        var defaultProps;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (\n            hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n          ) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      }\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: element.$$typeof,\n        type: element.type,\n        key: key,\n        ref: ref,\n        props: props,\n        _owner: owner,\n      };\n    },\n  }\n`;\nlet reactAst = parseExpression(reactCode, { plugins: [\"flow\"] });\n\nexport function createMockReact(realm: Realm): ObjectValue {\n  let reactValue = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactAst, false));\n  reactValue.intrinsicName = `require(\"react\")`;\n  invariant(reactValue instanceof ObjectValue);\n\n  let reactComponentValue = Get(realm, reactValue, \"Component\");\n  reactComponentValue.intrinsicName = `require(\"react\").Component`;\n  invariant(reactComponentValue instanceof ECMAScriptFunctionValue);\n  reactComponentValue.$FunctionKind = \"normal\";\n  invariant(reactComponentValue instanceof ObjectValue);\n\n  let reactComponentPrototypeValue = Get(realm, reactComponentValue, \"prototype\");\n  reactComponentPrototypeValue.intrinsicName = `require(\"react\").Component.prototype`;\n\n  let reactCloneElementValue = Get(realm, reactValue, \"cloneElement\");\n  reactCloneElementValue.intrinsicName = `require(\"react\").cloneElement`;\n\n  return reactValue;\n}\n"]}