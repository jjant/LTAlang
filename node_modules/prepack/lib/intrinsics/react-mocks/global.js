"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * LICENSE file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


exports.default = function (realm) {
  var global = realm.$GlobalObject;

  // module.exports support
  var moduleValue = (0, _abstractObjectFactories.createAbstractObject)(realm, "module", null);
  global.$DefineOwnProperty("module", {
    value: moduleValue,
    writable: true,
    enumerable: false,
    configurable: true
  });

  // apply React mock (for now just React.Component)
  global.$DefineOwnProperty("require", {
    value: new _index.NativeFunctionValue(realm, "global.require", "require", 0, function (context, _ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          requireNameVal = _ref2[0];

      (0, _invariant2.default)(requireNameVal instanceof _index.StringValue);
      if (requireNameVal.value === "react" || requireNameVal.value === "React") {
        return (0, _mocks.createMockReact)(realm);
      }
      var requireName = "require(\"" + requireNameVal.value + "\")";
      var type = _index.Value.getTypeFromName("function");
      var requireValue = _index.AbstractValue.createFromTemplate(realm, (0, _builder2.default)(requireName), type, [], requireName);
      requireValue.intrinsicName = requireName;
      return requireValue;
    }),
    writable: true,
    enumerable: false,
    configurable: true
  });
};

var _index = require("../../values/index.js");

var _builder = require("../../utils/builder.js");

var _builder2 = _interopRequireDefault(_builder);

var _mocks = require("./mocks.js");

var _abstractObjectFactories = require("../../flow/abstractObjectFactories.js");

var _invariant = require("../../invariant");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=global.js.map