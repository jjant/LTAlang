{"version":3,"sources":["../../../src/intrinsics/react-mocks/global.js"],"names":["realm","global","$GlobalObject","moduleValue","$DefineOwnProperty","value","writable","enumerable","configurable","context","requireNameVal","requireName","type","getTypeFromName","requireValue","createFromTemplate","intrinsicName"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAkBe,UAASA,KAAT,EAA6B;AAC1C,MAAIC,SAASD,MAAME,aAAnB;;AAEA;AACA,MAAIC,cAAc,mDAAqBH,KAArB,EAA4B,QAA5B,EAAsC,IAAtC,CAAlB;AACAC,SAAOG,kBAAP,CAA0B,QAA1B,EAAoC;AAClCC,WAAOF,WAD2B;AAElCG,cAAU,IAFwB;AAGlCC,gBAAY,KAHsB;AAIlCC,kBAAc;AAJoB,GAApC;;AAOA;AACAP,SAAOG,kBAAP,CAA0B,SAA1B,EAAqC;AACnCC,WAAO,+BAAwBL,KAAxB,EAA+B,gBAA/B,EAAiD,SAAjD,EAA4D,CAA5D,EAA+D,UAACS,OAAD,QAA+B;AAAA;AAAA,UAApBC,cAAoB;;AACnG,+BAAUA,4CAAV;AACA,UAAIA,eAAeL,KAAf,KAAyB,OAAzB,IAAoCK,eAAeL,KAAf,KAAyB,OAAjE,EAA0E;AACxE,eAAO,4BAAgBL,KAAhB,CAAP;AACD;AACD,UAAIW,6BAA0BD,eAAeL,KAAzC,QAAJ;AACA,UAAIO,OAAO,aAAMC,eAAN,CAAsB,UAAtB,CAAX;AACA,UAAIC,eAAe,qBAAcC,kBAAd,CACjBf,KADiB,EAEjB,uBAAwBW,WAAxB,CAFiB,EAGfC,IAHe,EAIjB,EAJiB,EAKjBD,WALiB,CAAnB;AAOAG,mBAAaE,aAAb,GAA6BL,WAA7B;AACA,aAAOG,YAAP;AACD,KAhBM,CAD4B;AAkBnCR,cAAU,IAlByB;AAmBnCC,gBAAY,KAnBuB;AAoBnCC,kBAAc;AApBqB,GAArC;AAsBD,C;;AAzCD;;AACA;;;;AACA;;AACA;;AACA","file":"global.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, Value, StringValue } from \"../../values/index.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport { createMockReact } from \"./mocks.js\";\nimport { createAbstractObject } from \"../../flow/abstractObjectFactories.js\";\nimport invariant from \"../../invariant\";\n\nexport default function(realm: Realm): void {\n  let global = realm.$GlobalObject;\n\n  // module.exports support\n  let moduleValue = createAbstractObject(realm, \"module\", null);\n  global.$DefineOwnProperty(\"module\", {\n    value: moduleValue,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n\n  // apply React mock (for now just React.Component)\n  global.$DefineOwnProperty(\"require\", {\n    value: new NativeFunctionValue(realm, \"global.require\", \"require\", 0, (context, [requireNameVal]) => {\n      invariant(requireNameVal instanceof StringValue);\n      if (requireNameVal.value === \"react\" || requireNameVal.value === \"React\") {\n        return createMockReact(realm);\n      }\n      let requireName = `require(\"${requireNameVal.value}\")`;\n      let type = Value.getTypeFromName(\"function\");\n      let requireValue = AbstractValue.createFromTemplate(\n        realm,\n        buildExpressionTemplate(requireName),\n        ((type: any): typeof Value),\n        [],\n        requireName\n      );\n      requireValue.intrinsicName = requireName;\n      return requireValue;\n    }),\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n}\n"]}