"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMockReact = createMockReact;

var _babylon = require("babylon");

var _index = require("../../values/index.js");

var _index2 = require("../../methods/index.js");

var _singletons = require("../../singletons.js");

var _invariant = require("../../invariant");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

var reactCode = "\n  {\n    Component: class Component {\n      constructor(props, context) {\n        this.props = props || {};\n        this.context = context || {};\n        this.refs = {};\n        this.state = {};\n      }\n      isReactComponent() {\n        return true;\n      }\n      getChildContext() {}\n    },\n    createElement: function() {\n      // TODO\n    },\n    cloneElement(element, config, children) {\n      var propName;\n      var RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true,\n      };\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var props = Object.assign({}, element.props);\n\n      var key = element.key;\n      var ref = element.ref;\n      var self = element._self;\n      var source = element._source;\n      var owner = element._owner;\n\n      if (config != null) {\n        if (config.ref !== undefined) {\n          // owner = ReactCurrentOwner.current;\n        }\n        if (config.key !== undefined) {\n          key = '' + config.key;\n        }\n        var defaultProps;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (\n            hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n          ) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      }\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: element.$$typeof,\n        type: element.type,\n        key: key,\n        ref: ref,\n        props: props,\n        _owner: owner,\n      };\n    },\n  }\n";
var reactAst = (0, _babylon.parseExpression)(reactCode, { plugins: ["flow"] });

function createMockReact(realm) {
  var reactValue = _singletons.Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactAst, false));
  reactValue.intrinsicName = "require(\"react\")";
  (0, _invariant2.default)(reactValue instanceof _index.ObjectValue);

  var reactComponentValue = (0, _index2.Get)(realm, reactValue, "Component");
  reactComponentValue.intrinsicName = "require(\"react\").Component";
  (0, _invariant2.default)(reactComponentValue instanceof _index.ECMAScriptFunctionValue);
  reactComponentValue.$FunctionKind = "normal";
  (0, _invariant2.default)(reactComponentValue instanceof _index.ObjectValue);

  var reactComponentPrototypeValue = (0, _index2.Get)(realm, reactComponentValue, "prototype");
  reactComponentPrototypeValue.intrinsicName = "require(\"react\").Component.prototype";

  var reactCloneElementValue = (0, _index2.Get)(realm, reactValue, "cloneElement");
  reactCloneElementValue.intrinsicName = "require(\"react\").cloneElement";

  return reactValue;
}
//# sourceMappingURL=mocks.js.map