{"version":3,"sources":["../../../src/intrinsics/ecma262/parseInt.js"],"names":["realm","context","string","radix","inputString","S","trim","sign","charAt","substr","R","stripPrefix","intrinsics","NaN","length","Z","i","digit","ToDigit","undefined","mathInt","negativeZero","zero","number","Number","ch","charCodeAt"],"mappings":"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","file":"parseInt.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { NumberValue } from \"../../values/index.js\";\nimport { ToStringPartial, ToInt32 } from \"../../methods/to.js\";\n\nfunction ToDigit(ch: string): number | void {\n  if (ch >= \"0\" && ch <= \"9\") {\n    return ch.charCodeAt(0) - \"0\".charCodeAt(0);\n  } else if (ch >= \"A\" && ch <= \"Z\") {\n    return 10 + ch.charCodeAt(0) - \"A\".charCodeAt(0);\n  } else if (ch >= \"a\" && ch <= \"z\") {\n    return 10 + ch.charCodeAt(0) - \"a\".charCodeAt(0);\n  }\n  return undefined;\n}\n\nexport default function(realm: Realm): NativeFunctionValue {\n  return new NativeFunctionValue(\n    realm,\n    \"parseInt\",\n    \"parseInt\",\n    2,\n    (context, [string, radix]) => {\n      // 1. Let inputString be ? ToString(string).\n      let inputString = ToStringPartial(realm, string);\n\n      // 2. Let S be a newly created substring of inputString consisting of the first code unit that is not a StrWhiteSpaceChar and all code units following that code unit. (In other words, remove leading white space.) If inputString does not contain any such code unit, let S be the empty string.\n      let S = inputString.trim();\n\n      // 3. Let sign be 1.\n      let sign = 1;\n\n      // 4. If S is not empty and the first code unit of S is 0x002D (HYPHEN-MINUS), let sign be -1.\n      if (S !== \"\" && S.charAt(0) === \"-\") sign = -1;\n\n      // 5. If S is not empty and the first code unit of S is 0x002B (PLUS SIGN) or 0x002D (HYPHEN-MINUS), remove the first code unit from S.\n      if (S !== \"\" && (S.charAt(0) === \"-\" || S.charAt(0) === \"+\")) S = S.substr(1);\n\n      // 6. Let R be ? ToInt32(radix).\n      let R = ToInt32(realm, radix);\n\n      // 7. Let stripPrefix be true.\n      let stripPrefix = true;\n\n      // 8. If R ≠ 0, then\n      if (R !== 0) {\n        // a. If R < 2 or R > 36, return NaN.\n        if (R < 2 || R > 36) return realm.intrinsics.NaN;\n\n        // b .If R ≠ 16, let stripPrefix be false.\n        if (R !== 16) stripPrefix = false;\n      } else {\n        // 9. Else R = 0,\n        // a. Let R be 10.\n        R = 10;\n      }\n\n      // 10. If stripPrefix is true, then\n      if (stripPrefix === true) {\n        // a. If the length of S is at least 2 and the first two code units of S are either \"0x\" or \"0X\", remove the first two code units from S and let R be 16.\n        if (S.length >= 2 && S.charAt(0) === \"0\" && (S.charAt(1) === \"x\" || S.charAt(1) === \"X\")) {\n          S = S.substr(2);\n          R = 16;\n        }\n      }\n\n      // 11. If S contains a code unit that is not a radix-R digit, let Z be the substring of S consisting of all code units before the first such code unit; otherwise, let Z be S.\n      let Z = \"\";\n      for (let i = 0; i < S.length; ++i) {\n        let digit = ToDigit(S.charAt(i));\n        if (digit === undefined || digit >= R) {\n          break;\n        }\n        Z = Z + S.charAt(i);\n      }\n\n      // 12. If Z is empty, return NaN.\n      if (Z === \"\") return realm.intrinsics.NaN;\n\n      // 13. Let mathInt be the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. (However, if R is 10 and Z contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if R is not 2, 4, 8, 10, 16, or 32, then mathInt may be an implementation-dependent approximation to the mathematical integer value that is represented by Z in radix-R notation.)\n      let mathInt = 0;\n      for (let i = 0; i < Z.length; ++i) {\n        mathInt = mathInt * R + (ToDigit(Z.charAt(i)) || 0);\n      }\n\n      // 14. If mathInt = 0, then\n      if (mathInt === 0) {\n        // a. If sign = -1, return -0.\n        if (sign === -1) return realm.intrinsics.negativeZero;\n        // b. Return +0.\n        return realm.intrinsics.zero;\n      }\n\n      // 15. Let number be the Number value for mathInt.\n      let number = Number(mathInt);\n\n      // 5. Return sign × number.\n      return new NumberValue(realm, sign * number);\n    },\n    false\n  );\n}\n"]}