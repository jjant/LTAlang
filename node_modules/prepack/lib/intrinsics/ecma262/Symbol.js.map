{"version":3,"sources":["../../../src/intrinsics/ecma262/Symbol.js"],"names":["realm","func","context","argCount","NewTarget","description","createErrorThrowCompletion","intrinsics","TypeError","descString","undefined","defineNativeMethod","key","stringKey","globalSymbolRegistry","e","$Key","value","$Symbol","newSymbol","push","sym","defineNativeConstant","SymbolIsConcatSpreadable","SymbolSpecies","SymbolReplace","SymbolIterator","SymbolHasInstance","SymbolToPrimitive","SymbolToStringTag","SymbolUnscopables","SymbolMatch","SymbolSplit","SymbolSearch"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,OAAO,+BAAwBD,KAAxB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,CAAnD,EAAsD,UAACE,OAAD,QAAyBC,QAAzB,EAAmCC,SAAnC,EAAiD;AAAA;AAAA,QAAtCC,WAAsC;;AAChH;AACA,QAAID,SAAJ,EAAe;AACb,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,mBAAJ;AACA,QAAI,CAACJ,WAAD,IAAgBA,4CAApB,EAA2D;AACzDI,mBAAaC,SAAb;AACD,KAFD,MAEO,IAAIL,2CAAJ,EAA0C;AAC/CI,mBAAaJ,WAAb;AACD,KAFM,MAEA;AACL;AACAI,mBAAa,6BAAgBT,KAAhB,EAAuBK,WAAvB,CAAb;AACAI,mBAAa,uBAAgBT,KAAhB,EAAuBS,UAAvB,CAAb;AACD;AACD;AACA,WAAO,uBAAgBT,KAAhB,EAAuBS,UAAvB,CAAP;AACD,GAnBU,CAAX;;AAqBA;AACAR,OAAKU,kBAAL,CAAwB,KAAxB,EAA+B,CAA/B,EAAkC,UAACT,OAAD,SAAoB;AAAA;AAAA,QAATU,GAAS;;AACpD;AACA,QAAIC,YAAY,6BAAgBb,KAAhB,EAAuBY,GAAvB,CAAhB;AACAC,gBAAY,uBAAgBb,KAAhB,EAAuBa,SAAvB,CAAZ;;AAEA;AALoD;AAAA;AAAA;;AAAA;AAMpD,2BAAcb,MAAMc,oBAApB,8HAA0C;AAAA,YAAjCC,CAAiC;;AACxC;AACA,YAAIA,EAAEC,IAAF,KAAWH,UAAUI,KAAzB,EAAgC;AAC9B,iBAAOF,EAAEG,OAAT;AACD;AACF;;AAED;;AAEA;AAfoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBpD,QAAIC,YAAY,uBAAgBnB,KAAhB,EAAuBa,SAAvB,CAAhB;;AAEA;AACAb,UAAMc,oBAAN,CAA2BM,IAA3B,CAAgC,EAAEJ,MAAMH,UAAUI,KAAlB,EAAyBC,SAASC,SAAlC,EAAhC;;AAEA;AACA,WAAOA,SAAP;AACD,GAvBD;;AAyBA;AACAlB,OAAKU,kBAAL,CAAwB,QAAxB,EAAkC,CAAlC,EAAqC,UAACT,OAAD,SAAoB;AAAA;AAAA,QAATmB,GAAS;;AACvD;AACA,QAAI,EAAEA,iCAAF,CAAJ,EAAmC;AACjC,YAAMrB,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,yBAA7D,CAAN;AACD;;AAED;AANuD;AAAA;AAAA;;AAAA;AAOvD,4BAAcR,MAAMc,oBAApB,mIAA0C;AAAA,YAAjCC,CAAiC;;AACxC;AACA,YAAI,yBAAUf,KAAV,EAAiBe,EAAEG,OAAnB,EAA4BG,GAA5B,MAAqC,IAAzC,EAA+C;AAC7C,iBAAO,uBAAgBrB,KAAhB,EAAuBe,EAAEC,IAAzB,CAAP;AACD;AACF;;AAED;;AAEA;AAhBuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBvD,WAAOhB,MAAMO,UAAN,CAAiBG,SAAxB;AACD,GAlBD;;AAoBA;AACAT,OAAKqB,oBAAL,CAA0B,oBAA1B,EAAgDtB,MAAMO,UAAN,CAAiBgB,wBAAjE;;AAEA;AACAtB,OAAKqB,oBAAL,CAA0B,SAA1B,EAAqCtB,MAAMO,UAAN,CAAiBiB,aAAtD;;AAEA;AACAvB,OAAKqB,oBAAL,CAA0B,SAA1B,EAAqCtB,MAAMO,UAAN,CAAiBkB,aAAtD;;AAEA;AACAxB,OAAKqB,oBAAL,CAA0B,UAA1B,EAAsCtB,MAAMO,UAAN,CAAiBmB,cAAvD;;AAEA;AACAzB,OAAKqB,oBAAL,CAA0B,aAA1B,EAAyCtB,MAAMO,UAAN,CAAiBoB,iBAA1D;;AAEA;AACA1B,OAAKqB,oBAAL,CAA0B,aAA1B,EAAyCtB,MAAMO,UAAN,CAAiBqB,iBAA1D;;AAEA;AACA3B,OAAKqB,oBAAL,CAA0B,aAA1B,EAAyCtB,MAAMO,UAAN,CAAiBsB,iBAA1D;;AAEA;AACA5B,OAAKqB,oBAAL,CAA0B,aAA1B,EAAyCtB,MAAMO,UAAN,CAAiBuB,iBAA1D;;AAEA;AACA7B,OAAKqB,oBAAL,CAA0B,OAA1B,EAAmCtB,MAAMO,UAAN,CAAiBwB,WAApD;;AAEA;AACA9B,OAAKqB,oBAAL,CAA0B,OAA1B,EAAmCtB,MAAMO,UAAN,CAAiByB,WAApD;;AAEA;AACA/B,OAAKqB,oBAAL,CAA0B,QAA1B,EAAoCtB,MAAMO,UAAN,CAAiB0B,YAArD;;AAEA,SAAOhC,IAAP;AACD,C;;AA5GD;;AACA;;AACA","file":"Symbol.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, StringValue, SymbolValue, UndefinedValue } from \"../../values/index.js\";\nimport { ToStringPartial } from \"../../methods/index.js\";\nimport { SameValue } from \"../../methods/abstract.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 19.4.1.1\n  let func = new NativeFunctionValue(realm, \"Symbol\", \"Symbol\", 0, (context, [description], argCount, NewTarget) => {\n    // 1. If NewTarget is not undefined, throw a TypeError exception.\n    if (NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If description is undefined, let descString be undefined.\n    let descString;\n    if (!description || description instanceof UndefinedValue) {\n      descString = undefined;\n    } else if (description instanceof AbstractValue) {\n      descString = description;\n    } else {\n      // 3. Else, let descString be ? ToString(description).\n      descString = ToStringPartial(realm, description);\n      descString = new StringValue(realm, descString);\n    }\n    // 4. Return a new unique Symbol value whose [[Description]] value is descString.\n    return new SymbolValue(realm, descString);\n  });\n\n  // ECMA262 19.4.2.1\n  func.defineNativeMethod(\"for\", 1, (context, [key]) => {\n    // 1. Let stringKey be ? ToString(key).\n    let stringKey = ToStringPartial(realm, key);\n    stringKey = new StringValue(realm, stringKey);\n\n    // 2. For each element e of the GlobalSymbolRegistry List,\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n      if (e.$Key === stringKey.value) {\n        return e.$Symbol;\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.\n\n    // 4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.\n    let newSymbol = new SymbolValue(realm, stringKey);\n\n    // 5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.\n    realm.globalSymbolRegistry.push({ $Key: stringKey.value, $Symbol: newSymbol });\n\n    // 6. Return newSymbol.\n    return newSymbol;\n  });\n\n  // ECMA262 19.4.2.2\n  func.defineNativeMethod(\"keyFor\", 1, (context, [sym]) => {\n    // 1. If Type(sym) is not Symbol, throw a TypeError exception.\n    if (!(sym instanceof SymbolValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(sym) is not Symbol\");\n    }\n\n    // 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n      if (SameValue(realm, e.$Symbol, sym) === true) {\n        return new StringValue(realm, e.$Key);\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.\n\n    // 4. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 19.4.2.3\n  func.defineNativeConstant(\"isConcatSpreadable\", realm.intrinsics.SymbolIsConcatSpreadable);\n\n  // ECMA262 19.4.2.10\n  func.defineNativeConstant(\"species\", realm.intrinsics.SymbolSpecies);\n\n  // ECMA262 19.4.2.8\n  func.defineNativeConstant(\"replace\", realm.intrinsics.SymbolReplace);\n\n  // ECMA262 19.4.2.4\n  func.defineNativeConstant(\"iterator\", realm.intrinsics.SymbolIterator);\n\n  // ECMA262 19.4.2.2\n  func.defineNativeConstant(\"hasInstance\", realm.intrinsics.SymbolHasInstance);\n\n  // ECMA262 19.4.2.12\n  func.defineNativeConstant(\"toPrimitive\", realm.intrinsics.SymbolToPrimitive);\n\n  // ECMA262 19.4.2.13\n  func.defineNativeConstant(\"toStringTag\", realm.intrinsics.SymbolToStringTag);\n\n  // ECMA262 19.4.2.14\n  func.defineNativeConstant(\"unscopables\", realm.intrinsics.SymbolUnscopables);\n\n  // ECMA262 19.4.2.6\n  func.defineNativeConstant(\"match\", realm.intrinsics.SymbolMatch);\n\n  // ECMA262 19.4.2.11\n  func.defineNativeConstant(\"split\", realm.intrinsics.SymbolSplit);\n\n  // ECMA262 19.4.2.9\n  func.defineNativeConstant(\"search\", realm.intrinsics.SymbolSearch);\n\n  return func;\n}\n"]}