{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_toString.js"],"names":["realm","array","context","func","intrinsics","ObjectProto_toString"],"mappings":";;;;;;kBAkBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,0BAFK,EAGL,UAHK,EAIL,CAJK,EAKL,mBAAW;AACT;AACA,QAAIC,QAAQ,6BAAgBD,KAAhB,EAAuBE,OAAvB,CAAZ;;AAEA;AACA,QAAIC,OAAO,cAAIH,KAAJ,EAAWC,KAAX,EAAkB,MAAlB,CAAX;;AAEA;AACA,QAAI,CAAC,oBAAWD,KAAX,EAAkBG,IAAlB,CAAL,EAA8BA,OAAOH,MAAMI,UAAN,CAAiBC,oBAAxB;;AAE9B;AACA,WAAO,gBAAKL,KAAL,EAAYG,IAAZ,EAAkBF,KAAlB,CAAP;AACD,GAjBI,EAkBL,KAlBK,CAAP;AAoBD,C;;AA5BD;;AACA;;AACA;;AACA;;AACA","file":"ArrayProto_toString.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { ToObjectPartial } from \"../../methods/index.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { IsCallable } from \"../../methods/is.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(\n    realm,\n    \"Array.prototype.toString\",\n    \"toString\",\n    0,\n    context => {\n      // 1. Let array be ? ToObject(this value).\n      let array = ToObjectPartial(realm, context);\n\n      // 2. Let func be ? Get(array, \"join\").\n      let func = Get(realm, array, \"join\");\n\n      // 3. If IsCallable(func) is false, let func be the intrinsic function %ObjProto_toString%.\n      if (!IsCallable(realm, func)) func = realm.intrinsics.ObjectProto_toString;\n\n      // 4. Return ? Call(func, array).\n      return Call(realm, func, array);\n    },\n    false\n  );\n}\n"]}