{"version":3,"sources":["../../../src/intrinsics/ecma262/MapPrototype.js"],"names":["realm","obj","defineNativeMethod","M","context","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$MapData","recordModifiedProperty","$MapData_binding","entries","undefined","p","$Key","$Value","key","true","false","callbackfn","thisArg","T","e","value","Object","is","zero","push","$DefineOwnProperty","configurable","get","count","entriesPropertyDescriptor","$GetOwnProperty","ThrowIfMightHaveBeenDeleted","defineNativeProperty","SymbolIterator","SymbolToStringTag","writable"],"mappings":"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","file":"MapPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NumberValue, StringValue, NativeFunctionValue, ObjectValue } from \"../../values/index.js\";\nimport { Call, CreateMapIterator, IsCallable, SameValueZeroPartial } from \"../../methods/index.js\";\nimport { Properties } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.1.3.1\n  obj.defineNativeMethod(\"clear\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. Set p.[[Key]] to empty.\n      p.$Key = undefined;\n\n      // b. Set p.[[Value]] to empty.\n      p.$Value = undefined;\n    }\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.3\n  obj.defineNativeMethod(\"delete\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        // i. Set p.[[Key]] to empty.\n        p.$Key = undefined;\n\n        // ii. Set p.[[Value]] to empty.\n        p.$Value = undefined;\n\n        // iii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.1.3.4\n  obj.defineNativeMethod(\"entries\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"key+value\").\n    return CreateMapIterator(realm, M, \"key+value\");\n  });\n\n  // ECMA262 23.1.3.5\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 6. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries);\n\n    // 7. Repeat for each Record {[[Key]], [[Value]]} e that is an element of entries, in original key insertion order\n    for (let e of entries) {\n      // a. If e.[[Key]] is not empty, then\n      if (e.$Key !== undefined) {\n        // i. Perform ? Call(callbackfn, T, « e.[[Value]], e.[[Key]], M »).\n        invariant(e.$Value !== undefined);\n        Call(realm, callbackfn, T, [e.$Value, e.$Key, M]);\n      }\n    }\n\n    // 8. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.6\n  obj.defineNativeMethod(\"get\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return p.[[Value]].\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        invariant(p.$Value !== undefined);\n        return p.$Value;\n      }\n    }\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.1.3.7\n  obj.defineNativeMethod(\"has\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, return true.\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.1.3.8\n  obj.defineNativeMethod(\"keys\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"key\").\n    return CreateMapIterator(realm, M, \"key\");\n  });\n\n  // ECMA262 23.1.3.9\n  obj.defineNativeMethod(\"set\", 2, (context, [key, value]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n    if (!M.$MapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n    realm.recordModifiedProperty((M: any).$MapData_binding);\n    let entries = M.$MapData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValueZero(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValueZeroPartial(realm, p.$Key, key)) {\n        // i. Set p.[[Value]] to value.\n        p.$Value = value;\n\n        // ii. Return M.\n        return M;\n      }\n    }\n\n    // 6. If key is -0, let key be +0.\n    key = key.throwIfNotConcrete();\n    if (key instanceof NumberValue && Object.is(key.value, -0)) key = realm.intrinsics.zero;\n\n    // 7. Let p be the Record {[[Key]]: key, [[Value]]: value}.\n    let p = { $Key: key, $Value: value };\n\n    // 8. Append p as the last element of entries.\n    entries.push(p);\n\n    // 9. Return M.\n    return M;\n  });\n\n  // ECMA262 23.1.3.10\n  obj.$DefineOwnProperty(\"size\", {\n    configurable: true,\n    get: new NativeFunctionValue(realm, undefined, \"get size\", 0, context => {\n      // 1. Let M be the this value.\n      let M = context.throwIfNotConcrete();\n\n      // 2. If Type(M) is not Object, throw a TypeError exception.\n      if (!(M instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If M does not have a [[MapData]] internal slot, throw a TypeError exception.\n      if (!M.$MapData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. Let entries be the List that is the value of M's [[MapData]] internal slot.\n      let entries = M.$MapData;\n      invariant(entries !== undefined);\n\n      // 5. Let count be 0.\n      let count = 0;\n\n      // 6. For each Record {[[Key]], [[Value]]} p that is an element of entries\n      for (let p of entries) {\n        // a. If p.[[Key]] is not empty, set count to count+1.\n        if (p.$Key !== undefined) count++;\n      }\n\n      // 7. Return count.\n      return new NumberValue(realm, count);\n    }),\n  });\n\n  // ECMA262 23.1.3.11\n  obj.defineNativeMethod(\"values\", 0, context => {\n    // 1. Let M be the this value.\n    let M = context;\n\n    // 2. Return ? CreateMapIterator(M, \"value\").\n    return CreateMapIterator(realm, M, \"value\");\n  });\n\n  // ECMA262 23.1.3.12\n  let entriesPropertyDescriptor = obj.$GetOwnProperty(\"entries\");\n  invariant(entriesPropertyDescriptor);\n  Properties.ThrowIfMightHaveBeenDeleted(entriesPropertyDescriptor.value);\n  obj.defineNativeProperty(realm.intrinsics.SymbolIterator, undefined, entriesPropertyDescriptor);\n\n  // ECMA262 23.1.3.13\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Map\"), { writable: false });\n}\n"]}