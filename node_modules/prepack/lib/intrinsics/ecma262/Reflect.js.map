{"version":3,"sources":["../../../src/intrinsics/ecma262/Reflect.js"],"names":["realm","obj","intrinsics","ObjectPrototype","defineNativeMethod","context","target","thisArgument","argumentsList","createErrorThrowCompletion","TypeError","args","newTarget","propertyKey","attributes","throwIfNotConcrete","key","desc","$DefineOwnProperty","$Delete","receiver","$Get","$GetOwnProperty","FromPropertyDescriptor","$GetPrototypeOf","mightNotBeObject","mightBeObject","$HasProperty","$IsExtensible","keys","$OwnPropertyKeys","$PreventExtensions","V","$Set","proto","$SetPrototypeOf"],"mappings":"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","file":"Reflect.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { BooleanValue, ObjectValue, NullValue } from \"../../values/index.js\";\nimport {\n  CreateArrayFromList,\n  ToPropertyDescriptor,\n  Construct,\n  ToPropertyKey,\n  IsCallable,\n  CreateListFromArrayLike,\n  Call,\n  IsConstructor,\n} from \"../../methods/index.js\";\nimport { Properties } from \"../../singletons.js\";\n\nexport default function(realm: Realm): ObjectValue {\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, \"Reflect\");\n\n  // ECMA262 26.1.1\n  obj.defineNativeMethod(\"apply\", 3, (context, [target, thisArgument, argumentsList]) => {\n    // 1. If IsCallable(target) is false, throw a TypeError exception.\n    if (!IsCallable(realm, target)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let args be ? CreateListFromArrayLike(argumentsList).\n    let args = CreateListFromArrayLike(realm, argumentsList);\n\n    // TODO #1008 3. Perform PrepareForTailCall().\n\n    // 4. Return ? Call(target, thisArgument, args).\n    return Call(realm, target, thisArgument, args);\n  });\n\n  // ECMA262 26.1.2\n  obj.defineNativeMethod(\"construct\", 2, (context, [target, argumentsList, newTarget]) => {\n    // 1. If IsConstructor(target) is false, throw a TypeError exception.\n    if (!IsConstructor(realm, target)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If newTarget is not present, let newTarget be target.\n    if (!newTarget) {\n      newTarget = target;\n    } else if (!IsConstructor(realm, newTarget)) {\n      // 3. Else if IsConstructor(newTarget) is false, throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let args be ? CreateListFromArrayLike(argumentsList).\n    let args = CreateListFromArrayLike(realm, argumentsList);\n\n    // 5. Return ? Construct(target, args, newTarget).\n    return Construct(realm, target, args, newTarget);\n  });\n\n  // ECMA262 26.1.3\n  obj.defineNativeMethod(\"defineProperty\", 3, (context, [target, propertyKey, attributes]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. Let desc be ? ToPropertyDescriptor(attributes).\n    let desc = ToPropertyDescriptor(realm, attributes);\n\n    // 4. Return ? target.[[DefineOwnProperty]](key, desc).\n    return new BooleanValue(realm, target.$DefineOwnProperty(key, desc));\n  });\n\n  // ECMA262 26.1.4\n  obj.defineNativeMethod(\"deleteProperty\", 2, (context, [target, propertyKey]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. Return ? target.[[Delete]](key).\n    return new BooleanValue(realm, target.$Delete(key));\n  });\n\n  // ECMA262 26.1.5\n  obj.defineNativeMethod(\"get\", 2, (context, [target, propertyKey, receiver]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. If receiver is not present, then\n    if (!receiver) {\n      // a. Let receiver be target.\n      receiver = target;\n    }\n\n    // 4. Return ? target.[[Get]](key, receiver).\n    return target.$Get(key, receiver);\n  });\n\n  // ECMA262 26.1.6\n  obj.defineNativeMethod(\"getOwnPropertyDescriptor\", 2, (context, [target, propertyKey]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. Let desc be ? target.[[GetOwnProperty]](key).\n    let desc = target.$GetOwnProperty(key);\n\n    // 4. Return FromPropertyDescriptor(desc).\n    return Properties.FromPropertyDescriptor(realm, desc);\n  });\n\n  // ECMA262 26.1.7\n  obj.defineNativeMethod(\"getPrototypeOf\", 1, (context, [target]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[GetPrototypeOf]]().\n    return target.$GetPrototypeOf();\n  });\n\n  // ECMA262 26.1.8\n  obj.defineNativeMethod(\"has\", 2, (context, [target, propertyKey]) => {\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (target.mightNotBeObject()) {\n      if (target.mightBeObject()) target.throwIfNotConcrete();\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. Return ? target.[[HasProperty]](key).\n    return new BooleanValue(realm, target.$HasProperty(key));\n  });\n\n  // ECMA262 26.1.9\n  obj.defineNativeMethod(\"isExtensible\", 1, (context, [target]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[IsExtensible]]().\n    return new BooleanValue(realm, target.$IsExtensible());\n  });\n\n  // ECMA262 26.1.10\n  obj.defineNativeMethod(\"ownKeys\", 1, (context, [target]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let keys be ? target.[[OwnPropertyKeys]]().\n    let keys = target.$OwnPropertyKeys();\n\n    // 3. Return CreateArrayFromList(keys).\n    return CreateArrayFromList(realm, keys);\n  });\n\n  // ECMA262 26.1.11\n  obj.defineNativeMethod(\"preventExtensions\", 1, (context, [target]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[PreventExtensions]]().\n    return new BooleanValue(realm, target.$PreventExtensions());\n  });\n\n  // ECMA262 26.1.12\n  obj.defineNativeMethod(\"set\", 3, (context, [target, propertyKey, V, receiver]) => {\n    target = target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = ToPropertyKey(realm, propertyKey);\n\n    // 3. If receiver is not present, then\n    if (!receiver) {\n      // a. Let receiver be target.\n      receiver = target;\n    }\n\n    // 5. Return ? target.[[Set]](key, V, receiver).\n    return new BooleanValue(realm, target.$Set(key, V, receiver));\n  });\n\n  // ECMA262 26.1.13\n  obj.defineNativeMethod(\"setPrototypeOf\", 2, (context, [target, proto]) => {\n    target = target.throwIfNotConcrete();\n    proto = proto.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If Type(proto) is not Object and proto is not null, throw a TypeError exception.\n    if (!(proto instanceof ObjectValue) && !(proto instanceof NullValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Return ? target.[[SetPrototypeOf]](proto).\n    return new BooleanValue(realm, target.$SetPrototypeOf(proto));\n  });\n\n  return obj;\n}\n"]}