{"version":3,"sources":["../../../src/intrinsics/ecma262/isNaN.js"],"names":["realm","context","number","num","isNaN","intrinsics","true","false"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAee,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,OAFK,EAGL,OAHK,EAIL,CAJK,EAKL,UAACC,OAAD,QAAuB;AAAA;AAAA,QAAZC,MAAY;;AACrB;AACA,QAAIC,MAAM,sBAASH,KAAT,EAAgBE,MAAhB,CAAV;;AAEA;AACA,QAAIE,MAAMD,GAAN,CAAJ,EAAgB,OAAOH,MAAMK,UAAN,CAAiBC,IAAxB;;AAEhB;AACA,WAAON,MAAMK,UAAN,CAAiBE,KAAxB;AACD,GAdI,EAeL,KAfK,CAAP;AAiBD,C;;AAtBD;;AACA","file":"isNaN.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { ToNumber } from \"../../methods/index.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.3\n  return new NativeFunctionValue(\n    realm,\n    \"isNaN\",\n    \"isNaN\",\n    1,\n    (context, [number]) => {\n      // 1. Let num be ? ToNumber(number).\n      let num = ToNumber(realm, number);\n\n      // 2. If num is NaN, return true.\n      if (isNaN(num)) return realm.intrinsics.true;\n\n      // 3. Otherwise, return false.\n      return realm.intrinsics.false;\n    },\n    false\n  );\n}\n"]}