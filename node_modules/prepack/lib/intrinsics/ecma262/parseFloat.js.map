{"version":3,"sources":["../../../src/intrinsics/ecma262/parseFloat.js"],"names":["realm","context","string","intrinsics","NaN","inputString","parseFloat"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,YAFK,EAGL,YAHK,EAIL,CAJK,EAKL,UAACC,OAAD,QAAuB;AAAA;AAAA,QAAZC,MAAY;;AACrB,QAAI,CAACA,MAAL,EAAa,OAAOF,MAAMG,UAAN,CAAiBC,GAAxB;;AAEb;AACA,QAAIC,cAAc,yBAAgBL,KAAhB,EAAuBE,MAAvB,CAAlB;;AAEA,WAAO,uBAAgBF,KAAhB,EAAuBM,WAAWD,WAAX,CAAvB,CAAP;AACD,GAZI,EAaL,KAbK,CAAP;AAeD,C;;AArBD;;AAEA","file":"parseFloat.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { NumberValue } from \"../../values/index.js\";\nimport { ToStringPartial } from \"../../methods/to.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.4\n  return new NativeFunctionValue(\n    realm,\n    \"parseFloat\",\n    \"parseFloat\",\n    1,\n    (context, [string]) => {\n      if (!string) return realm.intrinsics.NaN;\n\n      // 1. Let inputString be ? ToString(string).\n      let inputString = ToStringPartial(realm, string);\n\n      return new NumberValue(realm, parseFloat(inputString));\n    },\n    false\n  );\n}\n"]}