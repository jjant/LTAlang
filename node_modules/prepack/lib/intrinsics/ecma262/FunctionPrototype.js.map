{"version":3,"sources":["../../../src/intrinsics/ecma262/FunctionPrototype.js"],"names":["realm","obj","$Call","thisArgument","argsList","intrinsics","undefined","defineNativeProperty","zero","writable","emptyString","defineNativeMethod","func","thisArg","argList","createErrorThrowCompletion","TypeError","argArray","context","args","Target","F","BoundFunctionCreate","targetHasLength","L","targetLen","mightBeNumber","throwIfNotConcreteNumber","Math","max","length","DefinePropertyOrThrow","value","enumerable","configurable","targetName","SetFunctionName","SymbolHasInstance","V","throwIfNotConcrete","name"],"mappings":"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","file":"FunctionPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { Functions, Properties } from \"../../singletons.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  NullValue,\n  UndefinedValue,\n  NumberValue,\n  StringValue,\n  FunctionValue,\n  NativeFunctionValue,\n  ObjectValue,\n} from \"../../values/index.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { ToInteger } from \"../../methods/to.js\";\nimport { CreateListFromArrayLike } from \"../../methods/create.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport { HasOwnProperty, HasSomeCompatibleType } from \"../../methods/has.js\";\nimport { OrdinaryHasInstance } from \"../../methods/abstract.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.2.3\n  obj.$Call = (thisArgument, argsList) => {\n    return realm.intrinsics.undefined;\n  };\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero, { writable: false });\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"name\", realm.intrinsics.emptyString, { writable: false });\n\n  // ECMA262 19.2.3.3\n  obj.defineNativeMethod(\"call\", 1, (func, [thisArg, ...argList]) => {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. Let argList be a new empty List.\n    // 3. If this method was called with more than one argument, then in left to right order,\n    //    starting with the second argument, append each argument as the last element of argList.\n    argList;\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  });\n\n  // ECMA262 19.2.3.1\n  obj.defineNativeMethod(\"apply\", 2, (func, [thisArg, argArray]) => {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. If argArray is null or undefined, then\n    if (HasSomeCompatibleType(argArray, NullValue, UndefinedValue)) {\n      // TODO #1008 a. Perform PrepareForTailCall().\n\n      // b. Return ? Call(func, thisArg).\n      return Call(realm, func, thisArg);\n    }\n\n    // 3. Let argList be ? CreateListFromArrayLike(argArray).\n    let argList = CreateListFromArrayLike(realm, argArray);\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  });\n\n  // ECMA262 19.2.3.2\n  obj.defineNativeMethod(\"bind\", 1, (context, [thisArg, ...args]) => {\n    // 1. Let Target be the realm value.\n    let Target = context;\n\n    // 2. If IsCallable(Target) is false, throw a TypeError exception.\n    if (IsCallable(realm, Target) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(Target instanceof ObjectValue);\n\n    // 3. Let args be a new (possibly empty) List consisting of all of the argument values provided after thisArg in order.\n    args;\n\n    // 4. Let F be ? BoundFunctionCreate(Target, thisArg, args).\n    let F = Functions.BoundFunctionCreate(realm, Target, thisArg, args);\n\n    // 5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n    let targetHasLength = HasOwnProperty(realm, Target, new StringValue(realm, \"length\"));\n\n    let L;\n\n    // 6. If targetHasLength is true, then\n    if (targetHasLength === true) {\n      // a. Let targetLen be ? Get(Target, \"length\").\n      let targetLen = Get(realm, Target, new StringValue(realm, \"length\"));\n\n      // b. If Type(targetLen) is not Number, let L be 0.\n      if (!targetLen.mightBeNumber()) {\n        L = 0;\n      } else {\n        // c. Else,\n        targetLen = targetLen.throwIfNotConcreteNumber();\n        // i. Let targetLen be ToInteger(targetLen).\n        targetLen = ToInteger(realm, targetLen);\n\n        // ii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n        L = Math.max(0, targetLen - args.length);\n      }\n    } else {\n      // 7. Else let L be 0.\n      L = 0;\n    }\n\n    // 8. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor {[[Value]]: L, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, F, \"length\", {\n      value: new NumberValue(realm, L),\n      writable: false,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 9. Let targetName be ? Get(Target, \"name\").\n    let targetName = Get(realm, Target, new StringValue(realm, \"name\"));\n\n    // 10. If Type(targetName) is not String, let targetName be the empty string.\n    if (!(targetName instanceof StringValue)) targetName = realm.intrinsics.emptyString;\n\n    // 11. Perform SetFunctionName(F, targetName, \"bound\").\n    Functions.SetFunctionName(realm, F, targetName, \"bound\");\n\n    // 12. Return F.\n    return F;\n  });\n\n  // ECMA262 19.2.3.6\n  obj.defineNativeMethod(\n    realm.intrinsics.SymbolHasInstance,\n    1,\n    (context, [V]) => {\n      // 1. Let F be the this value.\n      let F = context;\n\n      // 2. Return ? OrdinaryHasInstance(F, V).\n      return new BooleanValue(realm, OrdinaryHasInstance(realm, F, V));\n    },\n    { writable: false, configurable: false }\n  );\n\n  // ECMA262 19.2.3.5\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    context = context.throwIfNotConcrete();\n    if (context instanceof NativeFunctionValue) {\n      let name = context.name;\n      if (name instanceof AbstractValue) {\n        return new StringValue(realm, `function () {[native code]}`);\n      } else {\n        invariant(typeof name === \"string\");\n        return new StringValue(realm, `function ${name}() { [native code] }`);\n      }\n    } else if (context instanceof FunctionValue) {\n      // TODO #1009: provide function source code\n      return new StringValue(realm, \"function () { }\");\n    } else {\n      // 3. Throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        new StringValue(realm, \"Function.prototype.toString is not generic\")\n      );\n    }\n  });\n}\n"]}