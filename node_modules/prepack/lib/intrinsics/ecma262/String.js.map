{"version":3,"sources":["../../../src/intrinsics/ecma262/String.js"],"names":["realm","func","context","argCount","NewTarget","value","s","intrinsics","emptyString","defineNativeMethod","codeUnits","length","elements","nextIndex","next","nextCU","push","String","fromCharCode","apply","isCompatibleWith","MOBILE_JSC_VERSION","codePoints","nextCP","createErrorThrowCompletion","RangeError","fromCodePoint","join","template","substitutions","numberOfSubstitutions","cooked","raw","literalSegments","stringElements","nextKey","nextSeg","nextSub"],"mappings":"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","file":"String.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue, StringValue, SymbolValue } from \"../../values/index.js\";\nimport {\n  ToString,\n  ToStringPartial,\n  ToUint16,\n  ToNumber,\n  ToInteger,\n  ToObjectPartial,\n  ToLength,\n} from \"../../methods/to.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { GetPrototypeFromConstructor, SymbolDescriptiveString, StringCreate } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 21.1.1\n  let func = new NativeFunctionValue(realm, \"String\", \"String\", 1, (context, [value], argCount, NewTarget) => {\n    let s: ?StringValue;\n\n    // 1. If no arguments were passed to this function invocation, let s be \"\".\n    if (argCount === 0) {\n      s = realm.intrinsics.emptyString;\n    } else {\n      // 2. Else,\n      // a. If NewTarget is undefined and Type(value) is Symbol, return SymbolDescriptiveString(value).\n      if (!NewTarget && value instanceof SymbolValue) {\n        return new StringValue(realm, SymbolDescriptiveString(realm, value));\n      }\n\n      // b. Let s be ? ToString(value).\n      s = new StringValue(realm, ToStringPartial(realm, value));\n    }\n\n    // 3. If NewTarget is undefined, return s.\n    if (!NewTarget) return s;\n\n    // 4. Return ? StringCreate(s, ? GetPrototypeFromConstructor(NewTarget, \"%StringPrototype%\")).\n    return StringCreate(realm, s, GetPrototypeFromConstructor(realm, NewTarget, \"StringPrototype\"));\n  });\n\n  // ECMA262 21.1.2.1 ( ..._codeUnits_ )\n  func.defineNativeMethod(\"fromCharCode\", 1, (context, codeUnits, argCount) => {\n    // 1. Let codeUnits be a List containing the arguments passed to this function.\n    codeUnits;\n\n    // 2. Let length be the number of elements in codeUnits.\n    let length = argCount;\n\n    // 3. Let elements be a new empty List.\n    let elements = [];\n\n    // 4. Let nextIndex be 0.\n    let nextIndex = 0;\n\n    // 5. Repeat while nextIndex < length\n    while (nextIndex < length) {\n      // a. Let next be codeUnits[nextIndex].\n      let next = codeUnits[nextIndex];\n\n      // b. Let nextCU be ? ToUint16(next).\n      let nextCU = ToUint16(realm, next);\n\n      // c. Append nextCU to the end of elements.\n      elements.push(nextCU);\n\n      // d. Let nextIndex be nextIndex + 1.\n      nextIndex++;\n    }\n    // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n    //    is 0, the empty string is returned.\n    return new StringValue(realm, String.fromCharCode.apply(null, elements));\n  });\n\n  // ECMA262 21.1.2.2 ( ..._codePoints_ )\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"fromCodePoint\", 1, (context, codePoints, argCount) => {\n      // 1. Let codePoints be a List containing the arguments passed to this function.\n      codePoints;\n\n      // 2. Let length be the number of elements in codePoints.\n      let length = argCount;\n\n      // 3. Let elements be a new empty List.\n      let elements = [];\n\n      // 4. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 5. Repeat while nextIndex < length\n      while (nextIndex < length) {\n        // a. Let next be codePoints[nextIndex].\n        let next = codePoints[nextIndex];\n\n        // b. Let nextCP be ? ToNumber(next).\n        let nextCP = ToNumber(realm, next);\n\n        // c. If SameValue(nextCP, ToInteger(nextCP)) is false, throw a RangeError exception.\n        if (nextCP !== ToInteger(realm, nextCP)) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // d. If nextCP < 0 or nextCP > 0x10FFFF, throw a RangeError exception.\n        if (nextCP < 0 || nextCP > 0x10ffff) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // e. Append the elements of the UTF16Encoding of nextCP to the end of elements.\n        elements.push(String.fromCodePoint(nextCP));\n\n        // f. Let nextIndex be nextIndex + 1.\n        nextIndex++;\n      }\n\n      // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n      //    is 0, the empty string is returned.\n      return new StringValue(realm, elements.join(\"\"));\n    });\n\n  // ECMA262 21.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"raw\", 1, (context, [template, ...substitutions], argCount) => {\n      // 1. Let substitutions be a List consisting of all of the arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the List is empty.\n      substitutions = argCount < 2 ? [] : substitutions;\n\n      // 2. Let numberOfSubstitutions be the number of elements in substitutions.\n      let numberOfSubstitutions = substitutions.length;\n\n      // 3. Let cooked be ? ToObject(template).\n      let cooked = ToObjectPartial(realm, template);\n\n      // 4. Let raw be ? ToObject(? Get(cooked, \"raw\")).\n      let raw = ToObjectPartial(realm, Get(realm, cooked, \"raw\"));\n\n      // 5. Let literalSegments be ? ToLength(? Get(raw, \"length\")).\n      let literalSegments = ToLength(realm, Get(realm, raw, \"length\"));\n\n      // 6. If literalSegments â‰¤ 0, return the empty string.\n      if (literalSegments <= 0) return realm.intrinsics.emptyString;\n\n      // 7. Let stringElements be a new empty List.\n      let stringElements = \"\";\n\n      // 8. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 9. Repeat\n      while (true) {\n        // a. Let nextKey be ! ToString(nextIndex).\n        let nextKey = ToString(realm, new NumberValue(realm, nextIndex));\n\n        // b. Let nextSeg be ? ToString(? Get(raw, nextKey)).\n        let nextSeg = ToStringPartial(realm, Get(realm, raw, nextKey));\n\n        // c. Append in order the code unit elements of nextSeg to the end of stringElements.\n        stringElements = stringElements + nextSeg;\n\n        // d. If nextIndex + 1 = literalSegments, then\n        if (nextIndex + 1 === literalSegments) {\n          // i. Return the String value whose code units are, in order, the elements in the List stringElements. If stringElements has no elements, the empty string is returned.\n          return new StringValue(realm, stringElements);\n        }\n\n        let next;\n        // e. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\n        if (nextIndex < numberOfSubstitutions) next = substitutions[nextIndex];\n        else\n          // f. Else, let next be the empty String.\n          next = realm.intrinsics.emptyString;\n\n        // g. Let nextSub be ? ToString(next).\n        let nextSub = ToStringPartial(realm, next);\n\n        // h. Append in order the code unit elements of nextSub to the end of stringElements.\n        stringElements = stringElements + nextSub;\n\n        // i. Let nextIndex be nextIndex + 1.\n        nextIndex = nextIndex + 1;\n      }\n      invariant(false);\n    });\n\n  return func;\n}\n"]}