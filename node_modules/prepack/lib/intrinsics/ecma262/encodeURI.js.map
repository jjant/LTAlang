{"version":3,"sources":["../../../src/intrinsics/ecma262/encodeURI.js"],"names":["realm","name","context","argCount","NewTarget","uri","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","uriString","encodeURI","e","URIError","message"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,OAAO,WAAX;AACA,SAAO,+BAAwBD,KAAxB,EAA+BC,IAA/B,EAAqCA,IAArC,EAA2C,CAA3C,EAA8C,UAACC,OAAD,QAAiBC,QAAjB,EAA2BC,SAA3B,EAAyC;AAAA;AAAA,QAA9BC,GAA8B;;AAC5F,QAAID,SAAJ,EAAe,MAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAAgEP,IAAhE,2BAAN;;AAEfI,UAAMA,IAAII,kBAAJ,EAAN;AACA;AACA,QAAIC,YAAY,sBAASV,KAAT,EAAgBK,GAAhB,CAAhB;AACA;AACA;AACA,QAAI;AACF,aAAO,uBAAgBL,KAAhB,EAAuBW,UAAUD,SAAV,CAAvB,CAAP;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU;AACV,YAAMZ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBM,QAAlD,EAA4DD,EAAEE,OAA9D,CAAN;AACD;AACF,GAbM,CAAP;AAcD,C;;AArBD;;AACA","file":"encodeURI.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { ToString } from \"../../methods/index.js\";\nimport { StringValue } from \"../../values/index.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.6.4\n  let name = \"encodeURI\";\n  return new NativeFunctionValue(realm, name, name, 1, (context, [uri], argCount, NewTarget) => {\n    if (NewTarget) throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, `${name} is not a constructor`);\n\n    uri = uri.throwIfNotConcrete();\n    // 1. Let uriString be ? ToString(uri).\n    let uriString = ToString(realm, uri);\n    // 2. Let unescapedURISet be a String containing one instance of each code unit valid in uriReserved and uriUnescaped plus \"#\".\n    // 3. Return ? Encode(uriString, unescapedURISet).\n    try {\n      return new StringValue(realm, encodeURI(uriString));\n    } catch (e) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.URIError, e.message);\n    }\n  });\n}\n"]}