{"version":3,"sources":["../../../src/intrinsics/ecma262/Number.js"],"names":["realm","func","context","argCount","NewTarget","value","n","intrinsics","zero","O","$NumberData","undefined","defineNativeConstant","isCompatibleWith","MOBILE_JSC_VERSION","defineNativeMethod","number","mightBeNumber","false","throwIfNotConcreteNumber","isNaN","Infinity","true","integer","Math","abs","pow","NaN","negativeInfinity","defineNativeProperty","parseFloat","parseInt"],"mappings":"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","file":"Number.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue } from \"../../values/index.js\";\nimport { OrdinaryCreateFromConstructor, ToNumber, ToInteger } from \"../../methods/index.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 20.1.1\n  let func = new NativeFunctionValue(realm, \"Number\", \"Number\", 1, (context, [value], argCount, NewTarget) => {\n    let n;\n\n    // 1. If no arguments were passed to this function invocation, let n be +0.\n    if (argCount === 0) {\n      n = realm.intrinsics.zero;\n    } else {\n      // 2. Else, let n be ? ToNumber(value).\n      n = new NumberValue(realm, ToNumber(realm, value));\n    }\n\n    // 3. If NewTarget is undefined, return n.\n    if (!NewTarget) return n;\n\n    // 4. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%NumberPrototype%\", « [[NumberData]] »).\n    let O = OrdinaryCreateFromConstructor(realm, NewTarget, \"NumberPrototype\", { $NumberData: undefined });\n\n    // 5. Set the value of O's [[NumberData]] internal slot to n.\n    O.$NumberData = n;\n\n    // 6. Return O.\n    return O;\n  });\n\n  // ECMA262 20.1.2.1\n  func.defineNativeConstant(\"EPSILON\", new NumberValue(realm, 2.220446049250313e-16));\n\n  // ECMA262 20.1.2.2\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"isFinite\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"isInteger\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. Otherwise, return true.\n      return realm.intrinsics.true;\n    });\n\n  // ECMA262 20.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"isNaN\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, return true.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value)) return realm.intrinsics.true;\n\n      // 3. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.5\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n    func.defineNativeMethod(\"isSafeInteger\", 1, (context, [number]) => {\n      // 1. If Type(number) is not Number, return false.\n      if (!number.mightBeNumber()) return realm.intrinsics.false;\n\n      // 2. If number is NaN, +∞, or -∞, return false.\n      number = number.throwIfNotConcreteNumber();\n      if (isNaN(number.value) || number.value === +Infinity || number.value === -Infinity)\n        return realm.intrinsics.false;\n\n      // 3. Let integer be ToInteger(number).\n      let integer = ToInteger(realm, number);\n\n      // 4. If integer is not equal to number, return false.\n      if (integer !== number.value) return realm.intrinsics.false;\n\n      // 5. If abs(integer) ≤ 2^53-1, return true.\n      if (Math.abs(integer) <= Math.pow(2, 53) - 1) return realm.intrinsics.true;\n\n      // 6. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 20.1.2.6\n  func.defineNativeConstant(\"MAX_SAFE_INTEGER\", new NumberValue(realm, 9007199254740991));\n\n  // ECMA262 20.1.2.7\n  func.defineNativeConstant(\"MAX_VALUE\", new NumberValue(realm, 1.7976931348623157e308));\n\n  // ECMA262 20.1.2.8\n  func.defineNativeConstant(\"MIN_SAFE_INTEGER\", new NumberValue(realm, -9007199254740991));\n\n  // ECMA262 20.1.2.9\n  func.defineNativeConstant(\"MIN_VALUE\", new NumberValue(realm, 5e-324));\n\n  // ECMA262 20.1.2.10\n  func.defineNativeConstant(\"NaN\", realm.intrinsics.NaN);\n\n  // ECMA262 20.1.2.11\n  func.defineNativeConstant(\"NEGATIVE_INFINITY\", realm.intrinsics.negativeInfinity);\n\n  // ECMA262 20.1.2.12\n  func.defineNativeProperty(\"parseFloat\", realm.intrinsics.parseFloat);\n\n  // ECMA262 20.1.2.13\n  func.defineNativeProperty(\"parseInt\", realm.intrinsics.parseInt);\n\n  // ECMA262 20.1.2.14\n  func.defineNativeConstant(\"POSITIVE_INFINITY\", realm.intrinsics.Infinity);\n\n  return func;\n}\n"]}