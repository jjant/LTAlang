{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayIteratorPrototype.js"],"names":["realm","obj","defineNativeMethod","O","context","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$IteratedObject","undefined","$ArrayIteratorNextIndex","$ArrayIterationKind","a","index","value","itemKind","len","$TypedArrayName","$ArrayLength","elementKey","elementValue","result","defineNativeProperty","SymbolToStringTag","writable"],"mappings":";;;;;;kBAkBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,kBAAJ,CAAuB,MAAvB,EAA+B,CAA/B,EAAkC,mBAAW;AAC3C;AACA,QAAIC,IAAIC,QAAQC,kBAAR,EAAR;;AAEA;AACA,QAAI,EAAEF,+BAAF,CAAJ,EAAiC;AAC/B,YAAMH,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,eAA7D,CAAN;AACD;;AAED;AACA,QACEL,EAAEM,eAAF,KAAsBC,SAAtB,IACAP,EAAEQ,uBAAF,KAA8BD,SAD9B,IAEAP,EAAES,mBAAF,KAA0BF,SAH5B,EAIE;AACA,YAAMV,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,2CAA7D,CAAN;AACD;;AAED;AACA,QAAIK,IAAIV,EAAEM,eAAV;AACA,6BAAUI,mCAA4BA,kCAAtC;;AAEA;AACA,QAAIA,kCAAJ,EAAiC;AAC/B,aAAO,oCAAuBb,KAAvB,EAA8BA,MAAMO,UAAN,CAAiBG,SAA/C,EAA0D,IAA1D,CAAP;AACD;;AAED;AACA,QAAII,QAAQX,EAAEQ,uBAAF,CAA0BI,KAAtC;;AAEA;AACA,QAAIC,WAAWb,EAAES,mBAAjB;;AAEA;AACA,QAAIK,YAAJ;AACA,QAAIJ,EAAEK,eAAN,EAAuB;AACrB;AACAD,YAAMJ,EAAEM,YAAR;AACA,+BAAU,OAAOF,GAAP,KAAe,QAAzB;AACD,KAJD,MAIO;AACL;AACA;AACAA,YAAM,kBAASjB,KAAT,EAAgB,cAAIA,KAAJ,EAAWa,CAAX,EAAc,QAAd,CAAhB,CAAN;AACD;;AAED;AACA,QAAIC,SAASG,GAAb,EAAkB;AAChB;AACAd,QAAEM,eAAF,GAAoBT,MAAMO,UAAN,CAAiBG,SAArC;;AAEA;AACA,aAAO,oCAAuBV,KAAvB,EAA8BA,MAAMO,UAAN,CAAiBG,SAA/C,EAA0D,IAA1D,CAAP;AACD;;AAED;AACAP,MAAEQ,uBAAF,GAA4B,uBAAgBX,KAAhB,EAAuBc,QAAQ,CAA/B,CAA5B;;AAEA;AACA,QAAIE,aAAa,KAAjB,EAAwB;AACtB,aAAO,oCAAuBhB,KAAvB,EAA8B,uBAAgBA,KAAhB,EAAuBc,KAAvB,CAA9B,EAA6D,KAA7D,CAAP;AACD;;AAED;AACA,QAAIM,aAAa,uBAAgBpB,KAAhB,EAAuBc,QAAQ,EAA/B,CAAjB;;AAEA;AACA,QAAIO,eAAe,cAAIrB,KAAJ,EAAWa,CAAX,EAAcO,UAAd,CAAnB;;AAEA;AACA,QAAIE,eAAJ;AACA,QAAIN,aAAa,OAAjB,EAA0B;AACxBM,eAASD,YAAT;AACD,KAFD,MAEO;AACL;AACA;AACA,+BAAUL,aAAa,WAAvB,EAAoC,oCAApC;;AAEA;AACAM,eAAS,iCAAoBtB,KAApB,EAA2B,CAAC,uBAAgBA,KAAhB,EAAuBc,KAAvB,CAAD,EAAgCO,YAAhC,CAA3B,CAAT;AACD;;AAED;AACA,WAAO,oCAAuBrB,KAAvB,EAA8BsB,MAA9B,EAAsC,KAAtC,CAAP;AACD,GAnFD;;AAqFA;AACArB,MAAIsB,oBAAJ,CAAyBvB,MAAMO,UAAN,CAAiBiB,iBAA1C,EAA6D,uBAAgBxB,KAAhB,EAAuB,gBAAvB,CAA7D,EAAuG;AACrGyB,cAAU;AAD2F,GAAvG;AAGD,C;;AAjGD;;AACA;;AACA;;AACA;;AACA","file":"ArrayIteratorPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { CreateIterResultObject, CreateArrayFromList } from \"../../methods/create.js\";\nimport { NumberValue, ObjectValue, UndefinedValue, StringValue } from \"../../values/index.js\";\nimport { ToLength } from \"../../methods/to.js\";\nimport { Get } from \"../../methods/get.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 22.1.5.2.1\n  obj.defineNativeMethod(\"next\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an object\");\n    }\n\n    // 3. If O does not have all of the internal slots of an Array Iterator Instance (22.1.5.3), throw a TypeError exception.\n    if (\n      O.$IteratedObject === undefined ||\n      O.$ArrayIteratorNextIndex === undefined ||\n      O.$ArrayIterationKind === undefined\n    ) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"ArrayIteratorPrototype.next isn't generic\");\n    }\n\n    // 4. Let a be the value of the [[IteratedObject]] internal slot of O.\n    let a = O.$IteratedObject;\n    invariant(a instanceof ObjectValue || a instanceof UndefinedValue);\n\n    // 5. If a is undefined, return CreateIterResultObject(undefined, true).\n    if (a instanceof UndefinedValue) {\n      return CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 6. Let index be the value of the [[ArrayIteratorNextIndex]] internal slot of O.\n    let index = O.$ArrayIteratorNextIndex.value;\n\n    // 7. Let itemKind be the value of the [[ArrayIterationKind]] internal slot of O.\n    let itemKind = O.$ArrayIterationKind;\n\n    // 8. If a has a [[TypedArrayName]] internal slot, then\n    let len;\n    if (a.$TypedArrayName) {\n      // a. Let len be the value of a's [[ArrayLength]] internal slot.\n      len = a.$ArrayLength;\n      invariant(typeof len === \"number\");\n    } else {\n      // 9. Else,\n      // a. Let len be ? ToLength(? Get(a, \"length\")).\n      len = ToLength(realm, Get(realm, a, \"length\"));\n    }\n\n    // 10. If index ≥ len, then\n    if (index >= len) {\n      // a. Set the value of the [[IteratedObject]] internal slot of O to undefined.\n      O.$IteratedObject = realm.intrinsics.undefined;\n\n      // b. Return CreateIterResultObject(undefined, true).\n      return CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 11. Set the value of the [[ArrayIteratorNextIndex]] internal slot of O to index+1.\n    O.$ArrayIteratorNextIndex = new NumberValue(realm, index + 1);\n\n    // 12. If itemKind is \"key\", return CreateIterResultObject(index, false).\n    if (itemKind === \"key\") {\n      return CreateIterResultObject(realm, new NumberValue(realm, index), false);\n    }\n\n    // 13. Let elementKey be ! ToString(index).\n    let elementKey = new StringValue(realm, index + \"\");\n\n    // 14. Let elementValue be ? Get(a, elementKey).\n    let elementValue = Get(realm, a, elementKey);\n\n    // 15. If itemKind is \"value\", let result be elementValue.\n    let result;\n    if (itemKind === \"value\") {\n      result = elementValue;\n    } else {\n      // 16. Else,\n      // a. Assert: itemKind is \"key+value\".\n      invariant(itemKind === \"key+value\", \"expected item kind to be key+value\");\n\n      // b. Let result be CreateArrayFromList(« index, elementValue »).\n      result = CreateArrayFromList(realm, [new NumberValue(realm, index), elementValue]);\n    }\n\n    // 17. Return CreateIterResultObject(result, false).\n    return CreateIterResultObject(realm, result, false);\n  });\n\n  // ECMA262 22.1.5.2.2\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Array Iterator\"), {\n    writable: false,\n  });\n}\n"]}