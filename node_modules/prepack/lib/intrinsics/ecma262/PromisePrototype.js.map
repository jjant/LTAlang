{"version":3,"sources":["../../../src/intrinsics/ecma262/PromisePrototype.js"],"names":["realm","obj","defineNativeMethod","context","onRejected","promise","intrinsics","undefined","onFulfilled","createErrorThrowCompletion","TypeError","C","Promise","resultCapability","defineNativeProperty","SymbolToStringTag","writable"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAiBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,kBAAJ,CAAuB,OAAvB,EAAgC,CAAhC,EAAmC,UAACC,OAAD,QAA2B;AAAA;AAAA,QAAhBC,UAAgB;;AAC5D;AACA,QAAIC,UAAUF,OAAd;;AAEA;AACA,WAAO,oBAAOH,KAAP,EAAcK,OAAd,EAAuB,MAAvB,EAA+B,CAACL,MAAMM,UAAN,CAAiBC,SAAlB,EAA6BH,UAA7B,CAA/B,CAAP;AACD,GAND;;AAQA;AACAH,MAAIC,kBAAJ,CAAuB,MAAvB,EAA+B,CAA/B,EAAkC,UAACC,OAAD,SAAwC;AAAA;AAAA,QAA7BK,WAA6B;AAAA,QAAhBJ,UAAgB;;AACxE;AACA,QAAIC,UAAUF,OAAd;;AAEA;AACA,QAAI,CAAC,uBAAUH,KAAV,EAAiBK,OAAjB,CAAL,EAAgC;AAC9B,YAAML,MAAMS,0BAAN,CAAiCT,MAAMM,UAAN,CAAiBI,SAAlD,CAAN;AACD;AACD,6BAAUL,qCAAV;;AAEA;AACA,QAAIM,IAAI,gCAAmBX,KAAnB,EAA0BK,OAA1B,EAAmCL,MAAMM,UAAN,CAAiBM,OAApD,CAAR;;AAEA;AACA,QAAIC,mBAAmB,mCAAqBb,KAArB,EAA4BW,CAA5B,CAAvB;;AAEA;AACA,WAAO,iCAAmBX,KAAnB,EAA0BK,OAA1B,EAAmCG,WAAnC,EAAgDJ,UAAhD,EAA4DS,gBAA5D,CAAP;AACD,GAlBD;;AAoBA;AACAZ,MAAIa,oBAAJ,CAAyBd,MAAMM,UAAN,CAAiBS,iBAA1C,EAA6D,uBAAgBf,KAAhB,EAAuB,SAAvB,CAA7D,EAAgG,EAAEgB,UAAU,KAAZ,EAAhG;AACD,C;;AAtCD;;AACA;;AACA;;AACA","file":"PromisePrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue } from \"../../values/index.js\";\nimport { IsPromise, Invoke, SpeciesConstructor } from \"../../methods/index.js\";\nimport { NewPromiseCapability, PerformPromiseThen } from \"../../methods/promise.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 25.4.5.1\n  obj.defineNativeMethod(\"catch\", 1, (context, [onRejected]) => {\n    // 1. Let promise be the this value.\n    let promise = context;\n\n    // 2. Return ? Invoke(promise, \"then\", « undefined, onRejected »).\n    return Invoke(realm, promise, \"then\", [realm.intrinsics.undefined, onRejected]);\n  });\n\n  // ECMA262 25.4.5.3\n  obj.defineNativeMethod(\"then\", 2, (context, [onFulfilled, onRejected]) => {\n    // 1. Let promise be the this value.\n    let promise = context;\n\n    // 2. If IsPromise(promise) is false, throw a TypeError exception.\n    if (!IsPromise(realm, promise)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(promise instanceof ObjectValue);\n\n    // 3. Let C be ? SpeciesConstructor(promise, %Promise%).\n    let C = SpeciesConstructor(realm, promise, realm.intrinsics.Promise);\n\n    // 4. Let resultCapability be ? NewPromiseCapability(C).\n    let resultCapability = NewPromiseCapability(realm, C);\n\n    // 5. Return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability).\n    return PerformPromiseThen(realm, promise, onFulfilled, onRejected, resultCapability);\n  });\n\n  // ECMA262 25.4.5.4 Promise.prototype [ @@toStringTag ]\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Promise\"), { writable: false });\n}\n"]}