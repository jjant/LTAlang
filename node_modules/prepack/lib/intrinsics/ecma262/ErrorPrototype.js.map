{"version":3,"sources":["../../../src/intrinsics/ecma262/ErrorPrototype.js"],"names":["realm","obj","build","tsTemplateSrc","tsTemplate","name","defineNativeProperty","intrinsics","emptyString","defineNativeMethod","O","context","throwIfNotConcrete","createErrorThrowCompletion","TypeError","nameValue","createFromTemplate","nameString","msg"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D,SAAOC,MAAM,OAAN,EAAeF,KAAf,EAAsBC,GAAtB,CAAP;AACD,C;;QAKeC,K,GAAAA,K;;AAXhB;;AACA;;AACA;;;;;;AAMA,IAAMC,gBAAgB,gBAAtB,C,CApBA;;;;;;;;;AAqBA,IAAMC,aAAa,uBAAwBD,aAAxB,CAAnB;;AAEO,SAASD,KAAT,CAAeG,IAAf,EAA6BL,KAA7B,EAA2CC,GAA3C,EAAmE;AACxE;AACAA,MAAIK,oBAAJ,CAAyB,SAAzB,EAAoCN,MAAMO,UAAN,CAAiBC,WAArD;;AAEA;AACAP,MAAIK,oBAAJ,CAAyB,MAAzB,EAAiC,uBAAgBN,KAAhB,EAAuBK,IAAvB,CAAjC;;AAEA;AACAJ,MAAIQ,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsC,mBAAW;AAC/C;AACA,QAAIC,IAAIC,QAAQC,kBAAR,EAAR;;AAEA;AACA,QAAI,EAAEF,+BAAF,CAAJ,EAAiC;AAC/B,YAAMV,MAAMa,0BAAN,CAAiCb,MAAMO,UAAN,CAAiBO,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,YAAY,iBAAIf,KAAJ,EAAWU,CAAX,EAAc,MAAd,CAAhB;AACA,QAAIK,yCAAJ,EAAwC;AACtC,aAAO,qBAAcC,kBAAd,CAAiChB,KAAjC,EAAwCI,UAAxC,sBAAiE,CAACM,CAAD,CAAjE,EAAsEP,aAAtE,CAAP;AACD;;AAED;AACA,QAAIc,aAAaF,6CAAsC,OAAtC,GAAgD,6BAAgBf,KAAhB,EAAuBe,SAAvB,CAAjE;;AAEA;AACA,QAAIG,MAAM,iBAAIlB,KAAJ,EAAWU,CAAX,EAAc,SAAd,CAAV;AACA,QAAIQ,mCAAJ,EAAkC;AAChC,aAAO,qBAAcF,kBAAd,CAAiChB,KAAjC,EAAwCI,UAAxC,sBAAiE,CAACM,CAAD,CAAjE,EAAsEP,aAAtE,CAAP;AACD;;AAED;AACAe,UAAMA,uCAAgC,EAAhC,GAAqC,6BAAgBlB,KAAhB,EAAuBkB,GAAvB,CAA3C;;AAEA;AACA,QAAID,eAAe,EAAnB,EAAuB,OAAO,uBAAgBjB,KAAhB,EAAuBkB,GAAvB,CAAP;;AAEvB;AACA,QAAIA,QAAQ,EAAZ,EAAgB,OAAO,uBAAgBlB,KAAhB,EAAuBiB,UAAvB,CAAP;;AAEhB;AACA,WAAO,uBAAgBjB,KAAhB,EAA0BiB,UAA1B,UAAyCC,GAAzC,CAAP;AACD,GAnCD;AAoCD","file":"ErrorPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ObjectValue, StringValue, UndefinedValue } from \"../../values/index.js\";\nimport { ToStringPartial, Get } from \"../../methods/index.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  return build(\"Error\", realm, obj);\n}\n\nconst tsTemplateSrc = \"(A).toString()\";\nconst tsTemplate = buildExpressionTemplate(tsTemplateSrc);\n\nexport function build(name: string, realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.5.3.2\n  obj.defineNativeProperty(\"message\", realm.intrinsics.emptyString);\n\n  // ECMA262 19.5.3.3\n  obj.defineNativeProperty(\"name\", new StringValue(realm, name));\n\n  // ECMA262 19.5.3.4\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let name be ? Get(O, \"name\").\n    let nameValue = Get(realm, O, \"name\");\n    if (nameValue instanceof AbstractValue) {\n      return AbstractValue.createFromTemplate(realm, tsTemplate, StringValue, [O], tsTemplateSrc);\n    }\n\n    // 4. If name is undefined, let name be \"Error\"; otherwise let name be ? ToString(name).\n    let nameString = nameValue instanceof UndefinedValue ? \"Error\" : ToStringPartial(realm, nameValue);\n\n    // 5. Let msg be ? Get(O, \"message\").\n    let msg = Get(realm, O, \"message\");\n    if (msg instanceof AbstractValue) {\n      return AbstractValue.createFromTemplate(realm, tsTemplate, StringValue, [O], tsTemplateSrc);\n    }\n\n    // 6. If msg is undefined, let msg be the empty String; otherwise let msg be ? ToString(msg).\n    msg = msg instanceof UndefinedValue ? \"\" : ToStringPartial(realm, msg);\n\n    // 7. If name is the empty String, return msg.\n    if (nameString === \"\") return new StringValue(realm, msg);\n\n    // 8. If msg is the empty String, return name.\n    if (msg === \"\") return new StringValue(realm, nameString);\n\n    // 9. Return the result of concatenating name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.\n    return new StringValue(realm, `${nameString}: ${msg}`);\n  });\n}\n"]}