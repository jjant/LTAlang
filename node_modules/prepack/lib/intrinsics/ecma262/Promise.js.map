{"version":3,"sources":["../../../src/intrinsics/ecma262/Promise.js"],"names":["realm","func","context","argCount","NewTarget","executor","createErrorThrowCompletion","intrinsics","TypeError","promise","$PromiseState","undefined","$PromiseResult","$PromiseFulfillReactions","$PromiseRejectReactions","$PromiseIsHandled","resolvingFunctions","completion","resolve","reject","err","value","defineNativeMethod","iterable","C","throwIfNotConcrete","promiseCapability","iterator","e","iteratorRecord","$Iterator","$Done","result","resultCompletion","r","x","xConstructor","defineNativeGetter","SymbolSpecies"],"mappings":"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","file":"Promise.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, FunctionValue, NativeFunctionValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  NewPromiseCapability,\n  PerformPromiseAll,\n  PerformPromiseRace,\n  CreateResolvingFunctions,\n} from \"../../methods/promise.js\";\nimport {\n  IsCallable,\n  OrdinaryCreateFromConstructor,\n  Call,\n  GetIterator,\n  SameValuePartial,\n  Get,\n  IsPromise,\n} from \"../../methods/index.js\";\nimport { IteratorClose } from \"../../methods/iterator.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 25.4.3.1\n  let func = new NativeFunctionValue(realm, \"Promise\", \"Promise\", 1, (context, [executor], argCount, NewTarget) => {\n    // 1. If NewTarget is undefined, throw a TypeError exception.\n    if (!NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If IsCallable(executor) is false, throw a TypeError exception.\n    if (!IsCallable(realm, executor)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promise be ? OrdinaryCreateFromConstructor(NewTarget, \"%PromisePrototype%\", « [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] »).\n    let promise = OrdinaryCreateFromConstructor(realm, NewTarget, \"PromisePrototype\", {\n      $PromiseState: undefined,\n      $PromiseResult: undefined,\n      $PromiseFulfillReactions: undefined,\n      $PromiseRejectReactions: undefined,\n      $PromiseIsHandled: undefined,\n    });\n\n    // 4. Set promise's [[PromiseState]] internal slot to \"pending\".\n    promise.$PromiseState = \"pending\";\n\n    // 5. Set promise's [[PromiseFulfillReactions]] internal slot to a new empty List.\n    promise.$PromiseFulfillReactions = [];\n\n    // 6. Set promise's [[PromiseRejectReactions]] internal slot to a new empty List.\n    promise.$PromiseRejectReactions = [];\n\n    // 7. Set promise's [[PromiseIsHandled]] internal slot to false.\n    promise.$PromiseIsHandled = false;\n\n    // 8. Let resolvingFunctions be CreateResolvingFunctions(promise).\n    let resolvingFunctions = CreateResolvingFunctions(realm, promise);\n\n    // 9. Let completion be Call(executor, undefined, « resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] »).\n    let completion;\n    try {\n      completion = Call(realm, executor, realm.intrinsics.undefined, [\n        resolvingFunctions.resolve,\n        resolvingFunctions.reject,\n      ]);\n    } catch (err) {\n      if (err instanceof AbruptCompletion) {\n        completion = err;\n      } else {\n        throw err;\n      }\n    }\n\n    // 10. If completion is an abrupt completion, then\n    if (completion instanceof AbruptCompletion) {\n      // a. Perform ? Call(resolvingFunctions.[[Reject]], undefined, « completion.[[Value]] »).\n      Call(realm, resolvingFunctions.reject, realm.intrinsics.undefined, [completion.value]);\n    }\n\n    // 11. Return promise.\n    return promise;\n  });\n\n  // ECMA262 25.4.4.1\n  func.defineNativeMethod(\"all\", 1, (context, [iterable]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Let iterator be GetIterator(iterable).\n    let iterator;\n    try {\n      iterator = GetIterator(realm, iterable);\n    } catch (e) {\n      if (e instanceof AbruptCompletion) {\n        // 5. IfAbruptRejectPromise(iterator, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [e.value]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 6. Let iteratorRecord be Record {[[Iterator]]: iterator, [[Done]]: false}.\n    let iteratorRecord = { $Iterator: iterator, $Done: false };\n\n    // 7. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability).\n    let result;\n    try {\n      invariant(C instanceof FunctionValue);\n      result = PerformPromiseAll(realm, iteratorRecord, C, promiseCapability);\n    } catch (e) {\n      // 8. If result is an abrupt completion, then\n      if (e instanceof AbruptCompletion) {\n        // a. If iteratorRecord.[[Done]] is false, let result be IteratorClose(iterator, result).\n        if (iteratorRecord.$Done === false) {\n          try {\n            result = IteratorClose(realm, iterator, e).value;\n          } catch (resultCompletion) {\n            if (resultCompletion instanceof AbruptCompletion) {\n              result = resultCompletion.value;\n            } else throw resultCompletion;\n          }\n        } else {\n          result = e.value;\n        }\n\n        // b. IfAbruptRejectPromise(result, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [result]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 9. Return Completion(result).\n    return result;\n  });\n\n  // ECMA262 25.4.4.3\n  func.defineNativeMethod(\"race\", 1, (context, [iterable]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Let iterator be GetIterator(iterable).\n    let iterator;\n    try {\n      iterator = GetIterator(realm, iterable);\n    } catch (e) {\n      if (e instanceof AbruptCompletion) {\n        // 5. IfAbruptRejectPromise(iterator, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [e.value]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 6. Let iteratorRecord be Record {[[Iterator]]: iterator, [[Done]]: false}.\n    let iteratorRecord = { $Iterator: iterator, $Done: false };\n\n    // 7. Let result be PerformPromiseRace(iteratorRecord, promiseCapability, C).\n    let result;\n    try {\n      result = PerformPromiseRace(realm, iteratorRecord, promiseCapability, C);\n    } catch (e) {\n      // 8. If result is an abrupt completion, then\n      if (e instanceof AbruptCompletion) {\n        // a. If iteratorRecord.[[Done]] is false, let result be IteratorClose(iterator, result).\n        if (iteratorRecord.$Done === false) {\n          try {\n            result = IteratorClose(realm, iterator, e).value;\n          } catch (resultCompletion) {\n            if (resultCompletion instanceof AbruptCompletion) {\n              result = resultCompletion.value;\n            } else throw resultCompletion;\n          }\n        } else {\n          result = e.value;\n        }\n\n        // b. IfAbruptRejectPromise(result, promiseCapability).\n        Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [result]);\n        return promiseCapability.promise;\n      } else throw e;\n    }\n\n    // 9. Return Completion(result).\n    return result;\n  });\n\n  // ECMA262 25.4.4.4\n  func.defineNativeMethod(\"reject\", 1, (context, [r]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 4. Perform ? Call(promiseCapability.[[Reject]], undefined, « r »).\n    Call(realm, promiseCapability.reject, realm.intrinsics.undefined, [r]);\n\n    // 5. Return promiseCapability.[[Promise]].\n    return promiseCapability.promise;\n  });\n\n  // ECMA262 25.4.4.5\n  func.defineNativeMethod(\"resolve\", 1, (context, [x]) => {\n    // 1. Let C be the this value.\n    let C = context.throwIfNotConcrete();\n\n    // 2. If Type(C) is not Object, throw a TypeError exception.\n    if (!(C instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If IsPromise(x) is true, then\n    if (IsPromise(realm, x)) {\n      invariant(x instanceof ObjectValue);\n      // a. Let xConstructor be ? Get(x, \"constructor\").\n      let xConstructor = Get(realm, x, \"constructor\");\n\n      // b. If SameValue(xConstructor, C) is true, return x.\n      if (SameValuePartial(realm, xConstructor, C)) return x;\n    }\n\n    // 4. Let promiseCapability be ? NewPromiseCapability(C).\n    let promiseCapability = NewPromiseCapability(realm, C);\n\n    // 5. Perform ? Call(promiseCapability.[[Resolve]], undefined, « x »).\n    Call(realm, promiseCapability.resolve, realm.intrinsics.undefined, [x]);\n\n    // 6. Return promiseCapability.[[Promise]].\n    return promiseCapability.promise;\n  });\n\n  // ECMA262 25.4.4.6\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}