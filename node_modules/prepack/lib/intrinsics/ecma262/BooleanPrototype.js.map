{"version":3,"sources":["../../../src/intrinsics/ecma262/BooleanPrototype.js"],"names":["realm","obj","$BooleanData","intrinsics","false","tsTemplateSrc","tsTemplate","defineNativeMethod","target","context","getType","createFromTemplate","b","value"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,YAAJ,GAAmBF,MAAMG,UAAN,CAAiBC,KAApC;;AAEA,MAAMC,gBAAgB,gBAAtB;AACA,MAAMC,aAAa,uBAAwBD,aAAxB,CAAnB;;AAEA;AACAJ,MAAIM,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsC,mBAAW;AAC/C,QAAMC,SAASC,wCAAiCA,QAAQP,YAAzC,GAAwDO,OAAvE;AACA,QAAID,0CAAmCA,OAAOE,OAAP,0BAAvC,EAA0E;AACxE,aAAO,qBAAcC,kBAAd,CAAiCX,KAAjC,EAAwCM,UAAxC,sBAAiE,CAACE,MAAD,CAAjE,EAA2EH,aAA3E,CAAP;AACD;AACD;AACA,QAAIO,IAAI,0BAAiBZ,KAAjB,EAAwBS,OAAxB,CAAR;;AAEA;AACA,WAAO,uBAAgBT,KAAhB,EAAuBY,EAAEC,KAAF,GAAU,MAAV,GAAmB,OAA1C,CAAP;AACD,GAVD;;AAYA;AACAZ,MAAIM,kBAAJ,CAAuB,SAAvB,EAAkC,CAAlC,EAAqC,mBAAW;AAC9C;AACA,WAAO,0BAAiBP,KAAjB,EAAwBS,OAAxB,CAAP;AACD,GAHD;AAID,C;;AA7BD;;AACA;;AACA","file":"BooleanPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, AbstractValue, BooleanValue } from \"../../values/index.js\";\nimport { thisBooleanValue } from \"../../methods/to.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.3.1\n  obj.$BooleanData = realm.intrinsics.false;\n\n  const tsTemplateSrc = \"(A).toString()\";\n  const tsTemplate = buildExpressionTemplate(tsTemplateSrc);\n\n  // ECMA262 19.3.3.3\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    const target = context instanceof ObjectValue ? context.$BooleanData : context;\n    if (target instanceof AbstractValue && target.getType() === BooleanValue) {\n      return AbstractValue.createFromTemplate(realm, tsTemplate, StringValue, [target], tsTemplateSrc);\n    }\n    // 1. Let b be ? thisBooleanValue(this value).\n    let b = thisBooleanValue(realm, context);\n\n    // 2. If b is true, return \"true\"; else return \"false\".\n    return new StringValue(realm, b.value ? \"true\" : \"false\");\n  });\n\n  // ECMA262 19.3.3.4\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Return ? thisBooleanValue(this value).\n    return thisBooleanValue(realm, context);\n  });\n}\n"]}