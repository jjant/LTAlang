{"version":3,"sources":["../../../src/intrinsics/ecma262/SetPrototype.js"],"names":["realm","obj","defineNativeMethod","context","value","S","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$SetData","recordModifiedProperty","$SetData_binding","entries","undefined","e","Object","is","zero","push","i","length","true","false","callbackfn","thisArg","T","$DefineOwnProperty","get","count","configurable","valuesPropertyDescriptor","$GetOwnProperty","ThrowIfMightHaveBeenDeleted","defineNativeProperty","SymbolIterator","SymbolToStringTag","writable"],"mappings":"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","file":"SetPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, ObjectValue, StringValue, NumberValue } from \"../../values/index.js\";\nimport { Call, CreateSetIterator, IsCallable, SameValueZeroPartial } from \"../../methods/index.js\";\nimport { Properties } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.2.3.1\n  obj.defineNativeMethod(\"add\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    let entries = S.$SetData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e && SameValueZeroPartial(realm, e, value)) {\n        // i. Return S.\n        return S;\n      }\n    }\n\n    // 6. If value is -0, let value be +0.\n    value = value.throwIfNotConcrete();\n    if (value instanceof NumberValue && Object.is(value.value, -0)) {\n      value = realm.intrinsics.zero;\n    }\n\n    // 7. Append value as the last element of entries.\n    entries.push(value);\n\n    // 8. Return S.\n    return S;\n  });\n\n  // ECMA262 23.2.3.2\n  obj.defineNativeMethod(\"clear\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // All of these steps can be replace with just reseting [[SetData]]\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    // 5. Repeat for each e that is an element of entries,\n    // 5.a Replace the element of entries whose value is e with an element whose value is empty.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    S.$SetData = [];\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.4\n  obj.defineNativeMethod(\"delete\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    realm.recordModifiedProperty((S: any).$SetData_binding);\n    let entries = S.$SetData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let i = 0; i < entries.length; i++) {\n      let e = entries[i];\n\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e !== undefined && SameValueZeroPartial(realm, e, value)) {\n        // i. Replace the element of entries whose value is e with an element whose value is empty.\n        entries[i] = undefined;\n\n        // ii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.5\n  obj.defineNativeMethod(\"entries\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"key+value\").\n    return CreateSetIterator(realm, S, \"key+value\");\n  });\n\n  // ECMA262 23.2.3.6\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 6. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n    invariant(entries);\n\n    // 7. Repeat for each e that is an element of entries, in original insertion order\n    for (let e of entries) {\n      // a. If e is not empty, then\n      if (e) {\n        // i. Perform ? Call(callbackfn, T, « e, e, S »).\n        Call(realm, callbackfn, T, [e, e, S]);\n      }\n    }\n\n    // 8. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.7\n  obj.defineNativeMethod(\"has\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, return true.\n      if (e && SameValueZeroPartial(realm, e, value)) return realm.intrinsics.true;\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.9 get Set.prototype.size\n  obj.$DefineOwnProperty(\"size\", {\n    get: new NativeFunctionValue(realm, undefined, \"get size\", 0, context => {\n      // 1. Let S be the this value.\n      let S = context.throwIfNotConcrete();\n\n      // 2. If Type(S) is not Object, throw a TypeError exception.\n      if (!(S instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n      if (!S.$SetData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n      let entries = S.$SetData;\n\n      // 5. Let count be 0.\n      let count = 0;\n\n      // 6. For each e that is an element of entries\n      for (let e of entries) {\n        // a. If e is not empty, set count to count+1.\n        if (e) count++;\n      }\n\n      // 7. Return count.\n      return new NumberValue(realm, count);\n    }),\n    configurable: true,\n  });\n\n  // ECMA262 23.2.3.10\n  obj.defineNativeMethod(\"values\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"value\").\n    return CreateSetIterator(realm, S, \"value\");\n  });\n\n  // ECMA262 23.2.3.8\n  let valuesPropertyDescriptor = obj.$GetOwnProperty(\"values\");\n  invariant(valuesPropertyDescriptor);\n  Properties.ThrowIfMightHaveBeenDeleted(valuesPropertyDescriptor.value);\n  obj.defineNativeProperty(\"keys\", undefined, valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.11\n  obj.defineNativeProperty(realm.intrinsics.SymbolIterator, undefined, valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.12 Set.prototype [ @@toStringTag ]\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Set\"), { writable: false });\n}\n"]}