{"version":3,"sources":["../../../src/intrinsics/ecma262/TypedArrayProto_values.js"],"names":["realm","O","context","throwIfNotConcrete"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BAAwBA,KAAxB,EAA+B,wBAA/B,EAAyD,QAAzD,EAAmE,CAAnE,EAAsE,mBAAW;AACtF;AACA,QAAIC,IAAI,sBAASD,KAAT,EAAgBE,QAAQC,kBAAR,EAAhB,CAAR;;AAEA;AACA,wCAAmBH,KAAnB,EAA0BC,CAA1B;;AAEA;AACA,WAAO,iCAAoBD,KAApB,EAA2BC,CAA3B,EAA8B,OAA9B,CAAP;AACD,GATM,CAAP;AAUD,C;;AAhBD;;AACA;;AACA","file":"TypedArrayProto_values.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { ToObject, CreateArrayIterator } from \"../../methods/index.js\";\nimport { ValidateTypedArray } from \"../../methods/typedarray.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Array.prototype.values\", \"values\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Perform ? ValidateTypedArray(O).\n    ValidateTypedArray(realm, O);\n\n    // 3. Return CreateArrayIterator(O, \"value\").\n    return CreateArrayIterator(realm, O, \"value\");\n  });\n}\n"]}