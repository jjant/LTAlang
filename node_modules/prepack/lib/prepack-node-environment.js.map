{"version":3,"sources":["../src/prepack-node-environment.js"],"names":["prepackNodeCLI","prepackNodeCLISync","filename","options","callback","serialized","err","process","version","console","warn","realm","processObj","bootstrapFn","serializer","context","lexicalEnvironment","$GlobalEnv","variableEnvironment","pushContext","res","$Call","intrinsics","null","Error","popContext","logger","logCompletion","nextTick","execute","intrinsicName","tickCallback","tickDomainCallback","sources","filePath","fileContents","init","sourceMaps"],"mappings":"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","file":"prepack-node-environment.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* API functions for running Prepack on code that expects to run on Node */\n\nimport invariant from \"./invariant.js\";\nimport { ExecutionContext } from \"./realm.js\";\nimport Serializer from \"./serializer/index.js\";\nimport { Completion } from \"./completions.js\";\nimport { Value } from \"./values\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport initializeBootstrap from \"./intrinsics/node/bootstrap.js\";\nimport initializeProcess from \"./intrinsics/node/process.js\";\n\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport type { SourceMap } from \"./types.js\";\n\ndeclare var process: any;\n\nexport function prepackNodeCLI(\n  filename: string,\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void\n) {\n  let serialized;\n  try {\n    serialized = prepackNodeCLISync(filename, options);\n  } catch (err) {\n    callback(err);\n    return;\n  }\n  callback(null, serialized);\n}\n\nexport function prepackNodeCLISync(filename: string, options: PrepackOptions = defaultOptions) {\n  if (process.version !== \"v7.9.0\") {\n    console.warn(\n      `Prepack's node-cli mode currently only works on Node v7.9.0.\\n` +\n        `You are running version ${process.version} which will likely fail.`\n    );\n  }\n\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n\n  let processObj = initializeProcess(realm, [\"node\", filename]);\n  let bootstrapFn = initializeBootstrap(realm);\n\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n\n  let context = new ExecutionContext();\n  context.lexicalEnvironment = realm.$GlobalEnv;\n  context.variableEnvironment = realm.$GlobalEnv;\n  context.realm = realm;\n  realm.pushContext(context);\n  let res;\n  try {\n    if (bootstrapFn.$Call) {\n      res = bootstrapFn.$Call(realm.intrinsics.null, [processObj]);\n    }\n  } catch (err) {\n    if (err instanceof Completion) {\n      res = err;\n    } else if (err instanceof Error) {\n      throw err;\n    } else {\n      throw new FatalError(err);\n    }\n  } finally {\n    realm.popContext(context);\n  }\n  if (res instanceof Completion) {\n    context = new ExecutionContext();\n    realm.pushContext(context);\n    try {\n      serializer.logger.logCompletion(res);\n    } finally {\n      realm.popContext(context);\n    }\n  }\n\n  // Hack: Turn these objects generated by the bootstrap script into\n  // intrinsics that exist in a preinitialized environment. This ensures\n  // that we don't end up with duplicates of these. This won't work in an\n  // uninitialized environment.\n  let nextTick = realm.$GlobalEnv.execute(\"process.nextTick\", \"\", \"\");\n  invariant(nextTick instanceof Value);\n  nextTick.intrinsicName = \"process.nextTick\";\n  let tickCallback = realm.$GlobalEnv.execute(\"process._tickCallback\", \"\", \"\");\n  invariant(tickCallback instanceof Value);\n  tickCallback.intrinsicName = \"process._tickCallback\";\n  let tickDomainCallback = realm.$GlobalEnv.execute(\"process._tickDomainCallback\", \"\", \"\");\n  invariant(tickDomainCallback instanceof Value);\n  tickDomainCallback.intrinsicName = \"process._tickDomainCallback\";\n\n  // Serialize\n  let sources = [{ filePath: \"\", fileContents: \"\" }];\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n"]}