{"version":3,"sources":["../../src/serializer/ResidualHeapValueIdentifiers.js"],"names":["ResidualHeapValueIdentifiers","collectValToRefCountOnly","refs","Map","valToRefCount","val","id","has","set","get","undefined","delete","getIdentifierAndIncrementReferenceCountOptional","incrementReferenceCount","refCount"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;AAEA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACaA,4B,WAAAA,4B;AACX,0CAAc;AAAA;;AACZ,SAAKC,wBAAL,GAAgC,KAAhC;AACA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;;;;gCAEW;AACV,WAAKF,wBAAL,GAAgC,IAAhC;AACA,WAAKG,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACD;;;gCAEW;AACV,WAAKF,wBAAL,GAAgC,KAAhC;AACA,WAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;;;kCAMaE,G,EAAYC,E,EAAyB;AACjD,+BAAU,CAAC,KAAKJ,IAAL,CAAUK,GAAV,CAAcF,GAAd,CAAX;AACA,WAAKH,IAAL,CAAUM,GAAV,CAAcH,GAAd,EAAmBC,EAAnB;AACD;;;kCAEaD,G,EAAiC;AAC7C,UAAIC,KAAK,KAAKJ,IAAL,CAAUO,GAAV,CAAcJ,GAAd,CAAT;AACA,+BAAUC,OAAOI,SAAjB;AACA,aAAOJ,EAAP;AACD;;;qCAEgBD,G,EAAY;AAC3B,+BAAU,KAAKH,IAAL,CAAUK,GAAV,CAAcF,GAAd,CAAV;AACA,WAAKH,IAAL,CAAUS,MAAV,CAAiBN,GAAjB;AACD;;;4DAEuCA,G,EAAiC;AACvE,UAAIC,KAAK,KAAKM,+CAAL,CAAqDP,GAArD,CAAT;AACA,+BAAUC,OAAOI,SAAjB,EAA4B,sCAA5B;AACA,aAAOJ,EAAP;AACD;;;oEAE+CD,G,EAAwC;AACtF,UAAIC,KAAK,KAAKJ,IAAL,CAAUO,GAAV,CAAcJ,GAAd,CAAT;AACA,UAAIC,OAAOI,SAAX,EAAsB;AACpB,aAAKG,uBAAL,CAA6BR,GAA7B;AACD;AACD,aAAOC,EAAP;AACD;;;4CAEuBD,G,EAAY;AAClC,UAAI,KAAKJ,wBAAT,EAAmC;AACjC,YAAIG,gBAAgB,KAAKA,aAAzB;AACA,iCAAUA,kBAAkBM,SAA5B;AACA,YAAII,WAAWV,cAAcK,GAAd,CAAkBJ,GAAlB,CAAf;AACA,YAAIS,QAAJ,EAAc;AACZA;AACD,SAFD,MAEO;AACLA,qBAAW,CAAX;AACD;AACDV,sBAAcI,GAAd,CAAkBH,GAAlB,EAAuBS,QAAvB;AACD;AACF;;;oCAEeT,G,EAAY;AAC1B,UAAI,KAAKJ,wBAAL,IAAiC,KAAKG,aAAL,KAAuBM,SAA5D,EAAuE,OAAO,IAAP;AACvE,UAAII,WAAW,KAAKV,aAAL,CAAmBK,GAAnB,CAAuBJ,GAAvB,CAAf;AACA,+BAAUS,aAAaJ,SAAb,IAA0BI,WAAW,CAA/C;AACA,aAAOA,aAAa,CAApB;AACD","file":"ResidualHeapValueIdentifiers.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeIdentifier } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\n// This class maintains a map of values to babel identifiers.\n// This class can optionally track how often such value identifiers are referenced\n// when pass 1 is activated, which is usually followed by pass 2 in which\n// unneeded identifiers (those which were only ever referenced once) are\n// eliminated as  the defining expression can be inlined.\nexport class ResidualHeapValueIdentifiers {\n  constructor() {\n    this.collectValToRefCountOnly = false;\n    this.refs = new Map();\n  }\n\n  initPass1() {\n    this.collectValToRefCountOnly = true;\n    this.valToRefCount = new Map();\n  }\n\n  initPass2() {\n    this.collectValToRefCountOnly = false;\n    this.refs = new Map();\n  }\n\n  collectValToRefCountOnly: boolean;\n  valToRefCount: void | Map<Value, number>;\n  refs: Map<Value, BabelNodeIdentifier>;\n\n  setIdentifier(val: Value, id: BabelNodeIdentifier) {\n    invariant(!this.refs.has(val));\n    this.refs.set(val, id);\n  }\n\n  getIdentifier(val: Value): BabelNodeIdentifier {\n    let id = this.refs.get(val);\n    invariant(id !== undefined);\n    return id;\n  }\n\n  deleteIdentifier(val: Value) {\n    invariant(this.refs.has(val));\n    this.refs.delete(val);\n  }\n\n  getIdentifierAndIncrementReferenceCount(val: Value): BabelNodeIdentifier {\n    let id = this.getIdentifierAndIncrementReferenceCountOptional(val);\n    invariant(id !== undefined, \"Value Id cannot be null or undefined\");\n    return id;\n  }\n\n  getIdentifierAndIncrementReferenceCountOptional(val: Value): void | BabelNodeIdentifier {\n    let id = this.refs.get(val);\n    if (id !== undefined) {\n      this.incrementReferenceCount(val);\n    }\n    return id;\n  }\n\n  incrementReferenceCount(val: Value) {\n    if (this.collectValToRefCountOnly) {\n      let valToRefCount = this.valToRefCount;\n      invariant(valToRefCount !== undefined);\n      let refCount = valToRefCount.get(val);\n      if (refCount) {\n        refCount++;\n      } else {\n        refCount = 1;\n      }\n      valToRefCount.set(val, refCount);\n    }\n  }\n\n  needsIdentifier(val: Value) {\n    if (this.collectValToRefCountOnly || this.valToRefCount === undefined) return true;\n    let refCount = this.valToRefCount.get(val);\n    invariant(refCount !== undefined && refCount > 0);\n    return refCount !== 1;\n  }\n}\n"]}