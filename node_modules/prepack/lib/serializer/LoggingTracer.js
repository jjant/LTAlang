"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoggingTracer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _environment = require("../environment.js");

var _realm = require("../realm.js");

var _index = require("../methods/index.js");

var _completions = require("../completions.js");

var _index2 = require("../values/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function describeValue(realm, v) {
  if (v instanceof _index2.NumberValue || v instanceof _index2.BooleanValue) return v.value.toString();
  if (v instanceof _index2.UndefinedValue) return "undefined";
  if (v instanceof _index2.NullValue) return "null";
  if (v instanceof _index2.StringValue) return "\"" + v.value + "\""; // TODO: proper escaping
  if (v instanceof _index2.FunctionValue) return (0, _index.ToStringPartial)(realm, (0, _index.Get)(realm, v, "name")) || "(anonymous function)";
  if (v instanceof _index2.ObjectValue) return "(some object)";
  if (v instanceof _index2.AbstractValue) return "(some abstract value)";
  (0, _invariant2.default)(false);
}

var LoggingTracer = exports.LoggingTracer = function (_Tracer) {
  _inherits(LoggingTracer, _Tracer);

  function LoggingTracer(realm) {
    _classCallCheck(this, LoggingTracer);

    var _this = _possibleConstructorReturn(this, (LoggingTracer.__proto__ || Object.getPrototypeOf(LoggingTracer)).call(this));

    _this.realm = realm;
    _this.nesting = [];
    return _this;
  }

  _createClass(LoggingTracer, [{
    key: "log",
    value: function log(message) {
      console.log("[calls] " + this.nesting.map(function (_) {
        return "  ";
      }).join("") + message);
    }
  }, {
    key: "beginEvaluateForEffects",
    value: function beginEvaluateForEffects(state) {
      this.log(">evaluate for effects");
      this.nesting.push("(evaluate for effects)");
    }
  }, {
    key: "endEvaluateForEffects",
    value: function endEvaluateForEffects(state, effects) {
      var name = this.nesting.pop();
      (0, _invariant2.default)(name === "(evaluate for effects)");
      this.log("<evaluate for effects");
    }
  }, {
    key: "beforeCall",
    value: function beforeCall(F, thisArgument, argumentsList, newTarget) {
      var realm = this.realm;
      var name = describeValue(realm, F);
      this.log(">" + name + "(" + argumentsList.map(function (v) {
        return describeValue(realm, v);
      }).join(", ") + ")");
      this.nesting.push(name);
    }
  }, {
    key: "afterCall",
    value: function afterCall(F, thisArgument, argumentsList, newTarget, result) {
      var name = this.nesting.pop();
      this.log("<" + name + (result instanceof _completions.ThrowCompletion ? ": error" : ""));
    }
  }]);

  return LoggingTracer;
}(_realm.Tracer);
//# sourceMappingURL=LoggingTracer.js.map