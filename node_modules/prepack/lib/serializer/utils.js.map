{"version":3,"sources":["../../src/serializer/utils.js"],"names":["getSuggestedArrayLiteralLength","commonAncestorOf","getOrDefault","realm","val","length","properties","keys","key","Number","node1","node2","n1","n2","count1","count2","p1","getParent","p2","undefined","map","defaultFn","value","get","set"],"mappings":";;;;;QAoBgBA,8B,GAAAA,8B;QAcAC,gB,GAAAA,gB;QA2CAC,Y,GAAAA,Y;;AA/DhB;;;;AACA;;;;AAEA;;;AAjBA;;;;;;;;;AAoBO,SAASF,8BAAT,CAAwCG,KAAxC,EAAsDC,GAAtD,EAAgF;AACrF,2BAAU,oBAAQD,KAAR,EAAeC,GAAf,CAAV;;AAEA,MAAIC,SAAS,CAAb;AAHqF;AAAA;AAAA;;AAAA;AAIrF,yBAAkBD,IAAIE,UAAJ,CAAeC,IAAf,EAAlB,8HAAyC;AAAA,UAA9BC,GAA8B;;AACvC,UAAI,yBAAaL,KAAb,EAAoBK,GAApB,KAA4BC,OAAOD,GAAP,KAAeH,MAA/C,EAAuD;AACrDA,iBAASI,OAAOD,GAAP,IAAc,CAAvB;AACD;AACF;AARoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASrF,SAAOH,MAAP;AACD;;AAIM,SAASJ,gBAAT,CAAwCS,KAAxC,EAAyDC,KAAzD,EAAoF;AACzF,MAAID,UAAUC,KAAd,EAAqB,OAAOD,KAAP;AACrB;AACA;AACA,MAAIE,KAAKF,KAAT;AAAA,MACEG,KAAKF,KADP;AAAA,MAEEG,SAAS,CAFX;AAAA,MAGEC,SAAS,CAHX;AAIA,SAAO,IAAP,EAAa;AACX,QAAIC,KAAKJ,MAAMA,GAAGK,SAAH,EAAf;AACA,QAAIC,KAAKL,MAAMA,GAAGI,SAAH,EAAf;AACA,QAAID,OAAOL,KAAX,EAAkB,OAAOA,KAAP;AAClB,QAAIO,OAAOR,KAAX,EAAkB,OAAOA,KAAP;AAClB,QAAIM,EAAJ,EAAQF;AACR,QAAII,EAAJ,EAAQH;AACR,QAAI,CAACC,EAAD,IAAO,CAACE,EAAZ,EAAgB;AAChBN,SAAKI,EAAL;AACAH,SAAKK,EAAL;AACD;AACD;AACAN,OAAKF,KAAL;AACA,SAAOI,SAASC,MAAhB,EAAwB;AACtB,6BAAUH,OAAOO,SAAjB;AACAP,SAAKA,GAAGK,SAAH,EAAL;AACAH;AACD;AACDD,OAAKF,KAAL;AACA,SAAOG,SAASC,MAAhB,EAAwB;AACtB,6BAAUF,OAAOM,SAAjB;AACAN,SAAKA,GAAGI,SAAH,EAAL;AACAF;AACD;AACD;AACA,SAAOH,OAAOC,EAAd,EAAkB;AAChB,6BAAUD,OAAOO,SAAjB;AACAP,SAAKA,GAAGK,SAAH,EAAL;AACA,6BAAUJ,OAAOM,SAAjB;AACAN,SAAKA,GAAGI,SAAH,EAAL;AACD;AACD,SAAOL,EAAP;AACD;;AAED;AACO,SAASV,YAAT,CAA4BkB,GAA5B,EAA4CZ,GAA5C,EAAoDa,SAApD,EAA2E;AAChF,MAAIC,QAAQF,IAAIG,GAAJ,CAAQf,GAAR,CAAZ;AACA,MAAIc,UAAUH,SAAd,EAAyBC,IAAII,GAAJ,CAAQhB,GAAR,EAAcc,QAAQD,WAAtB;AACzB,2BAAUC,UAAUH,SAApB;AACA,SAAOG,KAAP;AACD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { ObjectValue } from \"../values/index.js\";\nimport type { Realm } from \"../realm.js\";\n\nimport invariant from \"../invariant.js\";\nimport { IsArray, IsArrayIndex } from \"../methods/index.js\";\n\n/**\n * Get index property list length by searching array properties list for the max index key value plus 1.\n */\nexport function getSuggestedArrayLiteralLength(realm: Realm, val: ObjectValue): number {\n  invariant(IsArray(realm, val));\n\n  let length = 0;\n  for (const key of val.properties.keys()) {\n    if (IsArrayIndex(realm, key) && Number(key) >= length) {\n      length = Number(key) + 1;\n    }\n  }\n  return length;\n}\n\ninterface HasParent { getParent(): void | HasParent }\n\nexport function commonAncestorOf<T: HasParent>(node1: void | T, node2: void | T): void | T {\n  if (node1 === node2) return node1;\n  // First get the path length to the root node for both nodes while also checking if\n  // either node is the parent of the other.\n  let n1 = node1,\n    n2 = node2,\n    count1 = 0,\n    count2 = 0;\n  while (true) {\n    let p1 = n1 && n1.getParent();\n    let p2 = n2 && n2.getParent();\n    if (p1 === node2) return node2;\n    if (p2 === node1) return node1;\n    if (p1) count1++;\n    if (p2) count2++;\n    if (!p1 && !p2) break;\n    n1 = p1;\n    n2 = p2;\n  }\n  // Now shorten the longest path to the same length as the shorter path\n  n1 = node1;\n  while (count1 > count2) {\n    invariant(n1 !== undefined);\n    n1 = n1.getParent();\n    count1--;\n  }\n  n2 = node2;\n  while (count1 < count2) {\n    invariant(n2 !== undefined);\n    n2 = n2.getParent();\n    count2--;\n  }\n  // Now run up both paths in tandem, stopping at the first common entry\n  while (n1 !== n2) {\n    invariant(n1 !== undefined);\n    n1 = n1.getParent();\n    invariant(n2 !== undefined);\n    n2 = n2.getParent();\n  }\n  return n1;\n}\n\n// Gets map[key] with default value provided by defaultFn\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultFn: () => V): V {\n  let value = map.get(key);\n  if (value === undefined) map.set(key, (value = defaultFn()));\n  invariant(value !== undefined);\n  return value;\n}\n"]}