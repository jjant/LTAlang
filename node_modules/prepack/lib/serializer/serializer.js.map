{"version":3,"sources":["../../src/serializer/serializer.js"],"names":["t","Serializer","realm","serializerOptions","useAbstractInterpretation","generator","logger","internalDebug","statistics","modules","logModules","delayUnsupportedRequires","functions","additionalFunctions","moduleTracer","trace","tracers","push","options","react","usedReactElementKeys","Set","sources","sourceMaps","$GlobalEnv","executeSources","realmPreludeGenerator","preludeGenerator","forbiddenNames","nameGenerator","ast","isIdentifier","node","add","name","res","code","context","pushContext","logCompletion","popContext","diagnostic","location","handleError","timingStats","profile","undefined","totalTime","Date","now","globalCodeTime","_execute","hasErrors","resolveInitializedModules","checkThatFunctionsAreIndependent","reactStatistics","enabled","checkReactRootComponents","initializeMoreModules","initializeMoreModulesTime","additionalFunctionValuesAndEffects","getAdditionalFunctionValuesToEffects","deepTraversalTime","residualHeapVisitor","visitRoots","residualHeapValueIdentifiers","inlineExpressions","referenceCountsTime","initPass1","inspector","values","functionInstances","functionInfos","referencedDeclaredValues","additionalFunctionValueInfos","serialize","initPass2","serializePassTime","TargetSerializer","lazyObjectsRuntime","residualHeapSerializer","flowRequired","generated","logStatistics","log","map"],"mappings":"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","file":"serializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport type { SourceFile } from \"../types.js\";\nimport { AbruptCompletion } from \"../completions.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport generate from \"babel-generator\";\nimport type SourceMap from \"babel-generator\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport { stripFlowTypeAnnotations } from \"../flow/utils.js\";\nimport invariant from \"../invariant.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport { TimingStatistics, SerializerStatistics, ReactStatistics } from \"./types.js\";\nimport type { ReactSerializerState } from \"./types.js\";\nimport { Functions } from \"./functions.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { LoggingTracer } from \"./LoggingTracer.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport { LazyObjectsSerializer } from \"./LazyObjectsSerializer.js\";\nimport * as t from \"babel-types\";\n\nexport class Serializer {\n  constructor(realm: Realm, serializerOptions: SerializerOptions = {}) {\n    invariant(realm.useAbstractInterpretation);\n    // Start tracking mutations\n    realm.generator = new Generator(realm);\n\n    this.realm = realm;\n    this.logger = new Logger(this.realm, !!serializerOptions.internalDebug);\n    this.statistics = new SerializerStatistics();\n    this.modules = new Modules(\n      this.realm,\n      this.logger,\n      this.statistics,\n      !!serializerOptions.logModules,\n      !!serializerOptions.delayUnsupportedRequires\n    );\n    this.functions = new Functions(this.realm, serializerOptions.additionalFunctions, this.modules.moduleTracer);\n    if (serializerOptions.trace) this.realm.tracers.push(new LoggingTracer(this.realm));\n\n    this.options = serializerOptions;\n    this.react = {\n      usedReactElementKeys: new Set(),\n    };\n  }\n\n  realm: Realm;\n  functions: Functions;\n  logger: Logger;\n  modules: Modules;\n  options: SerializerOptions;\n  statistics: SerializerStatistics;\n  react: ReactSerializerState;\n\n  _execute(sources: Array<SourceFile>, sourceMaps?: boolean = false) {\n    let realm = this.realm;\n    let [res, code] = realm.$GlobalEnv.executeSources(sources, \"script\", ast => {\n      let realmPreludeGenerator = realm.preludeGenerator;\n      invariant(realmPreludeGenerator);\n      let forbiddenNames = realmPreludeGenerator.nameGenerator.forbiddenNames;\n      traverseFast(ast, node => {\n        if (!t.isIdentifier(node)) return false;\n\n        forbiddenNames.add(((node: any): BabelNodeIdentifier).name);\n        return true;\n      });\n    });\n\n    if (res instanceof AbruptCompletion) {\n      let context = new ExecutionContext();\n      realm.pushContext(context);\n      try {\n        this.logger.logCompletion(res);\n      } finally {\n        realm.popContext(context);\n      }\n      let diagnostic = new CompilerDiagnostic(\"Global code may end abruptly\", res.location, \"PP0016\", \"FatalError\");\n      realm.handleError(diagnostic);\n      throw new FatalError();\n    }\n    return code;\n  }\n\n  init(\n    sources: Array<SourceFile>,\n    sourceMaps?: boolean = false\n  ): void | {\n    code: string,\n    map: void | SourceMap,\n    statistics?: SerializerStatistics,\n    timingStats?: TimingStatistics,\n  } {\n    // Phase 1: Let's interpret.\n    let timingStats = this.options.profile ? new TimingStatistics() : undefined;\n    if (timingStats !== undefined) {\n      timingStats.totalTime = Date.now();\n      timingStats.globalCodeTime = Date.now();\n    }\n    let code = this._execute(sources);\n    if (timingStats !== undefined) timingStats.globalCodeTime = Date.now() - timingStats.globalCodeTime;\n    if (this.logger.hasErrors()) return undefined;\n    this.modules.resolveInitializedModules();\n    this.functions.checkThatFunctionsAreIndependent();\n    let reactStatistics = null;\n    if (this.realm.react.enabled) {\n      reactStatistics = new ReactStatistics();\n      this.functions.checkReactRootComponents(reactStatistics, this.react);\n    }\n\n    if (this.options.initializeMoreModules) {\n      if (timingStats !== undefined) timingStats.initializeMoreModulesTime = Date.now();\n      this.modules.initializeMoreModules();\n      if (this.logger.hasErrors()) return undefined;\n      if (timingStats !== undefined)\n        timingStats.initializeMoreModulesTime = Date.now() - timingStats.initializeMoreModulesTime;\n    }\n\n    let additionalFunctionValuesAndEffects = this.functions.getAdditionalFunctionValuesToEffects();\n    //Deep traversal of the heap to identify the necessary scope of residual functions\n    if (timingStats !== undefined) timingStats.deepTraversalTime = Date.now();\n    let residualHeapVisitor = new ResidualHeapVisitor(\n      this.realm,\n      this.logger,\n      this.modules,\n      additionalFunctionValuesAndEffects\n    );\n    residualHeapVisitor.visitRoots();\n    if (this.logger.hasErrors()) return undefined;\n    if (timingStats !== undefined) timingStats.deepTraversalTime = Date.now() - timingStats.deepTraversalTime;\n\n    // Phase 2: Let's serialize the heap and generate code.\n    // Serialize for the first time in order to gather reference counts\n    let residualHeapValueIdentifiers = new ResidualHeapValueIdentifiers();\n\n    if (this.options.inlineExpressions) {\n      if (timingStats !== undefined) timingStats.referenceCountsTime = Date.now();\n      residualHeapValueIdentifiers.initPass1();\n      new ResidualHeapSerializer(\n        this.realm,\n        this.logger,\n        this.modules,\n        residualHeapValueIdentifiers,\n        residualHeapVisitor.inspector,\n        residualHeapVisitor.values,\n        residualHeapVisitor.functionInstances,\n        residualHeapVisitor.functionInfos,\n        this.options,\n        residualHeapVisitor.referencedDeclaredValues,\n        additionalFunctionValuesAndEffects,\n        residualHeapVisitor.additionalFunctionValueInfos,\n        this.statistics,\n        this.react\n      ).serialize();\n      if (this.logger.hasErrors()) return undefined;\n      if (timingStats !== undefined) timingStats.referenceCountsTime = Date.now() - timingStats.referenceCountsTime;\n      residualHeapValueIdentifiers.initPass2();\n    }\n\n    // Serialize for a second time, using reference counts to minimize number of generated identifiers\n    if (timingStats !== undefined) timingStats.serializePassTime = Date.now();\n    const TargetSerializer = this.options.lazyObjectsRuntime != null ? LazyObjectsSerializer : ResidualHeapSerializer;\n    let residualHeapSerializer = new TargetSerializer(\n      this.realm,\n      this.logger,\n      this.modules,\n      residualHeapValueIdentifiers,\n      residualHeapVisitor.inspector,\n      residualHeapVisitor.values,\n      residualHeapVisitor.functionInstances,\n      residualHeapVisitor.functionInfos,\n      this.options,\n      residualHeapVisitor.referencedDeclaredValues,\n      additionalFunctionValuesAndEffects,\n      residualHeapVisitor.additionalFunctionValueInfos,\n      this.statistics,\n      this.react\n    );\n\n    let ast = residualHeapSerializer.serialize();\n    if (this.realm.react.enabled && this.realm.react.flowRequired) {\n      stripFlowTypeAnnotations(ast);\n    }\n    let generated = generate(ast, { sourceMaps: sourceMaps }, (code: any));\n    if (timingStats !== undefined) {\n      timingStats.serializePassTime = Date.now() - timingStats.serializePassTime;\n      timingStats.totalTime = Date.now() - timingStats.totalTime;\n    }\n    invariant(!this.logger.hasErrors());\n    if (this.options.logStatistics) residualHeapSerializer.statistics.log();\n    return {\n      code: generated.code,\n      map: generated.map,\n      reactStatistics,\n      statistics: residualHeapSerializer.statistics,\n      timingStats: timingStats,\n    };\n  }\n}\n"]}