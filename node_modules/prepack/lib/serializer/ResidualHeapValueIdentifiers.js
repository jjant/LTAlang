"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResidualHeapValueIdentifiers = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * LICENSE file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


var _index = require("../values/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// This class maintains a map of values to babel identifiers.
// This class can optionally track how often such value identifiers are referenced
// when pass 1 is activated, which is usually followed by pass 2 in which
// unneeded identifiers (those which were only ever referenced once) are
// eliminated as  the defining expression can be inlined.
var ResidualHeapValueIdentifiers = exports.ResidualHeapValueIdentifiers = function () {
  function ResidualHeapValueIdentifiers() {
    _classCallCheck(this, ResidualHeapValueIdentifiers);

    this.collectValToRefCountOnly = false;
    this.refs = new Map();
  }

  _createClass(ResidualHeapValueIdentifiers, [{
    key: "initPass1",
    value: function initPass1() {
      this.collectValToRefCountOnly = true;
      this.valToRefCount = new Map();
    }
  }, {
    key: "initPass2",
    value: function initPass2() {
      this.collectValToRefCountOnly = false;
      this.refs = new Map();
    }
  }, {
    key: "setIdentifier",
    value: function setIdentifier(val, id) {
      (0, _invariant2.default)(!this.refs.has(val));
      this.refs.set(val, id);
    }
  }, {
    key: "getIdentifier",
    value: function getIdentifier(val) {
      var id = this.refs.get(val);
      (0, _invariant2.default)(id !== undefined);
      return id;
    }
  }, {
    key: "deleteIdentifier",
    value: function deleteIdentifier(val) {
      (0, _invariant2.default)(this.refs.has(val));
      this.refs.delete(val);
    }
  }, {
    key: "getIdentifierAndIncrementReferenceCount",
    value: function getIdentifierAndIncrementReferenceCount(val) {
      var id = this.getIdentifierAndIncrementReferenceCountOptional(val);
      (0, _invariant2.default)(id !== undefined, "Value Id cannot be null or undefined");
      return id;
    }
  }, {
    key: "getIdentifierAndIncrementReferenceCountOptional",
    value: function getIdentifierAndIncrementReferenceCountOptional(val) {
      var id = this.refs.get(val);
      if (id !== undefined) {
        this.incrementReferenceCount(val);
      }
      return id;
    }
  }, {
    key: "incrementReferenceCount",
    value: function incrementReferenceCount(val) {
      if (this.collectValToRefCountOnly) {
        var valToRefCount = this.valToRefCount;
        (0, _invariant2.default)(valToRefCount !== undefined);
        var refCount = valToRefCount.get(val);
        if (refCount) {
          refCount++;
        } else {
          refCount = 1;
        }
        valToRefCount.set(val, refCount);
      }
    }
  }, {
    key: "needsIdentifier",
    value: function needsIdentifier(val) {
      if (this.collectValToRefCountOnly || this.valToRefCount === undefined) return true;
      var refCount = this.valToRefCount.get(val);
      (0, _invariant2.default)(refCount !== undefined && refCount > 0);
      return refCount !== 1;
    }
  }]);

  return ResidualHeapValueIdentifiers;
}();
//# sourceMappingURL=ResidualHeapValueIdentifiers.js.map