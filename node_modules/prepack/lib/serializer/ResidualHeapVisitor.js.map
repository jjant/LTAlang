{"version":3,"sources":["../../src/serializer/ResidualHeapVisitor.js"],"names":["t","ResidualHeapVisitor","realm","logger","modules","additionalFunctionValuesAndEffects","useAbstractInterpretation","declarativeEnvironmentRecordsBindings","Map","globalBindings","functionInfos","functionInstances","values","generator","scope","commonScope","inspector","referencedDeclaredValues","Set","delayedVisitGeneratorEntries","equivalenceSet","additionalFunctionValueInfos","f","oldScope","binding","desc","descriptor","undefined","obj","object","canIgnoreProperty","key","visitDescriptor","kind","symbols","symbol","propertyBinding","visitValue","properties","propertyBindingKey","propertyBindingValue","visitObjectProperty","unknownProperty","val","value","visitObjectPropertiesWithComputedNames","visitObjectPrototype","visitConstructorPrototype","proto","$Prototype","getKind","intrinsics","func","prototype","getPropertyValue","originalConstructor","isDefaultPrototype","absVal","args","length","cond","P","V","earlier_props","visitEquivalentValue","consequent","alternate","joinCondition","descriptor1","descriptor2","get","set","r","n","residualFunctionBindings","residualFunctionBinding","bindings","deletable","initialized","modified","declarativeEnvironmentRecord","visitObjectProperties","lenProperty","entries","$MapData","$WeakMapData","len","i","entry","$Key","$Value","$SetData","$WeakSetData","$BoundTargetFunction","$BoundThis","$BoundArguments","boundArg","constructor","formalParameters","$FormalParameters","code","$ECMAScriptCode","functionInfo","unbound","usesArguments","usesThis","state","tryQuery","bind","file","program","expressionStatement","functionExpression","isResidual","size","isUnsafeResidual","logError","loc","Object","keys","join","_withScope","innerName","doesNotMatter","reference","ResolveBinding","$Environment","IsUnresolvableReference","base","visitGlobalBinding","referencedBase","referencedName","visitDeclarativeEnvironmentRecordBinding","has","functionValue","scopeInstances","dateValue","$DateValue","buf","$ViewedArrayBuffer","visitValueMap","visitValueSet","$ParameterMap","$Description","$ProxyTarget","$ProxyHandler","scopes","add","equivalentValue","_mark","visitAbstractValue","refuseSerialization","isIntrinsic","isTemplate","isLeaf","visitValueArray","visitValueProxy","visitValueFunction","visitValueSymbol","visitValueObject","getGlobalLetBinding","visitValues","visitGenerator","canSkip","recordDeclaration","recordDelayedEntry","push","visit","createGeneratorVisitCallbacks","effects","result","modifiedBindings","modifiedProperties","createdObjects","parent","applyEffects","modifiedBindingInfo","visitPropertiesAndBindings","intrinsicName","additionalBinding","modifiedBinding","residualBinding","isGlobal","name","containingEnv","environment","bindMap","newValue","additionalFunctionOverridesValue","funcInstance","captures","instance","restoreBindings","restoreProperties","oldDelayedEntries","entryGenerator","visitEntry","initializedModules","moduleValue","evaluateAndRevertInGlobalEnv","visitAdditionalFunctionEffects"],"mappings":"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","file":"ResidualHeapVisitor.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Realm } from \"../realm.js\";\nimport type { Effects } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding, ObjectKind } from \"../types.js\";\nimport { ToLength, HashSet, IsArray, Get } from \"../methods/index.js\";\nimport {\n  BoundFunctionValue,\n  ProxyValue,\n  SymbolValue,\n  AbstractValue,\n  EmptyValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  Value,\n  ObjectValue,\n  AbstractObjectValue,\n  NativeFunctionValue,\n} from \"../values/index.js\";\nimport { describeLocation } from \"../intrinsics/ecma262/Error.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeBlockStatement } from \"babel-types\";\nimport { Generator } from \"../utils/generator.js\";\nimport type { GeneratorEntry, VisitEntryCallbacks } from \"../utils/generator.js\";\nimport traverse from \"babel-traverse\";\nimport invariant from \"../invariant.js\";\nimport type { ResidualFunctionBinding, FunctionInfo, AdditionalFunctionInfo, FunctionInstance } from \"./types.js\";\nimport { ClosureRefVisitor } from \"./visitors.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport { getSuggestedArrayLiteralLength } from \"./utils.js\";\nimport { Environment } from \"../singletons.js\";\n\nexport type Scope = FunctionValue | Generator;\n\n/* This class visits all values that are reachable in the residual heap.\n   In particular, this \"filters out\" values that are...\n   - captured by a DeclarativeEnvironmentRecord, but not actually used by any closure.\n   - Unmodified prototype objects\n   TODO #680: Figure out minimal set of values that need to be kept alive for WeakSet and WeakMap instances.\n*/\nexport class ResidualHeapVisitor {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, Effects>\n  ) {\n    invariant(realm.useAbstractInterpretation);\n    this.realm = realm;\n    this.logger = logger;\n    this.modules = modules;\n\n    this.declarativeEnvironmentRecordsBindings = new Map();\n    this.globalBindings = new Map();\n    this.functionInfos = new Map();\n    this.functionInstances = new Map();\n    this.values = new Map();\n    let generator = this.realm.generator;\n    invariant(generator);\n    this.scope = this.commonScope = generator;\n    this.inspector = new ResidualHeapInspector(realm, logger);\n    this.referencedDeclaredValues = new Set();\n    this.delayedVisitGeneratorEntries = [];\n    this.additionalFunctionValuesAndEffects = additionalFunctionValuesAndEffects;\n    this.equivalenceSet = new HashSet();\n    this.additionalFunctionValueInfos = new Map();\n  }\n\n  realm: Realm;\n  logger: Logger;\n  modules: Modules;\n\n  // Caches that ensure one ResidualFunctionBinding exists per (record, name) pair\n  declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, Map<string, ResidualFunctionBinding>>;\n  globalBindings: Map<string, ResidualFunctionBinding>;\n\n  functionInfos: Map<BabelNodeBlockStatement, FunctionInfo>;\n  scope: Scope;\n  // Either the realm's generator or the FunctionValue of an additional function to serialize\n  commonScope: Scope;\n  values: Map<Value, Set<Scope>>;\n  inspector: ResidualHeapInspector;\n  referencedDeclaredValues: Set<AbstractValue>;\n  delayedVisitGeneratorEntries: Array<{| commonScope: Scope, generator: Generator, entry: GeneratorEntry |}>;\n  additionalFunctionValuesAndEffects: Map<FunctionValue, Effects>;\n  functionInstances: Map<FunctionValue, FunctionInstance>;\n  additionalFunctionValueInfos: Map<FunctionValue, AdditionalFunctionInfo>;\n  equivalenceSet: HashSet<AbstractValue>;\n\n  _withScope(scope: Scope, f: () => void) {\n    let oldScope = this.scope;\n    this.scope = scope;\n    f();\n    this.scope = oldScope;\n  }\n\n  visitObjectProperty(binding: PropertyBinding) {\n    let desc = binding.descriptor;\n    if (desc === undefined) return; //deleted\n    let obj = binding.object;\n    if (obj instanceof AbstractObjectValue || !this.inspector.canIgnoreProperty(obj, binding.key)) {\n      this.visitDescriptor(desc);\n    }\n  }\n\n  visitObjectProperties(obj: ObjectValue, kind?: ObjectKind): void {\n    // visit properties\n    if (kind !== \"ReactElement\") {\n      for (let [symbol, propertyBinding] of obj.symbols) {\n        invariant(propertyBinding);\n        let desc = propertyBinding.descriptor;\n        if (desc === undefined) continue; //deleted\n        this.visitDescriptor(desc);\n        this.visitValue(symbol);\n      }\n    }\n\n    // visit properties\n    for (let [propertyBindingKey, propertyBindingValue] of obj.properties) {\n      // we don't want to the $$typeof or _owner properties\n      // as this is contained within the JSXElement, otherwise\n      // they we be need to be emitted during serialization\n      if (kind === \"ReactElement\" && (propertyBindingKey === \"$$typeof\" || propertyBindingKey === \"_owner\")) {\n        continue;\n      }\n      invariant(propertyBindingValue);\n      this.visitObjectProperty(propertyBindingValue);\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        this.visitObjectPropertiesWithComputedNames(val);\n      }\n    }\n\n    // prototype\n    if (kind !== \"ReactElement\") {\n      // we don't want to the ReactElement prototype visited\n      // as this is contained within the JSXElement, otherwise\n      // they we be need to be emitted during serialization\n      this.visitObjectPrototype(obj);\n    }\n    if (obj instanceof FunctionValue) this.visitConstructorPrototype(obj);\n  }\n\n  visitObjectPrototype(obj: ObjectValue) {\n    let proto = obj.$Prototype;\n\n    let kind = obj.getKind();\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    this.visitValue(proto);\n  }\n\n  visitConstructorPrototype(func: FunctionValue) {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = ResidualHeapInspector.getPropertyValue(func, \"prototype\");\n    if (\n      prototype instanceof ObjectValue &&\n      prototype.originalConstructor === func &&\n      !this.inspector.isDefaultPrototype(prototype)\n    ) {\n      this.visitValue(prototype);\n    }\n  }\n\n  visitObjectPropertiesWithComputedNames(absVal: AbstractValue): void {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue) this.visitObjectPropertiesWithComputedNames(earlier_props);\n      this.visitValue(P);\n      this.visitValue(V);\n    } else {\n      // conditional assignment\n      absVal.args[0] = this.visitEquivalentValue(cond);\n      let consequent = absVal.args[1];\n      invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2];\n      invariant(alternate instanceof AbstractValue);\n      this.visitObjectPropertiesWithComputedNames(consequent);\n      this.visitObjectPropertiesWithComputedNames(alternate);\n    }\n  }\n\n  visitDescriptor(desc: Descriptor): void {\n    invariant(desc.value === undefined || desc.value instanceof Value);\n    if (desc.joinCondition !== undefined) {\n      desc.joinCondition = this.visitEquivalentValue(desc.joinCondition);\n      if (desc.descriptor1 !== undefined) this.visitDescriptor(desc.descriptor1);\n      if (desc.descriptor2 !== undefined) this.visitDescriptor(desc.descriptor2);\n      return;\n    }\n    if (desc.value !== undefined) desc.value = this.visitEquivalentValue(desc.value);\n    if (desc.get !== undefined) this.visitValue(desc.get);\n    if (desc.set !== undefined) this.visitValue(desc.set);\n  }\n\n  visitDeclarativeEnvironmentRecordBinding(r: DeclarativeEnvironmentRecord, n: string): ResidualFunctionBinding {\n    let residualFunctionBindings = this.declarativeEnvironmentRecordsBindings.get(r);\n    if (!residualFunctionBindings) {\n      residualFunctionBindings = new Map();\n      this.declarativeEnvironmentRecordsBindings.set(r, residualFunctionBindings);\n    }\n    let residualFunctionBinding = residualFunctionBindings.get(n);\n    if (!residualFunctionBinding) {\n      let realm = this.realm;\n      let binding = r.bindings[n];\n      invariant(!binding.deletable);\n      let value = (binding.initialized && binding.value) || realm.intrinsics.undefined;\n      residualFunctionBinding = { value, modified: false, declarativeEnvironmentRecord: r };\n      residualFunctionBindings.set(n, residualFunctionBinding);\n    }\n    invariant(residualFunctionBinding.value !== undefined);\n    residualFunctionBinding.value = this.visitEquivalentValue(residualFunctionBinding.value);\n    return residualFunctionBinding;\n  }\n\n  visitValueArray(val: ObjectValue): void {\n    this.visitObjectProperties(val);\n    const realm = this.realm;\n    let lenProperty = Get(realm, val, \"length\");\n    if (\n      lenProperty instanceof AbstractValue ||\n      ToLength(realm, lenProperty) !== getSuggestedArrayLiteralLength(realm, val)\n    ) {\n      this.visitValue(lenProperty);\n    }\n  }\n\n  visitValueMap(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined) continue;\n      this.visitValue(key);\n      this.visitValue(value);\n    }\n  }\n\n  visitValueSet(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined) continue;\n      this.visitValue(entry);\n    }\n  }\n\n  visitValueFunction(val: FunctionValue): void {\n    this.visitObjectProperties(val);\n\n    if (val instanceof BoundFunctionValue) {\n      this.visitValue(val.$BoundTargetFunction);\n      this.visitValue(val.$BoundThis);\n      for (let boundArg of val.$BoundArguments) this.visitValue(boundArg);\n      return;\n    }\n\n    invariant(!(val instanceof NativeFunctionValue), \"all native function values should be intrinsics\");\n\n    invariant(val instanceof ECMAScriptSourceFunctionValue);\n    invariant(val.constructor === ECMAScriptSourceFunctionValue);\n    let formalParameters = val.$FormalParameters;\n    invariant(formalParameters != null);\n    let code = val.$ECMAScriptCode;\n    invariant(code != null);\n\n    let functionInfo = this.functionInfos.get(code);\n\n    if (!functionInfo) {\n      functionInfo = {\n        unbound: new Set(),\n        modified: new Set(),\n        usesArguments: false,\n        usesThis: false,\n      };\n      this.functionInfos.set(code, functionInfo);\n\n      let state = {\n        tryQuery: this.logger.tryQuery.bind(this.logger),\n        val,\n        functionInfo,\n        realm: this.realm,\n      };\n\n      traverse(\n        t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])),\n        ClosureRefVisitor,\n        null,\n        state\n      );\n\n      if (val.isResidual && functionInfo.unbound.size) {\n        if (!val.isUnsafeResidual) {\n          this.logger.logError(\n            val,\n            `residual function ${describeLocation(this.realm, val, undefined, code.loc) ||\n              \"(unknown)\"} refers to the following identifiers defined outside of the local scope: ${Object.keys(\n              functionInfo.unbound\n            ).join(\", \")}`\n          );\n        }\n      }\n    }\n\n    let residualFunctionBindings = new Map();\n    this._withScope(val, () => {\n      invariant(functionInfo);\n      for (let innerName of functionInfo.unbound) {\n        let residualFunctionBinding;\n        let doesNotMatter = true;\n        let reference = this.logger.tryQuery(\n          () => Environment.ResolveBinding(this.realm, innerName, doesNotMatter, val.$Environment),\n          undefined,\n          false /* The only reason `ResolveBinding` might fail is because the global object is partial. But in that case, we know that we are dealing with the common scope. */\n        );\n        if (\n          reference === undefined ||\n          Environment.IsUnresolvableReference(this.realm, reference) ||\n          reference.base instanceof GlobalEnvironmentRecord\n        ) {\n          residualFunctionBinding = this.visitGlobalBinding(innerName);\n        } else {\n          invariant(!Environment.IsUnresolvableReference(this.realm, reference));\n          let referencedBase = reference.base;\n          let referencedName: string = (reference.referencedName: any);\n          if (typeof referencedName !== \"string\") {\n            throw new FatalError(\"TODO: do not know how to visit reference with symbol\");\n          }\n          invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n          residualFunctionBinding = this.visitDeclarativeEnvironmentRecordBinding(referencedBase, referencedName);\n        }\n        residualFunctionBindings.set(innerName, residualFunctionBinding);\n        if (functionInfo.modified.has(innerName)) residualFunctionBinding.modified = true;\n      }\n    });\n\n    this.functionInstances.set(val, {\n      residualFunctionBindings,\n      functionValue: val,\n      scopeInstances: new Set(),\n    });\n  }\n\n  visitValueObject(val: ObjectValue): void {\n    let kind = val.getKind();\n    this.visitObjectProperties(val, kind);\n\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      this.visitValue(constructor);\n      return;\n    }\n\n    switch (kind) {\n      case \"RegExp\":\n      case \"Number\":\n      case \"String\":\n      case \"Boolean\":\n      case \"ReactElement\":\n      case \"ArrayBuffer\":\n        return;\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        this.visitValue(dateValue);\n        return;\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n      case \"DataView\":\n        let buf = val.$ViewedArrayBuffer;\n        invariant(buf !== undefined);\n        this.visitValue(buf);\n        return;\n      case \"Map\":\n      case \"WeakMap\":\n        this.visitValueMap(val);\n        return;\n      case \"Set\":\n      case \"WeakSet\":\n        this.visitValueSet(val);\n        return;\n      default:\n        if (kind !== \"Object\") this.logger.logError(val, `Object of kind ${kind} is not supported in residual heap.`);\n        if (this.$ParameterMap !== undefined)\n          this.logger.logError(val, `Arguments object is not supported in residual heap.`);\n        return;\n    }\n  }\n\n  visitValueSymbol(val: SymbolValue): void {\n    if (val.$Description) this.visitValue(val.$Description);\n  }\n\n  visitValueProxy(val: ProxyValue): void {\n    this.visitValue(val.$ProxyTarget);\n    this.visitValue(val.$ProxyHandler);\n  }\n\n  visitAbstractValue(val: AbstractValue): void {\n    if (val.kind === \"sentinel member expression\")\n      this.logger.logError(val, \"expressions of type o[p] are not yet supported for partially known o and unknown p\");\n    for (let i = 0, n = val.args.length; i < n; i++) {\n      val.args[i] = this.visitEquivalentValue(val.args[i]);\n    }\n  }\n\n  _mark(val: Value): boolean {\n    let scopes = this.values.get(val);\n    if (scopes === undefined) this.values.set(val, (scopes = new Set()));\n    if (scopes.has(this.scope)) return false;\n    scopes.add(this.scope);\n    return true;\n  }\n\n  visitEquivalentValue<T: Value>(val: T): T {\n    if (val instanceof AbstractValue) {\n      let equivalentValue = this.equivalenceSet.add(val);\n      if (this._mark(equivalentValue)) this.visitAbstractValue(equivalentValue);\n      return (equivalentValue: any);\n    }\n    this.visitValue(val);\n    return val;\n  }\n\n  visitValue(val: Value): void {\n    invariant(!val.refuseSerialization);\n    if (val instanceof AbstractValue) {\n      if (this._mark(val)) this.visitAbstractValue(val);\n    } else if (val.isIntrinsic()) {\n      // All intrinsic values exist from the beginning of time...\n      // ...except for a few that come into existance as templates for abstract objects (TODO #882).\n      if (val.isTemplate) this._mark(val);\n      else\n        this._withScope(this.commonScope, () => {\n          this._mark(val);\n        });\n    } else if (val instanceof EmptyValue) {\n      this._mark(val);\n    } else if (ResidualHeapInspector.isLeaf(val)) {\n      this._mark(val);\n    } else if (IsArray(this.realm, val)) {\n      invariant(val instanceof ObjectValue);\n      if (this._mark(val)) this.visitValueArray(val);\n    } else if (val instanceof ProxyValue) {\n      if (this._mark(val)) this.visitValueProxy(val);\n    } else if (val instanceof FunctionValue) {\n      // Function declarations should get hoisted in common scope so that instances only get allocated once\n      this._withScope(this.commonScope, () => {\n        invariant(val instanceof FunctionValue);\n        if (this._mark(val)) this.visitValueFunction(val);\n      });\n    } else if (val instanceof SymbolValue) {\n      if (this._mark(val)) this.visitValueSymbol(val);\n    } else {\n      invariant(val instanceof ObjectValue);\n\n      // Prototypes are reachable via function declarations, and those get hoisted, so we need to move\n      // prototype initialization to the common scope code as well.\n      if (val.originalConstructor !== undefined) {\n        this._withScope(this.commonScope, () => {\n          invariant(val instanceof ObjectValue);\n          if (this._mark(val)) this.visitValueObject(val);\n        });\n      } else {\n        if (this._mark(val)) this.visitValueObject(val);\n      }\n    }\n  }\n\n  visitGlobalBinding(key: string): ResidualFunctionBinding {\n    let binding = this.globalBindings.get(key);\n    if (!binding) {\n      let value = this.realm.getGlobalLetBinding(key);\n      binding = ({ value, modified: true, declarativeEnvironmentRecord: null }: ResidualFunctionBinding);\n      this.globalBindings.set(key, binding);\n    }\n    if (binding.value) binding.value = this.visitEquivalentValue(binding.value);\n    return binding;\n  }\n\n  createGeneratorVisitCallbacks(generator: Generator, commonScope: Scope): VisitEntryCallbacks {\n    return {\n      visitValues: (values: Array<Value>) => {\n        for (let i = 0, n = values.length; i < n; i++) values[i] = this.visitEquivalentValue(values[i]);\n      },\n      visitGenerator: this.visitGenerator.bind(this),\n      canSkip: (value: AbstractValue): boolean => {\n        return !this.referencedDeclaredValues.has(value) && !this.values.has(value);\n      },\n      recordDeclaration: (value: AbstractValue) => {\n        this.referencedDeclaredValues.add(value);\n      },\n      recordDelayedEntry: (entry: GeneratorEntry) => {\n        this.delayedVisitGeneratorEntries.push({ commonScope, generator, entry });\n      },\n    };\n  }\n\n  visitGenerator(generator: Generator): void {\n    this._withScope(generator, () => {\n      generator.visit(this.createGeneratorVisitCallbacks(generator, this.commonScope));\n    });\n  }\n\n  visitAdditionalFunctionEffects() {\n    for (let [functionValue, effects] of this.additionalFunctionValuesAndEffects.entries()) {\n      let [\n        result,\n        generator,\n        modifiedBindings,\n        modifiedProperties: Map<PropertyBinding, void | Descriptor>,\n        createdObjects,\n      ] = effects;\n      // Need to do this fixup because otherwise we will skip over this function's\n      // generator in the _getTarget scope lookup\n      generator.parent = functionValue.parent;\n      functionValue.parent = generator;\n      // result -- ignore TODO: return the result from the function somehow\n      // Generator -- visit all entries\n      // Bindings -- (modifications to named variables) only need to serialize bindings if they're\n      //             captured by a residual function\n      //          -- need to apply them and maybe need to revisit functions in ancestors to make sure\n      //             we don't overwrite anything they capture\n      //          -- TODO: deal with these properly\n      // PropertyBindings -- (property modifications) visit any property bindings to pre-existing objects\n      // CreatedObjects -- should take care of itself\n      this.realm.applyEffects([\n        result,\n        new Generator(this.realm),\n        modifiedBindings,\n        modifiedProperties,\n        createdObjects,\n      ]);\n      // Allows us to emit function declarations etc. inside of this additional\n      // function instead of adding them at global scope\n      this.commonScope = functionValue;\n      let modifiedBindingInfo = new Map();\n      let visitPropertiesAndBindings = () => {\n        for (let propertyBinding of modifiedProperties.keys()) {\n          let binding: PropertyBinding = ((propertyBinding: any): PropertyBinding);\n          let object = binding.object;\n          if (object instanceof ObjectValue && createdObjects.has(object)) continue; // Created Object's binding\n          if (object.refuseSerialization) continue; // modification to internal state\n          if (object.intrinsicName === \"global\") continue; // Avoid double-counting\n          this.visitObjectProperty(binding);\n        }\n        // Handing of ModifiedBindings\n        for (let additionalBinding of modifiedBindings.keys()) {\n          //let modifiedBinding: Binding = ((additionalBinding: any): Binding);\n          let modifiedBinding = additionalBinding;\n          let residualBinding;\n          if (modifiedBinding.isGlobal) {\n            residualBinding = this.globalBindings.get(modifiedBinding.name);\n          } else {\n            let containingEnv = modifiedBinding.environment;\n            invariant(containingEnv instanceof DeclarativeEnvironmentRecord);\n            let bindMap = this.declarativeEnvironmentRecordsBindings.get(containingEnv);\n            if (bindMap) residualBinding = bindMap.get(modifiedBinding.name);\n          }\n          // Only visit it if there is already a binding (no binding means that\n          // the additional function created the binding)\n          if (residualBinding && modifiedBinding.value !== residualBinding.value) {\n            let newValue = modifiedBinding.value;\n            invariant(newValue);\n            this.visitValue(newValue);\n            residualBinding.modified = true;\n            // This should be enforced by checkThatFunctionsAreIndependent\n            invariant(\n              !residualBinding.additionalFunctionOverridesValue,\n              \"We should only have one additional function value modifying any given residual binding\"\n            );\n            residualBinding.additionalFunctionOverridesValue = true;\n            modifiedBindingInfo.set(modifiedBinding, residualBinding);\n          }\n        }\n        invariant(result instanceof Value);\n        this.visitValue(result);\n      };\n      invariant(functionValue instanceof ECMAScriptSourceFunctionValue);\n      let code = functionValue.$ECMAScriptCode;\n      invariant(code != null);\n      let functionInfo = this.functionInfos.get(code);\n      invariant(functionInfo);\n      let funcInstance = this.functionInstances.get(functionValue);\n      invariant(funcInstance);\n      this.additionalFunctionValueInfos.set(functionValue, {\n        functionValue,\n        captures: functionInfo.unbound,\n        modifiedBindings: modifiedBindingInfo,\n        instance: funcInstance,\n      });\n      this.visitGenerator(generator);\n      this._withScope(generator, visitPropertiesAndBindings);\n      this.realm.restoreBindings(modifiedBindings);\n      this.realm.restoreProperties(modifiedProperties);\n    }\n    // Do a fixpoint over all pure generator entries to make sure that we visit\n    // arguments of only BodyEntries that are required by some other residual value\n    let oldDelayedEntries = [];\n    while (oldDelayedEntries.length !== this.delayedVisitGeneratorEntries.length) {\n      oldDelayedEntries = this.delayedVisitGeneratorEntries;\n      this.delayedVisitGeneratorEntries = [];\n      for (let { commonScope, generator: entryGenerator, entry } of oldDelayedEntries) {\n        this.commonScope = commonScope;\n        this._withScope(entryGenerator, () => {\n          entryGenerator.visitEntry(entry, this.createGeneratorVisitCallbacks(entryGenerator, commonScope));\n        });\n      }\n    }\n    return this.realm.intrinsics.undefined;\n  }\n\n  visitRoots(): void {\n    let generator = this.realm.generator;\n    invariant(generator);\n    this.visitGenerator(generator);\n    for (let moduleValue of this.modules.initializedModules.values()) this.visitValue(moduleValue);\n    this.realm.evaluateAndRevertInGlobalEnv(this.visitAdditionalFunctionEffects.bind(this));\n  }\n}\n"]}