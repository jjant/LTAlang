{"version":3,"sources":["../../src/serializer/ResidualHeapInspector.js"],"names":["ResidualHeapInspector","realm","logger","ignoredProperties","Map","val","key","set","get","_getIgnoredProperties","has","Set","properties","propertyBinding","desc","descriptor","undefined","_canIgnoreProperty","add","writable","enumerable","configurable","value","logError","hasDefaultLength","isCompatibleWith","MOBILE_JSC_VERSION","__originalName","$Strict","$FunctionKind","originalConstructor","kind","getKind","v","prototype","symbols","size","$Prototype","intrinsics","ObjectPrototype","getExtensible","foundConstructor","keys","name","getPropertyValue","hasIdentifier","isIntrinsic","prototypeBinding","prototypeDesc"],"mappings":"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","file":"ResidualHeapInspector.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { IsArray } from \"../methods/index.js\";\nimport {\n  SymbolValue,\n  AbstractValue,\n  FunctionValue,\n  ECMAScriptSourceFunctionValue,\n  NumberValue,\n  Value,\n  ObjectValue,\n  PrimitiveValue,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { Logger } from \"./logger.js\";\n\nexport class ResidualHeapInspector {\n  constructor(realm: Realm, logger: Logger) {\n    this.realm = realm;\n    this.logger = logger;\n    this.ignoredProperties = new Map();\n  }\n\n  realm: Realm;\n  logger: Logger;\n  ignoredProperties: Map<ObjectValue, Set<string>>;\n\n  static isLeaf(val: Value): boolean {\n    if (val instanceof SymbolValue) {\n      return false;\n    }\n\n    if (val instanceof AbstractValue && val.hasIdentifier()) {\n      return true;\n    }\n\n    if (val.isIntrinsic()) {\n      return false;\n    }\n\n    return val instanceof PrimitiveValue;\n  }\n\n  // Object properties which have the default value can be ignored by the serializer.\n  canIgnoreProperty(val: ObjectValue, key: string) {\n    let set = this.ignoredProperties.get(val);\n    if (!set) {\n      this.ignoredProperties.set(val, (set = this._getIgnoredProperties(val)));\n    }\n    return set.has(key);\n  }\n\n  _getIgnoredProperties(val: ObjectValue) {\n    let set: Set<string> = new Set();\n    for (let [key, propertyBinding] of val.properties) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      if (this._canIgnoreProperty(val, key, desc)) set.add(key);\n    }\n    return set;\n  }\n\n  _canIgnoreProperty(val: ObjectValue, key: string, desc: Descriptor) {\n    if (IsArray(this.realm, val)) {\n      if (key === \"length\" && desc.writable && !desc.enumerable && !desc.configurable) {\n        // length property has the correct descriptor values\n        return true;\n      }\n    } else if (val instanceof FunctionValue) {\n      if (key === \"length\") {\n        if (desc.value === undefined) {\n          this.logger.logError(val, \"Functions with length accessor properties are not supported in residual heap.\");\n          // Rationale: .bind() would call the accessor, which might throw, mutate state, or do whatever...\n        }\n        // length property will be inferred already by the amount of parameters\n        return !desc.writable && !desc.enumerable && desc.configurable && val.hasDefaultLength();\n      }\n\n      if (key === \"name\") {\n        // TODO #474: Make sure that we retain original function names. Or set name property.\n        // Or ensure that nothing references the name property.\n        // NOTE: with some old runtimes notably JSC, function names are not configurable\n        // For now don't ignore the property if it is different from the function name.\n        // I.e. if it was set explicitly in the code, retain it.\n        if (\n          desc.value !== undefined &&\n          !this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) &&\n          (desc.value instanceof AbstractValue ||\n            (val.__originalName && val.__originalName !== \"\" && desc.value.value !== val.__originalName))\n        )\n          return false;\n        return true;\n      }\n\n      // Properties `caller` and `arguments` are added to normal functions in non-strict mode to prevent TypeErrors.\n      // Because they are autogenerated, they should be ignored.\n      if (key === \"arguments\" || key === \"caller\") {\n        invariant(val instanceof ECMAScriptSourceFunctionValue);\n        if (\n          !val.$Strict &&\n          desc.writable &&\n          !desc.enumerable &&\n          desc.configurable &&\n          desc.value instanceof UndefinedValue &&\n          val.$FunctionKind === \"normal\"\n        )\n          return true;\n      }\n\n      // ignore the `prototype` property when it's the right one\n      if (key === \"prototype\") {\n        if (\n          !desc.configurable &&\n          !desc.enumerable &&\n          desc.writable &&\n          desc.value instanceof ObjectValue &&\n          desc.value.originalConstructor === val\n        ) {\n          return true;\n        }\n      }\n    } else {\n      let kind = val.getKind();\n      switch (kind) {\n        case \"RegExp\":\n          if (key === \"lastIndex\" && desc.writable && !desc.enumerable && !desc.configurable) {\n            // length property has the correct descriptor values\n            let v = desc.value;\n            return v instanceof NumberValue && v.value === 0;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (key === \"constructor\") {\n      if (desc.configurable && !desc.enumerable && desc.writable && desc.value === val.originalConstructor) return true;\n    }\n\n    return false;\n  }\n\n  static getPropertyValue(val: ObjectValue, name: string): void | Value {\n    let prototypeBinding = val.properties.get(name);\n    if (prototypeBinding === undefined) return undefined;\n    let prototypeDesc = prototypeBinding.descriptor;\n    if (prototypeDesc === undefined) return undefined;\n    invariant(prototypeDesc.value === undefined || prototypeDesc.value instanceof Value);\n    return prototypeDesc.value;\n  }\n\n  isDefaultPrototype(prototype: ObjectValue): boolean {\n    if (\n      prototype.symbols.size !== 0 ||\n      prototype.$Prototype !== this.realm.intrinsics.ObjectPrototype ||\n      !prototype.getExtensible()\n    )\n      return false;\n    let foundConstructor = false;\n    for (let name of prototype.properties.keys())\n      if (\n        name === \"constructor\" &&\n        ResidualHeapInspector.getPropertyValue(prototype, name) === prototype.originalConstructor\n      )\n        foundConstructor = true;\n      else return false;\n    return foundConstructor;\n  }\n}\n"]}