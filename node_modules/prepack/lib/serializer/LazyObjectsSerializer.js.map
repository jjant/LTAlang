{"version":3,"sources":["../../src/serializer/LazyObjectsSerializer.js"],"names":["t","LAZY_OBJECTS_SERIALIZER_BODY_TYPE","LazyObjectsSerializer","realm","logger","modules","residualHeapValueIdentifiers","residualHeapInspector","residualValues","residualFunctionInstances","residualFunctionInfos","options","referencedDeclaredValues","additionalFunctionValuesAndEffects","additionalFunctionValueInfos","statistics","react","_lazyObjectIdSeed","_valueLazyIds","Map","_lazyObjectInitializers","_callbackLazyObjectParam","identifier","_options","lazyObjectsRuntime","_lazyObjectJSRuntimeName","_initializationCallbackName","obj","prevLazyObject","_currentSerializeLazyObject","initializerBody","type","entries","oldBody","emitter","beginEmitting","_emitObjectProperties","endEmitting","initializer","caseBody","concat","breakStatement","lazyId","_getValueLazyId","switchCase","numericLiteral","body","switchCases","push","_serializeLazyObjectInitializerSwitchCase","throwStatement","newExpression","stringLiteral","selector","switchStatement","params","initializerCallbackFunction","functionExpression","blockStatement","variableDeclaration","variableDeclarator","expressionStatement","callExpression","memberExpression","val","getBody","set","_serializeLazyObjectInitializer","_serializeCreateLazyObject","size","prelude","_serializeInitializationCallback","_serializeRegisterInitializationCallback"],"mappings":";;;;;;;;;;;;;AAWA;;AACA;;AACA;;IAAYA,C;;AAgBZ;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;+eAtCA;;;;;;;;;AAwCA,IAAMC,oCAAoC,uBAA1C;;AAEA;;;;;;;;;;;IAUaC,qB,WAAAA,qB;;;AACX,iCACEC,KADF,EAEEC,MAFF,EAGEC,OAHF,EAIEC,4BAJF,EAKEC,qBALF,EAMEC,cANF,EAOEC,yBAPF,EAQEC,qBARF,EASEC,OATF,EAUEC,wBAVF,EAWEC,kCAXF,EAYEC,4BAZF,EAaEC,UAbF,EAcEC,KAdF,EAeE;AAAA;;AAAA,8IAEEb,KAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,4BALF,EAMEC,qBANF,EAOEC,cAPF,EAQEC,yBARF,EASEC,qBATF,EAUEC,OAVF,EAWEC,wBAXF,EAYEC,kCAZF,EAaEC,4BAbF,EAcEC,UAdF,EAeEC,KAfF;;AAiBA,UAAKC,iBAAL,GAAyB,CAAzB;AACA,UAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA,UAAKC,uBAAL,GAA+B,IAAID,GAAJ,EAA/B;AACA,UAAKE,wBAAL,GAAgCrB,EAAEsB,UAAF,CAAa,KAAb,CAAhC;AACA,6BAAU,MAAKC,QAAL,CAAcC,kBAAd,IAAoC,IAA9C;AACA,UAAKC,wBAAL,GAAgCzB,EAAEsB,UAAF,CAAa,MAAKC,QAAL,CAAcC,kBAA3B,CAAhC;AACA,UAAKE,2BAAL,GAAmC1B,EAAEsB,UAAF,CAAa,uBAAb,CAAnC;AAvBA;AAwBD;AAID;AACA;;;;;oCAQgBK,G,EAA0B;AAAA;;AACxC,aAAO,yBAAa,KAAKT,aAAlB,EAAiCS,GAAjC,EAAsC;AAAA,eAAM,OAAKV,iBAAL,EAAN;AAAA,OAAtC,CAAP;AACD;;AAED;;;;oDACgCU,G,EAAkC;AAChE,UAAMC,iBAAiB,KAAKC,2BAA5B;AACA,WAAKA,2BAAL,GAAmCF,GAAnC;AACA,UAAMG,kBAAkB,EAAEC,MAAM9B,iCAAR,EAA2C+B,SAAS,EAApD,EAAxB;AACA,UAAIC,UAAU,KAAKC,OAAL,CAAaC,aAAb,CAA2BlC,iCAA3B,EAA8D6B,eAA9D,CAAd;AACA,WAAKM,qBAAL,CAA2BT,GAA3B;AACA,WAAKO,OAAL,CAAaG,WAAb,CAAyBpC,iCAAzB,EAA4DgC,OAA5D;AACA,WAAKJ,2BAAL,GAAmCD,cAAnC;AACA,aAAOE,eAAP;AACD;;;8DAEyCH,G,EAAkBW,W,EAAkD;AAC5G;AACA,UAAMC,WAAWD,YAAYN,OAAZ,CAAoBQ,MAApB,CAA2BxC,EAAEyC,cAAF,EAA3B,CAAjB;AACA,UAAMC,SAAS,KAAKC,eAAL,CAAqBhB,GAArB,CAAf;AACA,aAAO3B,EAAE4C,UAAF,CAAa5C,EAAE6C,cAAF,CAAiBH,MAAjB,CAAb,EAAuCH,QAAvC,CAAP;AACD;;;uDAEsD;AACrD,UAAMO,OAAO,EAAb;;AAEA,UAAMC,cAAc,EAApB;AAHqD;AAAA;AAAA;;AAAA;AAIrD,6BAAiC,KAAK3B,uBAAtC,8HAA+D;AAAA;;AAAA;;AAAA,cAAnDO,GAAmD;AAAA,cAA9CW,WAA8C;;AAC7DS,sBAAYC,IAAZ,CAAiB,KAAKC,yCAAL,CAA+CtB,GAA/C,EAAoDW,WAApD,CAAjB;AACD;AACD;AAPqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQrDS,kBAAYC,IAAZ,CACEhD,EAAE4C,UAAF,CAAa,IAAb,EAAmB,CACjB5C,EAAEkD,cAAF,CAAiBlD,EAAEmD,aAAF,CAAgBnD,EAAEsB,UAAF,CAAa,OAAb,CAAhB,EAAuC,CAACtB,EAAEoD,aAAF,CAAgB,iBAAhB,CAAD,CAAvC,CAAjB,CADiB,CAAnB,CADF;;AAMA,UAAMC,WAAWrD,EAAEsB,UAAF,CAAa,IAAb,CAAjB;AACAwB,WAAKE,IAAL,CAAUhD,EAAEsD,eAAF,CAAkBD,QAAlB,EAA4BN,WAA5B,CAAV;;AAEA,UAAMQ,SAAS,CAAC,KAAKlC,wBAAN,EAAgCgC,QAAhC,CAAf;AACA,UAAMG,8BAA8BxD,EAAEyD,kBAAF,CAAqB,IAArB,EAA2BF,MAA3B,EAAmCvD,EAAE0D,cAAF,CAAiBZ,IAAjB,CAAnC,CAApC;AACA;AACA,aAAO9C,EAAE2D,mBAAF,CAAsB,KAAtB,EAA6B,CAClC3D,EAAE4D,kBAAF,CAAqB,KAAKlC,2BAA1B,EAAuD8B,2BAAvD,CADkC,CAA7B,CAAP;AAGD;;;+DAE8D;AAC7D,aAAOxD,EAAE6D,mBAAF,CACL7D,EAAE8D,cAAF,CAAiB9D,EAAE+D,gBAAF,CAAmB,KAAKtC,wBAAxB,EAAkDzB,EAAEsB,UAAF,CAAa,0BAAb,CAAlD,CAAjB,EAA8G,CAC5G,KAAKI,2BADuG,CAA9G,CADK,CAAP;AAKD;;;+CAE0BC,G,EAAuC;AAChE,UAAMe,SAAS,KAAKC,eAAL,CAAqBhB,GAArB,CAAf;AACA,aAAO3B,EAAE8D,cAAF,CACL9D,EAAE+D,gBAAF,CAAmB,KAAKtC,wBAAxB,EAAkDzB,EAAEsB,UAAF,CAAa,kBAAb,CAAlD,EAAoF,YAAa,KAAjG,CADK,EAEL,CAACtB,EAAE6C,cAAF,CAAiBH,MAAjB,CAAD,CAFK,CAAP;AAID;;AAED;AACA;AACA;;;;iDAC6BsB,G,EAAiC;AAC5D,aAAO,KAAK9B,OAAL,CAAa+B,OAAb,GAAuBlC,IAAvB,KAAgC9B,iCAAhC,IAAqE,KAAK4B,2BAAL,KAAqCmC,GAA1G,GACH,KAAK3C,wBADF,8JAEgC2C,GAFhC,CAAP;AAGD;;AAED;AACA;AACA;;;;yDACqCA,G,EAAwC;AAC3E,aAAO,KAAK9B,OAAL,CAAa+B,OAAb,GAAuBlC,IAAvB,KAAgC9B,iCAAhC,IAAqE,KAAK4B,2BAAL,KAAqCmC,GAA1G,GACH,KAAK3C,wBADF,sKAEwC2C,GAFxC,CAAP;AAGD;;AAED;;;;4CACwBrC,G,EAAuC;AAC7D,WAAKP,uBAAL,CAA6B8C,GAA7B,CAAiCvC,GAAjC,EAAsC,KAAKwC,+BAAL,CAAqCxC,GAArC,CAAtC;AACA,aAAO,KAAKyC,0BAAL,CAAgCzC,GAAhC,CAAP;AACD;;AAED;AACA;;;;iDACmC;AACjC,UAAI,KAAKP,uBAAL,CAA6BiD,IAA7B,GAAoC,CAAxC,EAA2C;AACzC;AACA,aAAKC,OAAL,CAAatB,IAAb,CAAkB,KAAKuB,gCAAL,EAAlB;AACA,aAAKD,OAAL,CAAatB,IAAb,CAAkB,KAAKwB,wCAAL,EAAlB;AACD;AACF","file":"LazyObjectsSerializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport { AbstractValue, FunctionValue, Value, ObjectValue } from \"../values/index.js\";\nimport * as t from \"babel-types\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeStatement,\n  BabelNodeIdentifier,\n  BabelNodeBlockStatement,\n  BabelNodeSwitchCase,\n} from \"babel-types\";\nimport type {\n  SerializedBody,\n  FunctionInfo,\n  FunctionInstance,\n  AdditionalFunctionInfo,\n  ReactSerializerState,\n} from \"./types.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport invariant from \"../invariant.js\";\nimport { SerializerStatistics } from \"./types.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport type { Scope } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport type { Effects } from \"../realm.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { getOrDefault } from \"./utils.js\";\n\nconst LAZY_OBJECTS_SERIALIZER_BODY_TYPE = \"LazyObjectInitializer\";\n\n/**\n * Serialize objects in lazy mode by leveraging the JS runtime that support this feature.\n * Objects are serialized into two parts:\n * 1. All lazy objects are created via lightweight LazyObjectsRuntime.createLazyObject() call.\n * 2. Lazy objects' property assignments are delayed in a callback function which is registered with the runtime.\n *    lazy objects rutnime will execute this callback to hydrate the lazy objects.\n *\n * Currently only the raw objects are taking part in the lazy objects feature.\n * TODO: suppor for other objects, like array, regex etc...\n */\nexport class LazyObjectsSerializer extends ResidualHeapSerializer {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    residualHeapValueIdentifiers: ResidualHeapValueIdentifiers,\n    residualHeapInspector: ResidualHeapInspector,\n    residualValues: Map<Value, Set<Scope>>,\n    residualFunctionInstances: Map<FunctionValue, FunctionInstance>,\n    residualFunctionInfos: Map<BabelNodeBlockStatement, FunctionInfo>,\n    options: SerializerOptions,\n    referencedDeclaredValues: Set<AbstractValue>,\n    additionalFunctionValuesAndEffects: Map<FunctionValue, Effects> | void,\n    additionalFunctionValueInfos: Map<FunctionValue, AdditionalFunctionInfo>,\n    statistics: SerializerStatistics,\n    react: ReactSerializerState\n  ) {\n    super(\n      realm,\n      logger,\n      modules,\n      residualHeapValueIdentifiers,\n      residualHeapInspector,\n      residualValues,\n      residualFunctionInstances,\n      residualFunctionInfos,\n      options,\n      referencedDeclaredValues,\n      additionalFunctionValuesAndEffects,\n      additionalFunctionValueInfos,\n      statistics,\n      react\n    );\n    this._lazyObjectIdSeed = 1;\n    this._valueLazyIds = new Map();\n    this._lazyObjectInitializers = new Map();\n    this._callbackLazyObjectParam = t.identifier(\"obj\");\n    invariant(this._options.lazyObjectsRuntime != null);\n    this._lazyObjectJSRuntimeName = t.identifier(this._options.lazyObjectsRuntime);\n    this._initializationCallbackName = t.identifier(\"__initializerCallback\");\n  }\n\n  _lazyObjectIdSeed: number;\n  _valueLazyIds: Map<ObjectValue, number>;\n  // Holds object's lazy initializer bodies.\n  // These bodies will be combined into a well-known callback after generator serialization is done and registered with the runtime.\n  _lazyObjectInitializers: Map<ObjectValue, SerializedBody>;\n  _currentSerializeLazyObject: void | ObjectValue;\n\n  _lazyObjectJSRuntimeName: BabelNodeIdentifier;\n  _callbackLazyObjectParam: BabelNodeIdentifier;\n  _initializationCallbackName: BabelNodeIdentifier;\n\n  _getValueLazyId(obj: ObjectValue): number {\n    return getOrDefault(this._valueLazyIds, obj, () => this._lazyObjectIdSeed++);\n  }\n\n  // TODO: change to use _getTarget() to get the lazy objects initializer body.\n  _serializeLazyObjectInitializer(obj: ObjectValue): SerializedBody {\n    const prevLazyObject = this._currentSerializeLazyObject;\n    this._currentSerializeLazyObject = obj;\n    const initializerBody = { type: LAZY_OBJECTS_SERIALIZER_BODY_TYPE, entries: [] };\n    let oldBody = this.emitter.beginEmitting(LAZY_OBJECTS_SERIALIZER_BODY_TYPE, initializerBody);\n    this._emitObjectProperties(obj);\n    this.emitter.endEmitting(LAZY_OBJECTS_SERIALIZER_BODY_TYPE, oldBody);\n    this._currentSerializeLazyObject = prevLazyObject;\n    return initializerBody;\n  }\n\n  _serializeLazyObjectInitializerSwitchCase(obj: ObjectValue, initializer: SerializedBody): BabelNodeSwitchCase {\n    // TODO: only serialize this switch case if the initializer(property assignment) is not empty.\n    const caseBody = initializer.entries.concat(t.breakStatement());\n    const lazyId = this._getValueLazyId(obj);\n    return t.switchCase(t.numericLiteral(lazyId), caseBody);\n  }\n\n  _serializeInitializationCallback(): BabelNodeStatement {\n    const body = [];\n\n    const switchCases = [];\n    for (const [obj, initializer] of this._lazyObjectInitializers) {\n      switchCases.push(this._serializeLazyObjectInitializerSwitchCase(obj, initializer));\n    }\n    // Default case.\n    switchCases.push(\n      t.switchCase(null, [\n        t.throwStatement(t.newExpression(t.identifier(\"Error\"), [t.stringLiteral(\"Unknown lazy id\")])),\n      ])\n    );\n\n    const selector = t.identifier(\"id\");\n    body.push(t.switchStatement(selector, switchCases));\n\n    const params = [this._callbackLazyObjectParam, selector];\n    const initializerCallbackFunction = t.functionExpression(null, params, t.blockStatement(body));\n    // TODO: use NameGenerator.\n    return t.variableDeclaration(\"var\", [\n      t.variableDeclarator(this._initializationCallbackName, initializerCallbackFunction),\n    ]);\n  }\n\n  _serializeRegisterInitializationCallback(): BabelNodeStatement {\n    return t.expressionStatement(\n      t.callExpression(t.memberExpression(this._lazyObjectJSRuntimeName, t.identifier(\"setLazyObjectInitializer\")), [\n        this._initializationCallbackName,\n      ])\n    );\n  }\n\n  _serializeCreateLazyObject(obj: ObjectValue): BabelNodeExpression {\n    const lazyId = this._getValueLazyId(obj);\n    return t.callExpression(\n      t.memberExpression(this._lazyObjectJSRuntimeName, t.identifier(\"createLazyObject\"), /*computed*/ false),\n      [t.numericLiteral(lazyId)]\n    );\n  }\n\n  // Override default behavior.\n  // Inside lazy objects callback, the lazy object identifier needs to be replaced with the\n  // parameter passed from the runtime.\n  getSerializeObjectIdentifier(val: Value): BabelNodeIdentifier {\n    return this.emitter.getBody().type === LAZY_OBJECTS_SERIALIZER_BODY_TYPE && this._currentSerializeLazyObject === val\n      ? this._callbackLazyObjectParam\n      : super.getSerializeObjectIdentifier(val);\n  }\n\n  // Override default behavior.\n  // Inside lazy objects callback, the lazy object identifier needs to be replaced with the\n  // parameter passed from the runtime.\n  getSerializeObjectIdentifierOptional(val: Value): void | BabelNodeIdentifier {\n    return this.emitter.getBody().type === LAZY_OBJECTS_SERIALIZER_BODY_TYPE && this._currentSerializeLazyObject === val\n      ? this._callbackLazyObjectParam\n      : super.getSerializeObjectIdentifierOptional(val);\n  }\n\n  // Override default serializer with lazy mode.\n  serializeValueRawObject(obj: ObjectValue): BabelNodeExpression {\n    this._lazyObjectInitializers.set(obj, this._serializeLazyObjectInitializer(obj));\n    return this._serializeCreateLazyObject(obj);\n  }\n\n  // Override.\n  // Serialize the initialization callback and its registration in prelude if there are object being lazied.\n  postGeneratorSerialization(): void {\n    if (this._lazyObjectInitializers.size > 0) {\n      // Insert initialization callback at the end of prelude code.\n      this.prelude.push(this._serializeInitializationCallback());\n      this.prelude.push(this._serializeRegisterInitializationCallback());\n    }\n  }\n}\n"]}