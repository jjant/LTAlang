{"version":3,"sources":["../src/construct_realm.js"],"names":["opts","debugChannel","undefined","r","debuggerIsAttached","debuggerInstance","i","intrinsics","$GlobalObject","ObjectPrototype","name","evaluators","partialEvaluators","simplifyAndRefineAbstractValue","bind","simplifyAndRefineAbstractCondition","$GlobalEnv","NewGlobalEnvironment"],"mappings":";;;;;;kBAwBe,YAAwF;AAAA,MAA/EA,IAA+E,uEAA1D,EAA0D;AAAA,MAAtDC,YAAsD,uEAAlBC,SAAkB;;AACrG;AACA,MAAIC,IAAI,iBAAUH,IAAV,CAAR;AACA,MAAIC,YAAJ,EAAkB;AAChB,QAAIA,aAAaG,kBAAb,EAAJ,EAAuC;AACrCD,QAAEE,gBAAF,GAAqB,0BAAgBJ,YAAhB,EAA8BE,CAA9B,CAArB;AACD;AACF;;AAED,MAAIG,IAAIH,EAAEI,UAAV;AACA,yBAAqBD,CAArB,EAAwBH,CAAxB;AACA;AACA;AACAA,IAAEK,aAAF,GAAkB,wBAAgBL,CAAhB,EAAmBG,EAAEG,eAArB,EAAsC,QAAtC,CAAlB;AACA,wBAAiBN,CAAjB;AACA,OAAK,IAAIO,IAAT,IAAiBC,UAAjB;AAA6BR,MAAEQ,UAAF,CAAaD,IAAb,IAAqBC,WAAWD,IAAX,CAArB;AAA7B,GACA,KAAK,IAAIA,KAAT,IAAiBE,iBAAjB;AAAoCT,MAAES,iBAAF,CAAoBF,KAApB,IAA4BE,kBAAkBF,KAAlB,CAA5B;AAApC,GACAP,EAAEU,8BAAF,GAAmC,qBAA+BC,IAA/B,CAAoC,IAApC,EAA0CX,CAA1C,EAA6C,KAA7C,CAAnC;AACAA,IAAEY,kCAAF,GAAuC,qBAA+BD,IAA/B,CAAoC,IAApC,EAA0CX,CAA1C,EAA6C,IAA7C,CAAvC;AACAA,IAAEa,UAAF,GAAe,wBAAYC,oBAAZ,CAAiCd,CAAjC,EAAoCA,EAAEK,aAAtC,EAAqDL,EAAEK,aAAvD,CAAf;AACA,SAAOL,CAAP;AACD,C;;AAlCD;;AACA;;;;AACA;;AACA;;;;AAEA;;IAAYQ,U;;AACZ;;IAAYC,iB;;AACZ;;AACA;;AACA;;AAEA","file":"construct_realm.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"./realm.js\";\nimport initializeSingletons from \"./initialize-singletons.js\";\nimport { initialize as initializeIntrinsics } from \"./intrinsics/index.js\";\nimport initializeGlobal from \"./intrinsics/ecma262/global.js\";\nimport type { RealmOptions } from \"./options.js\";\nimport * as evaluators from \"./evaluators/index.js\";\nimport * as partialEvaluators from \"./partial-evaluators/index.js\";\nimport { Environment } from \"./singletons.js\";\nimport { ObjectValue } from \"./values/index.js\";\nimport { DebugServer } from \"./debugger/Debugger.js\";\nimport type { DebugChannel } from \"./debugger/channel/DebugChannel.js\";\nimport simplifyAndRefineAbstractValue from \"./utils/simplifier.js\";\n\nexport default function(opts: RealmOptions = {}, debugChannel: void | DebugChannel = undefined): Realm {\n  initializeSingletons();\n  let r = new Realm(opts);\n  if (debugChannel) {\n    if (debugChannel.debuggerIsAttached()) {\n      r.debuggerInstance = new DebugServer(debugChannel, r);\n    }\n  }\n\n  let i = r.intrinsics;\n  initializeIntrinsics(i, r);\n  // TODO: Find a way to let different environments initialize their own global\n  // object for special magic host objects such as the window object in the DOM.\n  r.$GlobalObject = new ObjectValue(r, i.ObjectPrototype, \"global\");\n  initializeGlobal(r);\n  for (let name in evaluators) r.evaluators[name] = evaluators[name];\n  for (let name in partialEvaluators) r.partialEvaluators[name] = partialEvaluators[name];\n  r.simplifyAndRefineAbstractValue = simplifyAndRefineAbstractValue.bind(null, r, false);\n  r.simplifyAndRefineAbstractCondition = simplifyAndRefineAbstractValue.bind(null, r, true);\n  r.$GlobalEnv = Environment.NewGlobalEnvironment(r, r.$GlobalObject, r.$GlobalObject);\n  return r;\n}\n"]}