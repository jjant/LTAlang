{"version":3,"sources":["../scripts/instrumentor.js"],"names":["t","fs","require","createLogStatement","loc","expressionStatement","callExpression","memberExpression","identifier","stringLiteral","start","line","instrument","inputFilename","outputFilename","code","readFileSync","ast","sourceType","node","type","body","unshift","writeFileSync","console","log","args","Array","from","process","argv","splice","length","arg","shift","startsWith","error","exit"],"mappings":";;AAWA;;IAAYA,C;;AACZ;;;;AACA;;;;AACA;;;;;;AAdA;;;;;;;;;AAeA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;;;AAGA,SAASC,kBAAT,CAA4BC,GAA5B,EAA0D;AACxD,SAAOJ,EAAEK,mBAAF,CACLL,EAAEM,cAAF,CAAiBN,EAAEO,gBAAF,CAAmBP,EAAEQ,UAAF,CAAa,SAAb,CAAnB,EAA4CR,EAAEQ,UAAF,CAAa,KAAb,CAA5C,CAAjB,EAAmF,CACjFR,EAAES,aAAF,yBAAsCL,IAAIM,KAAJ,CAAUC,IAAhD,CADiF,CAAnF,CADK,CAAP;AAKD;;AAED,SAASC,UAAT,CAAoBC,aAApB,EAA2CC,cAA3C,EAAmE;AACjE,MAAIC,OAAOd,GAAGe,YAAH,CAAgBH,aAAhB,EAA+B,MAA/B,CAAX;AACA,MAAII,MAAM,oBAAMF,IAAN,EAAY,EAAEF,4BAAF,EAAiBK,YAAY,QAA7B,EAAZ,CAAV;AACA,8BAAaD,GAAb,EAAkB,UAASE,IAAT,EAAe;AAC/B,QAAIA,KAAKC,IAAL,KAAc,gBAAlB,EAAoC;AAClC,UAAID,KAAKf,GAAT,EAAgBe,IAAF,CAAuCE,IAAvC,CAA4CC,OAA5C,CAAoDnB,mBAAmBgB,KAAKf,GAAxB,CAApD;AACf;AACD,WAAO,KAAP;AACD,GALD;AAMAW,SAAO,8BAASE,GAAT,EAAc,EAAd,EAAkB,EAAlB,EAAsBF,IAA7B;AACA,MAAI,CAACD,cAAL,EAAqBA,iBAAiBD,gBAAgB,kBAAjC;AACrBZ,KAAGsB,aAAH,CAAiBT,cAAjB,EAAiCC,IAAjC;AACAS,UAAQC,GAAR,0CAAmDX,cAAnD;AACD;;AAED,IAAIY,OAAOC,MAAMC,IAAN,CAAWC,QAAQC,IAAnB,CAAX;AACAJ,KAAKK,MAAL,CAAY,CAAZ,EAAe,CAAf;AACA,IAAIlB,sBAAJ;AACA,IAAIC,uBAAJ;AACA,OAAOY,KAAKM,MAAZ,EAAoB;AAClB,MAAIC,MAAMP,KAAK,CAAL,CAAV;AACAA,OAAKQ,KAAL;AACA,MAAID,QAAQ,OAAZ,EAAqB;AACnBA,UAAMP,KAAK,CAAL,CAAN;AACAA,SAAKQ,KAAL;AACApB,qBAAiBmB,GAAjB;AACD,GAJD,MAIO,IAAIA,QAAQ,QAAZ,EAAsB;AAC3BT,YAAQC,GAAR,CAAY,8DAAZ;AACD,GAFM,MAEA,IAAI,CAACQ,IAAIE,UAAJ,CAAe,IAAf,CAAL,EAA2B;AAChCtB,oBAAgBoB,GAAhB;AACD,GAFM,MAEA;AACLT,YAAQY,KAAR,sBAAiCH,GAAjC;AACAJ,YAAQQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,IAAI,CAACxB,aAAL,EAAoB;AAClBW,UAAQY,KAAR,CAAc,qBAAd;AACAP,UAAQQ,IAAR,CAAa,CAAb;AACD,CAHD,MAGO,IAAI,CAACvB,cAAL,EAAqB;AAC1BU,UAAQY,KAAR,CAAc,sBAAd;AACAP,UAAQQ,IAAR,CAAa,CAAb;AACD,CAHM,MAGA;AACLzB,aAAWC,aAAX,EAA0BC,cAA1B;AACD","file":"instrumentor.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport * as t from \"babel-types\";\nimport generate from \"babel-generator\";\nimport traverseFast from \"../lib/utils/traverse-fast.js\";\nimport { parse } from \"babylon\";\nlet fs = require(\"fs\");\nimport type { BabelNodeSourceLocation, BabelNodeBlockStatement } from \"babel-types\";\n\nfunction createLogStatement(loc: BabelNodeSourceLocation) {\n  return t.expressionStatement(\n    t.callExpression(t.memberExpression(t.identifier(\"console\"), t.identifier(\"log\")), [\n      t.stringLiteral(`[instrumentation] #${loc.start.line}`),\n    ])\n  );\n}\n\nfunction instrument(inputFilename: string, outputFilename: string) {\n  let code = fs.readFileSync(inputFilename, \"utf8\");\n  let ast = parse(code, { inputFilename, sourceType: \"script\" });\n  traverseFast(ast, function(node) {\n    if (node.type === \"BlockStatement\") {\n      if (node.loc) ((node: any): BabelNodeBlockStatement).body.unshift(createLogStatement(node.loc));\n    }\n    return false;\n  });\n  code = generate(ast, {}, \"\").code;\n  if (!outputFilename) outputFilename = inputFilename + \"-instrumented.js\";\n  fs.writeFileSync(outputFilename, code);\n  console.log(`Instrumented source code written to ${outputFilename}.`);\n}\n\nlet args = Array.from(process.argv);\nargs.splice(0, 2);\nlet inputFilename;\nlet outputFilename;\nwhile (args.length) {\n  let arg = args[0];\n  args.shift();\n  if (arg === \"--out\") {\n    arg = args[0];\n    args.shift();\n    outputFilename = arg;\n  } else if (arg === \"--help\") {\n    console.log(\"Usage: instrumentor.js [ --out output.js ] [ -- | input.js ]\");\n  } else if (!arg.startsWith(\"--\")) {\n    inputFilename = arg;\n  } else {\n    console.error(`Unknown option: ${arg}`);\n    process.exit(1);\n  }\n}\n\nif (!inputFilename) {\n  console.error(\"Missing input file.\");\n  process.exit(1);\n} else if (!outputFilename) {\n  console.error(\"Missing output file.\");\n  process.exit(1);\n} else {\n  instrument(inputFilename, outputFilename);\n}\n"]}