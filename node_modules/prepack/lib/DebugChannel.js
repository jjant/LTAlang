"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DebugChannel = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * LICENSE file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DebugChannel = exports.DebugChannel = function () {
  function DebugChannel(fs, dbgOptions) {
    _classCallCheck(this, DebugChannel);

    this.inFilePath = _path2.default.join(__dirname, "../", dbgOptions.inFilePath);
    this.outFilePath = _path2.default.join(__dirname, "../", dbgOptions.outFilePath);
    this.fs = fs;
    this.requestReceived = false;
  }

  _createClass(DebugChannel, [{
    key: "debuggerIsAttached",


    /*
    /* Only called in the beginning to check if a debugger is attached
    */
    value: function debuggerIsAttached() {
      var line = this.readIn();
      if (line === "Debugger Attached\n") {
        this.writeOut("Ready\n");
        return true;
      }
      return false;
    }

    /* Reads in a request from the debug adapter
    /* The caller is responsible for sending a response with the appropriate
    /* contents at the right time.
    /* For now, it returns the request as a string. It will be made to return a
    /* Request object based on the protocol
    */

  }, {
    key: "readIn",
    value: function readIn() {
      var contents = "";
      while (contents.length === 0) {
        contents = this.fs.readFileSync(this.inFilePath, "utf8");
      }
      //clear the file
      this.fs.writeFileSync(this.inFilePath, "");
      this.requestReceived = true;
      return contents;
    }

    /* Write out a response to the debug adapter
    /* For now, it writes the response as a string. It will be made to return
    /* a Response object based on the protocol
    */

  }, {
    key: "writeOut",
    value: function writeOut(contents) {
      //Prepack only writes back to the debug adapter in response to a request
      if (this.requestReceived) {
        this.fs.writeFileSync(this.outFilePath, contents);
        this.requestReceived = false;
      }
    }
  }]);

  return DebugChannel;
}();
//# sourceMappingURL=DebugChannel.js.map