{"version":3,"sources":["../../src/evaluators/TaggedTemplateExpression.js"],"names":["ast","strictCode","env","realm","tagRef","evaluate","tag","quasi"],"mappings":";;;;;;kBAkBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP;AACA,MAAIC,SAASF,IAAIG,QAAJ,CAAaL,IAAIM,GAAjB,EAAsBL,UAAtB,CAAb;;AAEA;;AAEA;;AAEA;AACA,SAAO,wBAAaE,KAAb,EAAoBF,UAApB,EAAgCC,GAAhC,EAAqCE,MAArC,EAA6CJ,IAAIO,KAAjD,CAAP;AACD,C;;AAnBD","file":"TaggedTemplateExpression.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { EvaluateCall } from \"../methods/call.js\";\nimport type { BabelNodeTaggedTemplateExpression } from \"babel-types\";\n\n// ECMA262 12.3.7\nexport default function(\n  ast: BabelNodeTaggedTemplateExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  // 1. Let tagRef be the result of evaluating MemberExpression.\n  let tagRef = env.evaluate(ast.tag, strictCode);\n\n  // 2. Let thisCall be this MemberExpression.\n\n  // 3. Let tailCall be IsInTailPosition(thisCall).\n\n  // 4. Return ? EvaluateCall(tagRef, TemplateLiteral, tailCall).\n  return EvaluateCall(realm, strictCode, env, tagRef, ast.quasi);\n}\n"]}