{"version":3,"sources":["../../src/evaluators/ReturnStatement.js"],"names":["ast","strictCode","env","realm","arg","argument","GetValue","evaluate","intrinsics","undefined","loc"],"mappings":";;;;;;kBAkBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP,MAAIC,YAAJ;AACA,MAAIJ,IAAIK,QAAR,EAAkB;AAChBD,UAAM,wBAAYE,QAAZ,CAAqBH,KAArB,EAA4BD,IAAIK,QAAJ,CAAaP,IAAIK,QAAjB,EAA2BJ,UAA3B,CAA5B,CAAN;AACD,GAFD,MAEO;AACLG,UAAMD,MAAMK,UAAN,CAAiBC,SAAvB;AACD;AACD,QAAM,kCAAqBL,GAArB,EAA0BJ,IAAIU,GAA9B,CAAN;AACD,C;;AAjBD;;AACA","file":"ReturnStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { Environment } from \"../singletons.js\";\nimport { ReturnCompletion } from \"../completions.js\";\nimport type { BabelNodeReturnStatement } from \"babel-types\";\n\nexport default function(\n  ast: BabelNodeReturnStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  let arg;\n  if (ast.argument) {\n    arg = Environment.GetValue(realm, env.evaluate(ast.argument, strictCode));\n  } else {\n    arg = realm.intrinsics.undefined;\n  }\n  throw new ReturnCompletion(arg, ast.loc);\n}\n"]}