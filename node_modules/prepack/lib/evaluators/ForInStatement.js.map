{"version":3,"sources":["../../src/evaluators/ForInStatement.js"],"names":["ast","strictCode","env","realm","labelSet","left","right","body","reportErrorAndThrowIfNotConcrete","val","loc","reportError","type","kind","keyResult","isPartialObject","isSimpleObject","emitResidualLoopIfSafe","declarations","id","BoundNames","e","target","intrinsics","undefined","value","t","error","handleError","lh","obexpr","ob","oldEnv","getRunningContext","lexicalEnvironment","blockEnv","NewDeclarativeEnvironment","envRec","environmentRecord","absStr","createFromType","boundName","n","identifier","CreateMutableBinding","InitializeBinding","evaluateNodeForEffects","compl","gen","bindings","properties","createdObj","empty","size","targetObject","sourceObject","forEach","desc","key","map","object","unknownProperty","sourceValue","cond","args","mem","condition","o","values","isTop","getElements","oe","generator","makeSimple","makePartial","makeNotPartial","keyValPairs","keyVal","$Get","$Set","emitForInStatement"],"mappings":"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","file":"ForInStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { BreakCompletion } from \"../completions.js\";\nimport { DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport { ForInOfHeadEvaluation, ForInOfBodyEvaluation } from \"./ForOfStatement.js\";\nimport { EnumerableOwnProperties, UpdateEmpty } from \"../methods/index.js\";\nimport { Environment } from \"../singletons.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  ArrayValue,\n  ObjectValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeForInStatement,\n  BabelNodeSourceLocation,\n  BabelNodeStatement,\n  BabelNodeVariableDeclaration,\n} from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"babel-types\";\n\n// helper func to report error\nfunction reportError(realm: Realm, loc: ?BabelNodeSourceLocation) {\n  let error = new CompilerDiagnostic(\n    \"for in loops over unknown objects are not yet supported\",\n    loc,\n    \"PP0013\",\n    \"FatalError\"\n  );\n  realm.handleError(error);\n  throw new FatalError();\n}\n\n// ECMA262 13.7.5.11\nexport default function(\n  ast: BabelNodeForInStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm,\n  labelSet: ?Array<string>\n): Value {\n  let { left, right, body } = ast;\n\n  function reportErrorAndThrowIfNotConcrete(val: Value, loc: ?BabelNodeSourceLocation) {\n    if (val instanceof AbstractValue) reportError(realm, loc);\n  }\n\n  try {\n    if (left.type === \"VariableDeclaration\") {\n      if (left.kind === \"var\") {\n        // for (var ForBinding in Expression) Statement\n        // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », Expression, enumerate).\n        let keyResult = ForInOfHeadEvaluation(realm, env, [], right, \"enumerate\", strictCode);\n        if (keyResult.isPartialObject() && keyResult.isSimpleObject()) {\n          return emitResidualLoopIfSafe(ast, strictCode, env, realm, left, right, keyResult, body);\n        }\n        reportErrorAndThrowIfNotConcrete(keyResult, right.loc);\n        invariant(keyResult instanceof ObjectValue);\n\n        // 2. Return ? ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult, varBinding, labelSet).\n        return ForInOfBodyEvaluation(\n          realm,\n          env,\n          left.declarations[0].id,\n          body,\n          keyResult,\n          \"varBinding\",\n          labelSet,\n          strictCode\n        );\n      } else {\n        // for (ForDeclaration in Expression) Statement\n        // 1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(BoundNames of ForDeclaration, Expression, enumerate).\n        let keyResult = ForInOfHeadEvaluation(\n          realm,\n          env,\n          Environment.BoundNames(realm, left),\n          right,\n          \"enumerate\",\n          strictCode\n        );\n        reportErrorAndThrowIfNotConcrete(keyResult, right.loc);\n        invariant(keyResult instanceof ObjectValue);\n\n        // 2. Return ? ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult, lexicalBinding, labelSet).\n        return ForInOfBodyEvaluation(realm, env, left, body, keyResult, \"lexicalBinding\", labelSet, strictCode);\n      }\n    } else {\n      // for (LeftHandSideExpression in Expression) Statement\n      // 1. Let keyResult be ? ForIn/OfHeadEvaluation(« », Expression, enumerate).\n      let keyResult = ForInOfHeadEvaluation(realm, env, [], right, \"enumerate\", strictCode);\n      reportErrorAndThrowIfNotConcrete(keyResult, right.loc);\n      invariant(keyResult instanceof ObjectValue);\n\n      // 2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement, keyResult, assignment, labelSet).\n      return ForInOfBodyEvaluation(realm, env, left, body, keyResult, \"assignment\", labelSet, strictCode);\n    }\n  } catch (e) {\n    if (e instanceof BreakCompletion) {\n      if (!e.target) return (UpdateEmpty(realm, e, realm.intrinsics.undefined): any).value;\n    }\n    throw e;\n  }\n}\n\nfunction emitResidualLoopIfSafe(\n  ast: BabelNodeForInStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm,\n  lh: BabelNodeVariableDeclaration,\n  obexpr: BabelNodeExpression,\n  ob: ObjectValue | AbstractObjectValue,\n  body: BabelNodeStatement\n) {\n  invariant(ob.isSimpleObject());\n  let oldEnv = realm.getRunningContext().lexicalEnvironment;\n  let blockEnv = Environment.NewDeclarativeEnvironment(realm, oldEnv);\n  realm.getRunningContext().lexicalEnvironment = blockEnv;\n  try {\n    let envRec = blockEnv.environmentRecord;\n    invariant(envRec instanceof DeclarativeEnvironmentRecord, \"expected declarative environment record\");\n    let absStr = AbstractValue.createFromType(realm, StringValue);\n    let boundName;\n    for (let n of Environment.BoundNames(realm, lh)) {\n      invariant(boundName === undefined);\n      boundName = t.identifier(n);\n      envRec.CreateMutableBinding(n, false);\n      envRec.InitializeBinding(n, absStr);\n    }\n    let [compl, gen, bindings, properties, createdObj] = realm.evaluateNodeForEffects(body, strictCode, blockEnv);\n    if (compl instanceof Value && gen.empty() && bindings.size === 0 && properties.size === 1) {\n      invariant(createdObj.size === 0); // or there will be more than one property\n      let targetObject;\n      let sourceObject;\n      properties.forEach((desc, key, map) => {\n        if (key.object.unknownProperty === key) {\n          targetObject = key.object;\n          invariant(desc !== undefined);\n          let sourceValue = desc.value;\n          if (sourceValue instanceof AbstractValue) {\n            // because sourceValue was written to key.object.unknownProperty it must be that\n            let cond = sourceValue.args[0];\n            // and because the write always creates a value of this shape\n            invariant(cond instanceof AbstractValue && cond.kind === \"template for property name condition\");\n            if (sourceValue.args[2] instanceof UndefinedValue) {\n              // check that the value that was assigned itself came from\n              // an expression of the form sourceObject[absStr].\n              let mem = sourceValue.args[1];\n              while (mem instanceof AbstractValue) {\n                if (\n                  mem.kind === \"sentinel member expression\" &&\n                  mem.args[0] instanceof ObjectValue &&\n                  mem.args[1] === absStr\n                ) {\n                  sourceObject = mem.args[0];\n                  break;\n                }\n                // check if mem is a test for absStr being equal to a known property\n                // if so skip over it until we get to the expression of the form sourceObject[absStr].\n                let condition = mem.args[0];\n                if (condition instanceof AbstractValue && condition.kind === \"check for known property\") {\n                  if (condition.args[0] === absStr) {\n                    mem = mem.args[2];\n                    continue;\n                  }\n                }\n                break;\n              }\n            }\n          }\n        }\n      });\n      if (targetObject instanceof ObjectValue && sourceObject !== undefined) {\n        let o = ob;\n        if (ob instanceof AbstractObjectValue && !ob.values.isTop() && ob.values.getElements().size === 1) {\n          // Note that it is not safe, in general, to extract a concrete object from the values domain of\n          // an abstract object. We can get away with it here only because the concrete object does not\n          // escape the code below and is thus never referenced directly in generated code because of this logic.\n          for (let oe of ob.values.getElements()) o = oe;\n        }\n        let generator = realm.generator;\n        invariant(generator !== undefined);\n        // make target object simple and partial, so that it returns a fully\n        // abstract value for every property it is queried for.\n        targetObject.makeSimple();\n        targetObject.makePartial();\n        if (sourceObject === o) {\n          // Known enumerable properties of sourceObject can become known properties of targetObject.\n          invariant(sourceObject.isPartialObject());\n          sourceObject.makeNotPartial();\n          // EnumerableOwnProperties is sufficient because sourceObject is simple\n          let keyValPairs = EnumerableOwnProperties(realm, sourceObject, \"key+value\");\n          sourceObject.makePartial();\n          for (let keyVal of keyValPairs) {\n            invariant(keyVal instanceof ArrayValue);\n            let key = keyVal.$Get(\"0\", keyVal);\n            let val = keyVal.$Get(\"1\", keyVal);\n            invariant(key instanceof StringValue); // sourceObject is simple\n            targetObject.$Set(key, val, targetObject);\n          }\n        }\n        // add loop to generator\n        invariant(boundName != null);\n        generator.emitForInStatement(o, lh, sourceObject, targetObject, boundName);\n        return realm.intrinsics.undefined;\n      }\n    }\n  } finally {\n    // 6. Set the running execution context's LexicalEnvironment to oldEnv.\n    realm.getRunningContext().lexicalEnvironment = oldEnv;\n  }\n\n  reportError(realm, obexpr.loc);\n  invariant(false);\n}\n"]}