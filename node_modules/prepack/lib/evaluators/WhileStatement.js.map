{"version":3,"sources":["../../src/evaluators/WhileStatement.js"],"names":["ast","strictCode","env","realm","labelSet","r","evaluate","type","init","test","update","body"],"mappings":";;;;;;kBAiBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKbC,QALa,EAMN;AACP,MAAIC,IAAIH,IAAII,QAAJ,CACJ;AACAC,UAAM,cADN;AAEAC,UAAM,IAFN;AAGAC,UAAMT,IAAIS,IAHV;AAIAC,YAAQ,IAJR;AAKAC,UAAMX,IAAIW;AALV,GADI,EAQNV,UARM,EASNG,QATM,CAAR;AAWA,2BAAUC,yBAAV;AACA,SAAOA,CAAP;AACD,C;;AAxBD;;AAEA","file":"WhileStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeWhileStatement, BabelNode } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default function(\n  ast: BabelNodeWhileStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm,\n  labelSet: ?Array<string>\n): Value {\n  let r = env.evaluate(\n    (({\n      type: \"ForStatement\",\n      init: null,\n      test: ast.test,\n      update: null,\n      body: ast.body,\n    }: any): BabelNode),\n    strictCode,\n    labelSet\n  );\n  invariant(r instanceof Value);\n  return r;\n}\n"]}