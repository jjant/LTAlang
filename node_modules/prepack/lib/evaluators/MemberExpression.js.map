{"version":3,"sources":["../../src/evaluators/MemberExpression.js"],"names":["ast","strictCode","env","realm","object","type","baseReference","evaluate","baseValue","GetValue","propertyNameValue","computed","propertyNameReference","property","name","bv","loc","propertyKey","strict"],"mappings":";;;;;;kBAqBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKF;AACX,MAAIH,IAAII,MAAJ,CAAWC,IAAX,KAAoB,OAAxB,EAAiC;AAC/B,WAAO,6BAAcL,GAAd,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,KAApC,CAAP;AACD;;AAED;AACA,MAAIG,gBAAgBJ,IAAIK,QAAJ,CAAaP,IAAII,MAAjB,EAAyBH,UAAzB,CAApB;;AAEA;AACA,MAAIO,YAAY,wBAAYC,QAAZ,CAAqBN,KAArB,EAA4BG,aAA5B,CAAhB;;AAEA,MAAII,0BAAJ;AACA,MAAIV,IAAIW,QAAR,EAAkB;AAChB;AACA,QAAIC,wBAAwBV,IAAIK,QAAJ,CAAaP,IAAIa,QAAjB,EAA2BZ,UAA3B,CAA5B;;AAEA;AACAS,wBAAoB,wBAAYD,QAAZ,CAAqBN,KAArB,EAA4BS,qBAA5B,CAApB;AACD,GAND,MAMO;AACL;AACAF,wBAAoB,uBAAgBP,KAAhB,EAAuBH,IAAIa,QAAJ,CAAaC,IAApC,CAApB;AACD;;AAED;AACA,MAAIC,KAAK,oCAAuBZ,KAAvB,EAA8BK,SAA9B,EAAyCR,IAAII,MAAJ,CAAWY,GAApD,CAAT;;AAEA;AACA,MAAIC,cAAc,kCAAqBd,KAArB,EAA4BO,iBAA5B,CAAlB;;AAEA;AACA,MAAIQ,SAASjB,UAAb;;AAEA;AACA,SAAO,2BAAcc,EAAd,EAAkBE,WAAlB,EAA+BC,MAA/B,CAAP;AACD,C;;AA/CD;;AACA;;AACA;;AACA;;AAEA","file":"MemberExpression.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { Reference } from \"../environment.js\";\nimport { StringValue } from \"../values/index.js\";\nimport { ToPropertyKeyPartial, RequireObjectCoercible } from \"../methods/index.js\";\nimport { Environment } from \"../singletons.js\";\nimport type { BabelNodeMemberExpression } from \"babel-types\";\nimport SuperProperty from \"./SuperProperty\";\n\n// ECMA262 12.3.2.1\nexport default function(\n  ast: BabelNodeMemberExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Reference {\n  if (ast.object.type === \"Super\") {\n    return SuperProperty(ast, strictCode, env, realm);\n  }\n\n  // 1. Let baseReference be the result of evaluating MemberExpression.\n  let baseReference = env.evaluate(ast.object, strictCode);\n\n  // 2. Let baseValue be ? GetValue(baseReference).\n  let baseValue = Environment.GetValue(realm, baseReference);\n\n  let propertyNameValue;\n  if (ast.computed) {\n    // 3. Let propertyNameReference be the result of evaluating Expression.\n    let propertyNameReference = env.evaluate(ast.property, strictCode);\n\n    // 4. Let propertyNameValue be ? GetValue(propertyNameReference).\n    propertyNameValue = Environment.GetValue(realm, propertyNameReference);\n  } else {\n    // 3. Let propertyNameString be StringValue of IdentifierName.\n    propertyNameValue = new StringValue(realm, ast.property.name);\n  }\n\n  // 5. Let bv be ? RequireObjectCoercible(baseValue).\n  let bv = RequireObjectCoercible(realm, baseValue, ast.object.loc);\n\n  // 6. Let propertyKey be ? ToPropertyKey(propertyNameValue).\n  let propertyKey = ToPropertyKeyPartial(realm, propertyNameValue);\n\n  // 7. If the code matched by the syntactic production that is being evaluated is strict mode code, let strict be true, else let strict be false.\n  let strict = strictCode;\n\n  // 8. Return a value of type Reference whose base value is bv, whose referenced name is propertyKey, and whose strict reference flag is strict.\n  return new Reference(bv, propertyKey, strict);\n}\n"]}