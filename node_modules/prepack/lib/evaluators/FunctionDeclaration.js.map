{"version":3,"sources":["../../src/evaluators/FunctionDeclaration.js"],"names":["ast","strictCode","env","realm","generator","strict","body","name","id","F","GeneratorFunctionCreate","params","prototype","intrinsics","GeneratorPrototype","DefinePropertyOrThrow","value","writable","configurable","SetFunctionName","FunctionCreate","__originalName"],"mappings":";;;;;;kBAsBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKN;AACP,MAAIH,IAAII,SAAR,EAAmB;AACjB;AACA,QAAIC,SAASJ,cAAc,sBAASD,IAAIM,IAAb,CAA3B;;AAEA;AACA,QAAIC,aAAJ;AACA,QAAIP,IAAIQ,EAAR,EAAY;AACVD,aAAO,uBAAgBJ,KAAhB,EAAuBH,IAAIQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,aAAO,uBAAgBJ,KAAhB,EAAuB,SAAvB,CAAP;AACD;;AAED;AACA,QAAIM,IAAI,sBAAUC,uBAAV,CAAkCP,KAAlC,EAAyC,QAAzC,EAAmDH,IAAIW,MAAvD,EAA+DX,IAAIM,IAAnE,EAAyEJ,GAAzE,EAA8EG,MAA9E,CAAR;;AAEA;AACA,QAAIO,YAAY,0BAAaT,KAAb,EAAoBA,MAAMU,UAAN,CAAiBC,kBAArC,CAAhB;;AAEA;AACA,2BAAWC,qBAAX,CAAiCZ,KAAjC,EAAwCM,CAAxC,EAA2C,WAA3C,EAAwD;AACtDO,aAAOJ,SAD+C;AAEtDK,gBAAU,IAF4C;AAGtDC,oBAAc;AAHwC,KAAxD;;AAMA;AACA,0BAAUC,eAAV,CAA0BhB,KAA1B,EAAiCM,CAAjC,EAAoCF,IAApC;;AAEA;AACA,WAAOE,CAAP;AACD,GA9BD,MA8BO;AACL;AACA,QAAIJ,UAASJ,cAAc,sBAASD,IAAIM,IAAb,CAA3B;;AAEA;AACA,QAAIC,cAAJ;AACA,QAAIP,IAAIQ,EAAR,EAAY;AACVD,cAAO,uBAAgBJ,KAAhB,EAAuBH,IAAIQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,cAAO,uBAAgBJ,KAAhB,EAAuB,SAAvB,CAAP;AACD;;AAED;AACA,QAAIM,KAAI,sBAAUW,cAAV,CAAyBjB,KAAzB,EAAgC,QAAhC,EAA0CH,IAAIW,MAA9C,EAAsDX,IAAIM,IAA1D,EAAgEJ,GAAhE,EAAqEG,OAArE,CAAR;AACA,QAAIL,IAAIQ,EAAJ,IAAUR,IAAIQ,EAAJ,CAAOD,IAArB,EAA2BE,GAAEY,cAAF,GAAmBrB,IAAIQ,EAAJ,CAAOD,IAA1B;;AAE3B;AACA,oCAAgBJ,KAAhB,EAAuBM,EAAvB;;AAEA;AACA,0BAAUU,eAAV,CAA0BhB,KAA1B,EAAiCM,EAAjC,EAAoCF,KAApC;;AAEA;AACA,WAAOE,EAAP;AACD;AACF,C;;AArED;;AACA;;AACA;;AACA;;AACA","file":"FunctionDeclaration.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport { MakeConstructor } from \"../methods/construct.js\";\nimport { ObjectCreate } from \"../methods/create.js\";\nimport { Functions, Properties } from \"../singletons.js\";\nimport { StringValue } from \"../values/index.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport type { BabelNodeFunctionDeclaration } from \"babel-types\";\n\n// ECMA262 14.1.20\nexport default function(\n  ast: BabelNodeFunctionDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  if (ast.generator) {\n    // 1. If the function code for GeneratorDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be GeneratorFunctionCreate(Normal, FormalParameters, GeneratorBody, scope, strict).\n    let F = Functions.GeneratorFunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n\n    // 4. Let prototype be ObjectCreate(%GeneratorPrototype%).\n    let prototype = ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n\n    // 5. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n    Properties.DefinePropertyOrThrow(realm, F, \"prototype\", {\n      value: prototype,\n      writable: true,\n      configurable: false,\n    });\n\n    // 6. Perform SetFunctionName(F, name).\n    Functions.SetFunctionName(realm, F, name);\n\n    // 7 .Return F.\n    return F;\n  } else {\n    // 1. If the function code for FunctionDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody, scope, strict).\n    let F = Functions.FunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n    if (ast.id && ast.id.name) F.__originalName = ast.id.name;\n\n    // 4. Perform MakeConstructor(F).\n    MakeConstructor(realm, F);\n\n    // 5. Perform SetFunctionName(F, name).\n    Functions.SetFunctionName(realm, F, name);\n\n    // 6. Return F.\n    return F;\n  }\n}\n"]}