{"version":3,"sources":["../../src/evaluators/ConditionalExpression.js"],"names":["ast","strictCode","env","realm","exprRef","evaluate","test","exprValue","GetConditionValue","consequent","alternate","mightNotBeTrue","mightNotBeFalse"],"mappings":";;;;;;kBAqBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKM;AACnB,MAAIC,UAAUF,IAAIG,QAAJ,CAAaL,IAAIM,IAAjB,EAAuBL,UAAvB,CAAd;AACA,MAAIM,YAAY,wBAAYC,iBAAZ,CAA8BL,KAA9B,EAAqCC,OAArC,CAAhB;;AAEA,MAAIG,yCAAJ,EAAwC;AACtC,QAAI,uBAAUJ,KAAV,EAAiBI,SAAjB,CAAJ,EAAiC;AAC/B,aAAOL,IAAIG,QAAJ,CAAaL,IAAIS,UAAjB,EAA6BR,UAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,IAAIG,QAAJ,CAAaL,IAAIU,SAAjB,EAA4BT,UAA5B,CAAP;AACD;AACF;AACD,2BAAUM,yCAAV;;AAEA,MAAI,CAACA,UAAUI,cAAV,EAAL,EAAiC,OAAOT,IAAIG,QAAJ,CAAaL,IAAIS,UAAjB,EAA6BR,UAA7B,CAAP;AACjC,MAAI,CAACM,UAAUK,eAAV,EAAL,EAAkC,OAAOV,IAAIG,QAAJ,CAAaL,IAAIU,SAAjB,EAA4BT,UAA5B,CAAP;AAClC,SAAO,kDAAgCM,SAAhC,EAA2CP,IAAIS,UAA/C,EAA2DT,IAAIU,SAA/D,EAA0ET,UAA1E,EAAsFC,GAAtF,EAA2FC,KAA3F,CAAP;AACD,C;;AA9BD;;AAEA;;AACA;;AACA;;AAEA","file":"ConditionalExpression.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { AbstractValue, ConcreteValue, Value } from \"../values/index.js\";\nimport type { Reference } from \"../environment.js\";\nimport { evaluateWithAbstractConditional } from \"./IfStatement.js\";\nimport { ToBoolean } from \"../methods/index.js\";\nimport { Environment } from \"../singletons.js\";\nimport type { BabelNodeConditionalExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default function(\n  ast: BabelNodeConditionalExpression,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value | Reference {\n  let exprRef = env.evaluate(ast.test, strictCode);\n  let exprValue = Environment.GetConditionValue(realm, exprRef);\n\n  if (exprValue instanceof ConcreteValue) {\n    if (ToBoolean(realm, exprValue)) {\n      return env.evaluate(ast.consequent, strictCode);\n    } else {\n      return env.evaluate(ast.alternate, strictCode);\n    }\n  }\n  invariant(exprValue instanceof AbstractValue);\n\n  if (!exprValue.mightNotBeTrue()) return env.evaluate(ast.consequent, strictCode);\n  if (!exprValue.mightNotBeFalse()) return env.evaluate(ast.alternate, strictCode);\n  return evaluateWithAbstractConditional(exprValue, ast.consequent, ast.alternate, strictCode, env, realm);\n}\n"]}