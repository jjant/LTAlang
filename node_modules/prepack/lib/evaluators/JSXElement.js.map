{"version":3,"sources":["../../src/evaluators/JSXElement.js"],"names":["ast","strictCode","env","realm","react","enabled","openingElement","type","evaluateJSXIdentifier","name","evaluateJSXAttributes","attributes","children","key","get","intrinsics","null","ref","undefined","emptyString","props","createReactProps","createReactElement","t","RESERVED_PROPS","__self","__source","reactElementSymbolKey","cleanJSXElementLiteralChild","child","lines","split","lastNonEmptyLine","i","length","match","str","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","replace","evaluateJSXMemberExpression","GetValue","ResolveBinding","evaluate","isTagName","evaluateJSXValue","value","expression","test","getDefaultProps","elementType","defaultProps","memberExpression","identifier","evaluateJSXChildren","singleChild","text","array","dynamicChildrenLength","dynamicIterator","lastChildValue","Set","astAttributes","astChildren","Map","properties","defaultPropValue","set","astAttribute","spreadValue","argument","spreadProp","descriptor","spreadPropValue","getReactElementSymbol","reactElementSymbol","SymbolFor","Symbol","SymbolForDescriptor","SymbolForValue","$Call","obj","ObjectPrototype","hasOwnProperty"],"mappings":"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","file":"JSXElement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport type {\n  BabelNode,\n  BabelNodeStringLiteral,\n  BabelNodeJSXText,\n  BabelNodeJSXElement,\n  BabelNodeJSXIdentifier,\n  BabelNodeJSXMemberExpression,\n  BabelNodeJSXAttribute,\n  BabelNodeJSXSpreadAttribute,\n  BabelNodeJSXExpressionContainer,\n} from \"babel-types\";\nimport { ArrayValue, StringValue, Value, NumberValue, ObjectValue, SymbolValue } from \"../values/index.js\";\nimport { convertJSXExpressionToIdentifier } from \"../react/jsx\";\nimport * as t from \"babel-types\";\nimport { Get, ArrayCreate, CreateDataPropertyOrThrow, ObjectCreate } from \"../methods/index.js\";\nimport { Environment, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { computeBinary } from \"./BinaryExpression.js\";\n\nlet RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true,\n};\n\nlet reactElementSymbolKey = \"react.element\";\n\n// taken from Babel\nfunction cleanJSXElementLiteralChild(child: string): null | string {\n  let lines = child.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n\n    let isFirstLine = i === 0;\n    let isLastLine = i === lines.length - 1;\n    let isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) {\n    return str;\n  }\n  return null;\n}\n\nfunction evaluateJSXMemberExpression(\n  ast: BabelNode,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  switch (ast.type) {\n    case \"JSXIdentifier\":\n      return Environment.GetValue(\n        realm,\n        Environment.ResolveBinding(realm, ((ast: any): BabelNodeJSXIdentifier).name, strictCode, env)\n      );\n    case \"JSXMemberExpression\":\n      return Environment.GetValue(\n        realm,\n        env.evaluate(convertJSXExpressionToIdentifier(((ast: any): BabelNodeJSXMemberExpression)), strictCode)\n      );\n    default:\n      invariant(false, \"Unknown JSX Identifier\");\n  }\n}\n\nfunction evaluateJSXIdentifier(ast, strictCode, env, realm): Value {\n  if (isTagName(ast)) {\n    // special cased lower-case and custom elements\n    return new StringValue(realm, ((ast: any): BabelNodeJSXIdentifier).name);\n  }\n  return evaluateJSXMemberExpression(ast, strictCode, env, realm);\n}\n\nfunction evaluateJSXValue(value: BabelNode, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  if (value != null) {\n    switch (value.type) {\n      case \"JSXText\":\n        return new StringValue(realm, ((value: any): BabelNodeJSXText).value);\n      case \"StringLiteral\":\n        return new StringValue(realm, ((value: any): BabelNodeStringLiteral).value);\n      case \"JSXExpressionContainer\":\n        return Environment.GetValue(\n          realm,\n          env.evaluate(((value: any): BabelNodeJSXExpressionContainer).expression, strictCode)\n        );\n      case \"JSXElement\":\n        return Environment.GetValue(realm, env.evaluate(value, strictCode));\n      default:\n        invariant(false, `Unknown JSX value type: ${value.type}`);\n    }\n  }\n  invariant(false, `Null or undefined value passed when trying to evaluate JSX node value`);\n}\n\nfunction isTagName(ast: BabelNode): boolean {\n  return ast.type === \"JSXIdentifier\" && /^[a-z]|\\-/.test(((ast: any): BabelNodeJSXIdentifier).name);\n}\n\nfunction getDefaultProps(\n  elementType: BabelNodeJSXIdentifier | BabelNodeJSXMemberExpression,\n  env,\n  realm: Realm\n): null | ObjectValue {\n  let name;\n  if (elementType.type === \"JSXIdentifier\") {\n    name = elementType.name;\n  }\n  if (!isTagName(elementType) && typeof name === \"string\") {\n    // find the value of \"ComponentXXX.defaultProps\"\n    let defaultProps = Environment.GetValue(\n      realm,\n      env.evaluate(t.memberExpression(t.identifier(name), t.identifier(\"defaultProps\")), false)\n    );\n\n    if (defaultProps instanceof ObjectValue) {\n      return defaultProps;\n    }\n  }\n  return null;\n}\n\nfunction evaluateJSXChildren(\n  children: Array<BabelNode>,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): ArrayValue | Value | null {\n  if (children.length === 0) {\n    return null;\n  }\n  if (children.length === 1) {\n    let singleChild = evaluateJSXValue(children[0], strictCode, env, realm);\n\n    if (singleChild instanceof StringValue) {\n      let text = cleanJSXElementLiteralChild(singleChild.value);\n      if (text !== null) {\n        singleChild.value = text;\n      }\n    }\n    return singleChild;\n  }\n  let array = ArrayCreate(realm, 0);\n  let dynamicChildrenLength = children.length;\n  let dynamicIterator = 0;\n  let lastChildValue = null;\n  for (let i = 0; i < children.length; i++) {\n    let value = evaluateJSXValue(children[i], strictCode, env, realm);\n    if (value instanceof StringValue) {\n      let text = cleanJSXElementLiteralChild(value.value);\n      if (text === null) {\n        dynamicChildrenLength--;\n        // this is a space full of whitespace, so let's proceed\n        continue;\n      } else {\n        value.value = text;\n      }\n    }\n    lastChildValue = value;\n    CreateDataPropertyOrThrow(realm, array, \"\" + dynamicIterator, value);\n    dynamicIterator++;\n  }\n  if (dynamicChildrenLength === 1) {\n    return lastChildValue;\n  }\n\n  Properties.Set(realm, array, \"length\", new NumberValue(realm, dynamicChildrenLength), false);\n  return array;\n}\n\nfunction evaluateJSXAttributes(\n  elementType: BabelNodeJSXIdentifier | BabelNodeJSXMemberExpression,\n  astAttributes: Array<BabelNodeJSXAttribute | BabelNodeJSXSpreadAttribute>,\n  astChildren: Array<BabelNode>,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): { attributes: Map<string, Value>, children: ArrayValue | Value | null } {\n  let attributes = new Map();\n  let children = evaluateJSXChildren(astChildren, strictCode, env, realm);\n  let defaultProps = getDefaultProps(elementType, env, realm);\n\n  // defaultProps are a bit like default function arguments\n  // if an actual value exists, it should overwrite the default value\n  if (defaultProps !== null) {\n    for (let [key] of defaultProps.properties) {\n      let defaultPropValue = Get(realm, defaultProps, key);\n\n      if (defaultPropValue instanceof Value) {\n        if (key === \"children\") {\n          if (children === null) {\n            children = defaultPropValue;\n          }\n        } else {\n          attributes.set(key, defaultPropValue);\n        }\n      }\n    }\n  }\n  for (let astAttribute of astAttributes) {\n    switch (astAttribute.type) {\n      case \"JSXAttribute\":\n        let { name, value } = astAttribute;\n\n        invariant(name.type === \"JSXIdentifier\", `JSX attribute name type not supported: ${astAttribute.type}`);\n        attributes.set(name.name, evaluateJSXValue(((value: any): BabelNodeJSXIdentifier), strictCode, env, realm));\n        break;\n      case \"JSXSpreadAttribute\":\n        let spreadValue = Environment.GetValue(realm, env.evaluate(astAttribute.argument, strictCode));\n\n        if (spreadValue instanceof ObjectValue) {\n          for (let [key, spreadProp] of spreadValue.properties) {\n            if (spreadProp !== undefined && spreadProp.descriptor !== undefined) {\n              let spreadPropValue = spreadProp.descriptor.value;\n\n              if (spreadPropValue instanceof Value) {\n                if (key === \"children\") {\n                  children = spreadPropValue;\n                } else {\n                  attributes.set(key, spreadPropValue);\n                }\n              }\n            }\n          }\n        } else {\n          throw new FatalError(\"ObjectValues are the only supported value for JSX Spread Attributes\");\n        }\n        break;\n      default:\n        invariant(false, `Unknown JSX attribute type:: ${astAttribute.type}`);\n    }\n  }\n  return {\n    attributes,\n    children,\n  };\n}\n\nfunction getReactElementSymbol(realm: Realm): SymbolValue {\n  let reactElementSymbol = realm.react.reactElementSymbol;\n  if (reactElementSymbol !== undefined) {\n    return reactElementSymbol;\n  }\n  let SymbolFor = realm.intrinsics.Symbol.properties.get(\"for\");\n  if (SymbolFor !== undefined) {\n    let SymbolForDescriptor = SymbolFor.descriptor;\n\n    if (SymbolForDescriptor !== undefined) {\n      let SymbolForValue = SymbolForDescriptor.value;\n      if (SymbolForValue !== undefined && typeof SymbolForValue.$Call === \"function\") {\n        realm.react.reactElementSymbol = reactElementSymbol = SymbolForValue.$Call(realm.intrinsics.Symbol, [\n          new StringValue(realm, reactElementSymbolKey),\n        ]);\n      }\n    }\n  }\n  invariant(reactElementSymbol instanceof SymbolValue, `ReactElement \"$$typeof\" property was not a symbol`);\n  return reactElementSymbol;\n}\n\nfunction createReactProps(\n  realm: Realm,\n  type: Value,\n  attributes: Map<string, Value>,\n  children,\n  env: LexicalEnvironment\n): ObjectValue {\n  let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  for (let [key, value] of attributes) {\n    if (typeof key === \"string\") {\n      if (RESERVED_PROPS.hasOwnProperty(key)) {\n        continue;\n      }\n      CreateDataPropertyOrThrow(realm, obj, key, value);\n    }\n  }\n  if (children !== null) {\n    CreateDataPropertyOrThrow(realm, obj, \"children\", children);\n  }\n  return obj;\n}\n\nfunction createReactElement(realm: Realm, type: Value, key: Value, ref: Value, props: ObjectValue): ObjectValue {\n  let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  CreateDataPropertyOrThrow(realm, obj, \"$$typeof\", getReactElementSymbol(realm));\n  CreateDataPropertyOrThrow(realm, obj, \"type\", type);\n  CreateDataPropertyOrThrow(realm, obj, \"key\", key);\n  CreateDataPropertyOrThrow(realm, obj, \"ref\", ref);\n  CreateDataPropertyOrThrow(realm, obj, \"props\", props);\n  CreateDataPropertyOrThrow(realm, obj, \"_owner\", realm.intrinsics.null);\n  return obj;\n}\n\nexport default function(\n  ast: BabelNodeJSXElement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): ObjectValue {\n  invariant(realm.react.enabled, \"JSXElements can only be evaluated with the reactEnabled option\");\n  let openingElement = ast.openingElement;\n  let type = evaluateJSXIdentifier(openingElement.name, strictCode, env, realm);\n  let { attributes, children } = evaluateJSXAttributes(\n    openingElement.name,\n    openingElement.attributes,\n    ast.children,\n    strictCode,\n    env,\n    realm\n  );\n  let key = attributes.get(\"key\") || realm.intrinsics.null;\n  let ref = attributes.get(\"ref\") || realm.intrinsics.null;\n\n  if (key === realm.intrinsics.undefined) {\n    key = realm.intrinsics.null;\n  }\n  if (ref === realm.intrinsics.undefined) {\n    ref = realm.intrinsics.null;\n  }\n\n  // React uses keys to identify nodes as they get updated through the reconcilation\n  // phase. Keys are used in a map and thus need to be converted to strings\n  if (key !== realm.intrinsics.null) {\n    key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, key);\n  }\n  let props = createReactProps(realm, type, attributes, children, env);\n\n  return createReactElement(realm, type, key, ref, props);\n}\n"]}