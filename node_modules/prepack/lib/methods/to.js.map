{"version":3,"sources":["../../src/methods/to.js"],"names":["ToInt32","ToUint32","ToInt16","ToUint16","ToInt8","ToUint8","ToUint8Clamp","thisBooleanValue","thisNumberValue","thisStringValue","ToPropertyDescriptor","ToObject","ToObjectPartial","ToLength","ToInteger","ToIndex","ToIndexPartial","ToNumber","IsToNumberPure","ToPrimitive","ToPrimitiveOrAbstract","GetToPrimitivePureResultType","IsToPrimitivePure","OrdinaryToPrimitive","OrdinaryToPrimitiveOrAbstract","ToString","ToStringPartial","ToStringValue","ToBoolean","ToBooleanPartial","ToPropertyKey","ToPropertyKeyPartial","CanonicalNumericIndexString","ElementConv","Int8","Int16","Int32","Uint8","Uint16","Uint32","Uint8Clamped","modulo","x","y","realm","argument","number","isNaN","isFinite","int","Math","floor","abs","int32bit","pow","int16bit","int8bit","f","value","$BooleanData","booleanData","throwIfNotConcreteBoolean","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$NumberData","numberData","throwIfNotConcreteNumber","$StringData","stringData","throwIfNotConcreteString","Obj","desc","hasEnumerable","enu","enumerable","hasConfigurable","conf","configurable","hasValue","hasWritable","writable","hasGet","getter","mightBeUndefined","get","hasSet","setter","set","arg","obj","BooleanPrototype","NumberPrototype","StringPrototype","SymbolPrototype","$SymbolData","WrapAbstractInObject","types","getType","throwIfNotConcreteObject","len","Infinity","min","index","integerIndex","RangeError","val","reportIntrospectionError","NaN","prim","Number","type","input","hint","throwIfNotConcretePrimitive","exoticToPrim","SymbolToPrimitive","result","isTypeCompatibleWith","undefined","methodNames","name","method","resultType","primValue","str","length","mightNotBeObject","key","mightNotBeString","n"],"mappings":"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","file":"to.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Descriptor, CallableObjectValue } from \"../types.js\";\nimport type { Realm } from \"../realm.js\";\nimport { GetMethod, Get } from \"./get.js\";\nimport { StringCreate } from \"./create.js\";\nimport { HasProperty } from \"./has.js\";\nimport { Call } from \"./call.js\";\nimport { FatalError } from \"../errors.js\";\nimport { IsCallable } from \"./is.js\";\nimport { SameValue, SameValueZero } from \"./abstract.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\n\nexport const ElementConv = {\n  Int8: ToInt8,\n  Int16: ToInt16,\n  Int32: ToInt32,\n  Uint8: ToUint8,\n  Uint16: ToUint16,\n  Uint32: ToUint32,\n  Uint8Clamped: ToUint8Clamp,\n};\n\ntype numberOrValue = number | Value;\n\nfunction modulo(x: number, y: number): number {\n  return x < 0 ? x % y + y : x % y;\n}\n\n// ECMA262 7.1.5\nexport function ToInt32(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int16bit be int modulo 2^32.\n  let int32bit = modulo(int, Math.pow(2, 32));\n\n  // 5. If int32bit ≥ 2^31, return int32bit - 2^32; otherwise return int32bit.\n  return int32bit >= Math.pow(2, 31) ? int32bit - Math.pow(2, 32) : int32bit;\n}\n\n// ECMA262 7.1.6\nexport function ToUint32(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int16bit be int modulo 2^32.\n  let int32bit = modulo(int, Math.pow(2, 32));\n\n  // 5. Return int32bit.\n  return int32bit;\n}\n\n// ECMA262 7.1.7\nexport function ToInt16(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int16bit be int modulo 2^16.\n  let int16bit = modulo(int, Math.pow(2, 16));\n\n  // 5. If int16bit ≥ 2^15, return int16bit - 2^16; otherwise return int16bit.\n  return int16bit >= Math.pow(2, 15) ? int16bit - Math.pow(2, 16) : int16bit;\n}\n\n// ECMA262 7.1.8\nexport function ToUint16(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int16bit be int modulo 2^16.\n  let int16bit = modulo(int, Math.pow(2, 16));\n\n  // 5. Return int16bit.\n  return int16bit;\n}\n\n// ECMA262 7.1.9\nexport function ToInt8(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int8bit be int modulo 2^8.\n  let int8bit = modulo(int, Math.pow(2, 8));\n\n  // 5. If int8bit ≥ 2^7, return int8bit - 2^8; otherwise return int8bit.\n  return int8bit >= Math.pow(2, 7) ? int8bit - Math.pow(2, 8) : int8bit;\n}\n\n// ECMA262 7.1.10\nexport function ToUint8(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n  if (isNaN(number) || number === 0 || !isFinite(number)) return +0;\n\n  // 3. Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).\n  let int = number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n\n  // 4. Let int8bit be int modulo 2^8.\n  let int8bit = modulo(int, Math.pow(2, 8));\n\n  // 5. Return int8bit.\n  return int8bit;\n}\n\n// ECMA262 7.1.11\nexport function ToUint8Clamp(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, return +0.\n  if (isNaN(number)) return +0;\n\n  // 3. If number ≤ 0, return +0.\n  if (number <= 0) return +0;\n\n  // 4. If number ≥ 255, return 255.\n  if (number >= 255) return 255;\n\n  // 5. Let f be floor(number).\n  let f = Math.floor(number);\n\n  // 6. If f + 0.5 < number, return f + 1.\n  if (f + 0.5 < number) return f + 1;\n\n  // 7. If number < f + 0.5, return f.\n  if (number < f + 0.5) return f;\n\n  // 8. If f is odd, return f + 1.\n  if (f % 2 === 1) return f + 1;\n\n  // 9. Return f.\n  return f;\n}\n\n// ECMA262 19.3.3.1\nexport function thisBooleanValue(realm: Realm, value: Value): BooleanValue {\n  // 1. If Type(value) is Boolean, return value.\n  if (value instanceof BooleanValue) return value;\n\n  // 2. If Type(value) is Object and value has a [[BooleanData]] internal slot, then\n  if (value instanceof ObjectValue && value.$BooleanData) {\n    const booleanData = value.$BooleanData.throwIfNotConcreteBoolean();\n    // a. Assert: value's [[BooleanData]] internal slot is a Boolean value.\n    invariant(booleanData instanceof BooleanValue, \"expected boolean data internal slot to be a boolean value\");\n\n    // b. Return the value of value's [[BooleanData]] internal slot.\n    return booleanData;\n  }\n\n  value.throwIfNotConcrete();\n\n  // 3. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n}\n\n// ECMA262 20.1.3\nexport function thisNumberValue(realm: Realm, value: Value): NumberValue {\n  // 1. If Type(value) is Number, return value.\n  if (value instanceof NumberValue) return value;\n\n  // 2. If Type(value) is Object and value has a [[NumberData]] internal slot, then\n  if (value instanceof ObjectValue && value.$NumberData) {\n    const numberData = value.$NumberData.throwIfNotConcreteNumber();\n    // a. Assert: value's [[NumberData]] internal slot is a Number value.\n    invariant(numberData instanceof NumberValue, \"expected number data internal slot to be a number value\");\n\n    // b. Return the value of value's [[NumberData]] internal slot.\n    return numberData;\n  }\n\n  value = value.throwIfNotConcrete();\n\n  // 3. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n}\n\n// ECMA262 21.1.3\nexport function thisStringValue(realm: Realm, value: Value): StringValue {\n  // 1. If Type(value) is String, return value.\n  if (value instanceof StringValue) return value;\n\n  // 2. If Type(value) is Object and value has a [[StringData]] internal slot, then\n  if (value instanceof ObjectValue && value.$StringData) {\n    const stringData = value.$StringData.throwIfNotConcreteString();\n    // a. Assert: value's [[StringData]] internal slot is a String value.\n    invariant(stringData instanceof StringValue, \"expected string data internal slot to be a string value\");\n\n    // b. Return the value of value's [[StringData]] internal slot.\n    return stringData;\n  }\n\n  value = value.throwIfNotConcrete();\n\n  // 3. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n}\n\n// ECMA262 6.2.4.5\nexport function ToPropertyDescriptor(realm: Realm, Obj: Value): Descriptor {\n  Obj = Obj.throwIfNotConcrete();\n\n  // 1. If Type(Obj) is not Object, throw a TypeError exception.\n  if (!(Obj instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. Let desc be a new Property Descriptor that initially has no fields.\n  let desc: Descriptor = {};\n\n  // 3. Let hasEnumerable be ? HasProperty(Obj, \"enumerable\").\n  let hasEnumerable = HasProperty(realm, Obj, \"enumerable\");\n\n  // 4. If hasEnumerable is true, then\n  if (hasEnumerable === true) {\n    // a. Let enum be ToBoolean(? Get(Obj, \"enumerable\")).\n    let enu = ToBooleanPartial(realm, Get(realm, Obj, \"enumerable\"));\n\n    // b. Set the [[Enumerable]] field of desc to enum.\n    desc.enumerable = enu === true;\n  }\n\n  // 5. Let hasConfigurable be ? HasProperty(Obj, \"configurable\").\n  let hasConfigurable = HasProperty(realm, Obj, \"configurable\");\n\n  // 6. If hasConfigurable is true, then\n  if (hasConfigurable === true) {\n    // a. Let conf be ToBoolean(? Get(Obj, \"configurable\")).\n    let conf = ToBooleanPartial(realm, Get(realm, Obj, \"configurable\"));\n\n    // b. Set the [[Configurable]] field of desc to conf.\n    desc.configurable = conf === true;\n  }\n\n  // 7. Let hasValue be ? HasProperty(Obj, \"value\").\n  let hasValue = HasProperty(realm, Obj, \"value\");\n\n  // 8. If hasValue is true, then\n  if (hasValue === true) {\n    // a. Let value be ? Get(Obj, \"value\").\n    let value = Get(realm, Obj, \"value\");\n\n    // b. Set the [[Value]] field of desc to value.\n    desc.value = value;\n  }\n\n  // 9. Let hasWritable be ? HasProperty(Obj, \"writable\").\n  let hasWritable = HasProperty(realm, Obj, \"writable\");\n\n  // 10. If hasWritable is true, then\n  if (hasWritable === true) {\n    // a. Let writable be ToBoolean(? Get(Obj, \"writable\")).\n    let writable = ToBooleanPartial(realm, Get(realm, Obj, \"writable\"));\n\n    // b. Set the [[Writable]] field of desc to writable.\n    desc.writable = writable === true;\n  }\n\n  // 11. Let hasGet be ? HasProperty(Obj, \"get\").\n  let hasGet = HasProperty(realm, Obj, \"get\");\n\n  // 12. If hasGet is true, then\n  if (hasGet === true) {\n    // a. Let getter be ? Get(Obj, \"get\").\n    let getter = Get(realm, Obj, \"get\");\n\n    // b. If IsCallable(getter) is false and getter is not undefined, throw a TypeError exception.\n    if (IsCallable(realm, getter) === false && !getter.mightBeUndefined()) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    getter.throwIfNotConcrete();\n\n    // c. Set the [[Get]] field of desc to getter.\n    desc.get = ((getter: any): CallableObjectValue | UndefinedValue);\n  }\n\n  // 13. Let hasSet be ? HasProperty(Obj, \"set\").\n  let hasSet = HasProperty(realm, Obj, \"set\");\n\n  // 14. If hasSet is true, then\n  if (hasSet === true) {\n    // a. Let setter be ? Get(Obj, \"set\").\n    let setter = Get(realm, Obj, \"set\");\n\n    // b. If IsCallable(setter) is false and setter is not undefined, throw a TypeError exception.\n    if (IsCallable(realm, setter) === false && !setter.mightBeUndefined()) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    setter.throwIfNotConcrete();\n\n    // c. Set the [[Set]] field of desc to setter.\n    desc.set = ((setter: any): CallableObjectValue | UndefinedValue);\n  }\n\n  // 15. If either desc.[[Get]] or desc.[[Set]] is present, then\n  if (desc.get || desc.set) {\n    // a. If either desc.[[Value]] or desc.[[Writable]] is present, throw a TypeError exception.\n    if (\"value\" in desc || \"writable\" in desc) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n  }\n\n  // 16. Return desc.\n  return desc;\n}\n\n// ECMA262 7.1.13\nexport function ToObject(realm: Realm, arg: ConcreteValue): ObjectValue {\n  if (arg instanceof UndefinedValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  } else if (arg instanceof NullValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  } else if (arg instanceof BooleanValue) {\n    let obj = new ObjectValue(realm, realm.intrinsics.BooleanPrototype);\n    obj.$BooleanData = arg;\n    return obj;\n  } else if (arg instanceof NumberValue) {\n    let obj = new ObjectValue(realm, realm.intrinsics.NumberPrototype);\n    obj.$NumberData = arg;\n    return obj;\n  } else if (arg instanceof StringValue) {\n    let obj = StringCreate(realm, arg, realm.intrinsics.StringPrototype);\n    return obj;\n  } else if (arg instanceof SymbolValue) {\n    let obj = new ObjectValue(realm, realm.intrinsics.SymbolPrototype);\n    obj.$SymbolData = arg;\n    return obj;\n  } else if (arg instanceof ObjectValue) {\n    return arg;\n  }\n  invariant(false);\n}\n\nfunction WrapAbstractInObject(realm: Realm, arg: AbstractValue): ObjectValue {\n  let obj;\n  switch (arg.types.getType()) {\n    case NumberValue:\n      obj = new ObjectValue(realm, realm.intrinsics.NumberPrototype);\n      obj.$NumberData = arg;\n      break;\n\n    case StringValue:\n      obj = new ObjectValue(realm, realm.intrinsics.StringPrototype);\n      obj.$StringData = arg;\n      break;\n\n    case BooleanValue:\n      obj = new ObjectValue(realm, realm.intrinsics.BooleanPrototype);\n      obj.$BooleanData = arg;\n      break;\n\n    case SymbolValue:\n      obj = new ObjectValue(realm, realm.intrinsics.SymbolPrototype);\n      obj.$SymbolData = arg;\n      break;\n\n    case UndefinedValue:\n    case NullValue:\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n\n    default:\n      obj = arg.throwIfNotConcreteObject();\n      break;\n  }\n  return obj;\n}\n\nexport function ToObjectPartial(realm: Realm, arg: Value): ObjectValue | AbstractObjectValue {\n  if (arg instanceof AbstractObjectValue) return arg;\n  if (arg instanceof AbstractValue) {\n    return WrapAbstractInObject(realm, arg);\n  }\n  arg = arg.throwIfNotConcrete();\n  return ToObject(realm, arg);\n}\n\n// ECMA262 7.1.15\nexport function ToLength(realm: Realm, argument: numberOrValue): number {\n  // Let len be ? ToInteger(argument).\n  let len = ToInteger(realm, argument);\n\n  // If len ≤ +0, return +0.\n  if (len <= 0) return +0;\n\n  // If len is +∞, return 2^53-1.\n  if (len === +Infinity) return Math.pow(2, 53) - 1;\n\n  // Return min(len, 2^53-1).\n  return Math.min(len, Math.pow(2, 53) - 1);\n}\n\n// ECMA262 7.1.4\nexport function ToInteger(realm: Realm, argument: numberOrValue): number {\n  // 1. Let number be ? ToNumber(argument).\n  let number = ToNumber(realm, argument);\n\n  // 2. If number is NaN, return +0.\n  if (isNaN(number)) return +0;\n\n  // 3. If number is +0, -0, +∞, or -∞, return number.\n  if (!isFinite(number) || number === 0) return number;\n\n  // 4. Return the number value that is the same sign as number and whose magnitude is floor(abs(number)).\n  return number < 0 ? -Math.floor(Math.abs(number)) : Math.floor(Math.abs(number));\n}\n\n// ECMA262 7.1.17\nexport function ToIndex(realm: Realm, value: number | ConcreteValue): number {\n  let index;\n  // 1. If value is undefined, then\n  if (value instanceof UndefinedValue) {\n    // a. Let index be 0.\n    index = 0;\n  } else {\n    // 2. Else,\n    // a. Let integerIndex be ? ToInteger(value).\n    let integerIndex = ToInteger(realm, value);\n\n    // b. If integerIndex < 0, throw a RangeError exception.\n    if (integerIndex < 0) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"integerIndex < 0\");\n    }\n\n    // c. Let index be ! ToLength(integerIndex).\n    index = ToLength(realm, integerIndex);\n\n    // d. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n    if (SameValueZero(realm, new NumberValue(realm, integerIndex), new NumberValue(realm, index)) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"integerIndex < 0\");\n    }\n  }\n  // 3. Return index.\n  return index;\n}\n\nexport function ToIndexPartial(realm: Realm, value: numberOrValue): number {\n  return ToIndex(realm, typeof value === \"number\" ? value : value.throwIfNotConcrete());\n}\n\n// ECMA262 7.1.3\nexport function ToNumber(realm: Realm, val: numberOrValue): number {\n  if (typeof val === \"number\") {\n    return val;\n  } else if (val instanceof AbstractValue) {\n    AbstractValue.reportIntrospectionError(val);\n    throw new FatalError();\n  } else if (val instanceof UndefinedValue) {\n    return NaN;\n  } else if (val instanceof NullValue) {\n    return +0;\n  } else if (val instanceof ObjectValue) {\n    let prim = ToPrimitive(realm, val, \"number\");\n    return ToNumber(realm, prim);\n  } else if (val instanceof BooleanValue) {\n    if (val.value === true) {\n      return 1;\n    } else {\n      // `val.value === false`\n      return 0;\n    }\n  } else if (val instanceof NumberValue) {\n    return val.value;\n  } else if (val instanceof StringValue) {\n    return Number(val.value);\n  } else if (val instanceof SymbolValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  } else {\n    invariant(false, \"unexpected type of value\");\n  }\n}\n\nexport function IsToNumberPure(realm: Realm, val: numberOrValue): boolean {\n  if (val instanceof Value) {\n    if (IsToPrimitivePure(realm, val)) {\n      let type = val.getType();\n      return type !== SymbolValue && type !== PrimitiveValue && type !== Value;\n    }\n    return false;\n  }\n  return true;\n}\n\n// ECMA262 7.1.1\nexport function ToPrimitive(\n  realm: Realm,\n  input: ConcreteValue,\n  hint?: \"default\" | \"string\" | \"number\"\n): PrimitiveValue {\n  return ToPrimitiveOrAbstract(realm, input, hint).throwIfNotConcretePrimitive();\n}\n\nexport function ToPrimitiveOrAbstract(\n  realm: Realm,\n  input: ConcreteValue,\n  hint?: \"default\" | \"string\" | \"number\"\n): AbstractValue | PrimitiveValue {\n  if (input instanceof PrimitiveValue) {\n    return input;\n  }\n\n  // When Type(input) is Object, the following steps are taken\n  invariant(input instanceof ObjectValue, \"expected an object\");\n\n  // 1. If PreferredType was not passed, let hint be \"default\".\n  hint = hint || \"default\";\n\n  // Following two steps are redundant since we just pass string hints.\n  // 2. Else if PreferredType is hint String, let hint be \"string\".\n  // 3. Else PreferredType is hint Number, let hint be \"number\".\n\n  // 4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n  let exoticToPrim = GetMethod(realm, input, realm.intrinsics.SymbolToPrimitive);\n\n  // 5. If exoticToPrim is not undefined, then\n  if (!(exoticToPrim instanceof UndefinedValue)) {\n    // a. Let result be ? Call(exoticToPrim, input, « hint »).\n    let result = Call(realm, exoticToPrim, input, [new StringValue(realm, hint)]);\n\n    // b. If Type(result) is not Object, return result.\n    if (!(result instanceof ObjectValue)) {\n      invariant(result instanceof PrimitiveValue);\n      return result;\n    }\n\n    // c. Throw a TypeError exception.\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 6. If hint is \"default\", let hint be \"number\".\n  if (hint === \"default\") hint = \"number\";\n\n  // 7. Return ? OrdinaryToPrimitive(input, hint).\n  return OrdinaryToPrimitiveOrAbstract(realm, input, hint);\n}\n\n// Returns result type of ToPrimitive if it is pure (terminates, does not throw exception, does not read or write heap), otherwise undefined.\nexport function GetToPrimitivePureResultType(realm: Realm, input: Value): void | typeof Value {\n  let type = input.getType();\n  if (input instanceof PrimitiveValue) return type;\n  if (input instanceof AbstractValue && Value.isTypeCompatibleWith(type, PrimitiveValue)) return type;\n  return undefined;\n}\n\nexport function IsToPrimitivePure(realm: Realm, input: Value) {\n  return GetToPrimitivePureResultType(realm, input) !== undefined;\n}\n\n// ECMA262 7.1.1\nexport function OrdinaryToPrimitive(realm: Realm, input: ObjectValue, hint: \"string\" | \"number\"): PrimitiveValue {\n  return OrdinaryToPrimitiveOrAbstract(realm, input, hint).throwIfNotConcretePrimitive();\n}\n\nexport function OrdinaryToPrimitiveOrAbstract(\n  realm: Realm,\n  input: ObjectValue,\n  hint: \"string\" | \"number\"\n): AbstractValue | PrimitiveValue {\n  let methodNames;\n\n  // 1. Assert: Type(O) is Object.\n  invariant(input instanceof ObjectValue, \"Expected object\");\n\n  // 2. Assert: Type(hint) is String and its value is either \"string\" or \"number\".\n  invariant(hint === \"string\" || hint === \"number\", \"Expected string or number hint\");\n\n  // 3. If hint is \"string\", then\n  if (hint === \"string\") {\n    // a. Let methodNames be « \"toString\", \"valueOf\" ».\n    methodNames = [\"toString\", \"valueOf\"];\n  } else {\n    // 4. Else,\n    // a. Let methodNames be « \"valueOf\", \"toString\" ».\n    methodNames = [\"valueOf\", \"toString\"];\n  }\n\n  // 5. For each name in methodNames in List order, do\n  for (let name of methodNames) {\n    // a. Let method be ? Get(O, name).\n    let method = Get(realm, input, new StringValue(realm, name));\n\n    // b. If IsCallable(method) is true, then\n    if (IsCallable(realm, method)) {\n      // i. Let result be ? Call(method, O).\n      let result = Call(realm, method, input);\n      let resultType = result.getType();\n\n      // ii. If Type(result) is not Object, return result.\n      if (Value.isTypeCompatibleWith(resultType, PrimitiveValue)) {\n        invariant(result instanceof AbstractValue || result instanceof PrimitiveValue);\n        return result;\n      }\n    }\n  }\n\n  // 6. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"can't turn to primitive\");\n}\n\n// ECMA262 7.1.12\nexport function ToString(realm: Realm, val: string | ConcreteValue): string {\n  if (typeof val === \"string\") {\n    return val;\n  } else if (val instanceof StringValue) {\n    return val.value;\n  } else if (val instanceof NumberValue) {\n    return val.value + \"\";\n  } else if (val instanceof UndefinedValue) {\n    return \"undefined\";\n  } else if (val instanceof NullValue) {\n    return \"null\";\n  } else if (val instanceof SymbolValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  } else if (val instanceof BooleanValue) {\n    return val.value ? \"true\" : \"false\";\n  } else if (val instanceof ObjectValue) {\n    let primValue = ToPrimitive(realm, val, \"string\");\n    return ToString(realm, primValue);\n  } else {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"unknown value type, can't coerce to string\");\n  }\n}\n\nexport function ToStringPartial(realm: Realm, val: string | Value): string {\n  return ToString(realm, typeof val === \"string\" ? val : val.throwIfNotConcrete());\n}\n\nexport function ToStringValue(realm: Realm, val: Value): Value {\n  if (val.getType() === StringValue) return val;\n  let str;\n  if (typeof val === \"string\") {\n    str = val;\n  } else if (val instanceof NumberValue) {\n    str = val.value + \"\";\n  } else if (val instanceof UndefinedValue) {\n    str = \"undefined\";\n  } else if (val instanceof NullValue) {\n    str = \"null\";\n  } else if (val instanceof SymbolValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  } else if (val instanceof BooleanValue) {\n    str = val.value ? \"true\" : \"false\";\n  } else if (val instanceof ObjectValue) {\n    let primValue = ToPrimitiveOrAbstract(realm, val, \"string\");\n    if (primValue.getType() === StringValue) return primValue;\n    str = ToStringPartial(realm, primValue);\n  } else {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"unknown value type, can't coerce to string\");\n  }\n  return new StringValue(realm, str);\n}\n\n// ECMA262 7.1.2\nexport function ToBoolean(realm: Realm, val: ConcreteValue): boolean {\n  if (val instanceof BooleanValue) {\n    return val.value;\n  } else if (val instanceof UndefinedValue) {\n    return false;\n  } else if (val instanceof NullValue) {\n    return false;\n  } else if (val instanceof NumberValue) {\n    return val.value !== 0 && !isNaN(val.value);\n  } else if (val instanceof StringValue) {\n    return val.value.length > 0;\n  } else if (val instanceof ObjectValue) {\n    return true;\n  } else if (val instanceof SymbolValue) {\n    return true;\n  } else {\n    invariant(!(val instanceof AbstractValue));\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"unknown value type, can't coerce to a boolean\");\n  }\n}\n\nexport function ToBooleanPartial(realm: Realm, val: Value): boolean {\n  if (!val.mightNotBeObject()) return true;\n  return ToBoolean(realm, val.throwIfNotConcrete());\n}\n\n// ECMA262 7.1.14\nexport function ToPropertyKey(realm: Realm, arg: ConcreteValue): SymbolValue | string /* but not StringValue */ {\n  // 1. Let key be ? ToPrimitive(argument, hint String).\n  let key = ToPrimitive(realm, arg, \"string\");\n\n  // 2. If Type(key) is Symbol, then\n  if (key instanceof SymbolValue) {\n    // a. Return key.\n    return key;\n  }\n\n  // 3. Return ! ToString(key).\n  return ToString(realm, key);\n}\n\nexport function ToPropertyKeyPartial(\n  realm: Realm,\n  arg: Value\n): AbstractValue | SymbolValue | string /* but not StringValue */ {\n  if (arg instanceof ConcreteValue) return ToPropertyKey(realm, arg);\n  if (arg.mightNotBeString()) arg.throwIfNotConcrete();\n  invariant(arg instanceof AbstractValue);\n  return arg;\n}\n\n// ECMA262 7.1.16\nexport function CanonicalNumericIndexString(realm: Realm, argument: StringValue): number | void {\n  // 1. Assert: Type(argument) is String.\n  invariant(argument instanceof StringValue);\n\n  // 2. If argument is \"-0\", return −0.\n  if (argument.value === \"-0\") return -0;\n\n  // 3. Let n be ToNumber(argument).\n  let n = ToNumber(realm, argument);\n\n  // 4. If SameValue(ToString(n), argument) is false, return undefined.\n  if (SameValue(realm, new StringValue(realm, ToString(realm, new NumberValue(realm, n))), argument) === false)\n    return undefined;\n\n  // 5. Return n.\n  return n;\n}\n"]}