{"version":3,"sources":["../../src/methods/typedarray.js"],"names":["IntegerIndexedObjectCreate","IntegerIndexedElementGet","IntegerIndexedElementSet","ValidateTypedArray","AllocateTypedArray","AllocateTypedArrayBuffer","TypedArrayCreate","TypedArraySpeciesCreate","ArrayElementSize","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint16Array","Uint32Array","Uint8ClampedArray","ArrayElementType","realm","prototype","internalSlotsList","A","Object","assign","$Prototype","setExtensible","O","index","$ViewedArrayBuffer","$ArrayLength","undefined","$ByteOffset","$TypedArrayName","buffer","createErrorThrowCompletion","intrinsics","TypeError","is","length","offset","arrayTypeName","elementSize","indexedPosition","elementType","value","numValue","throwIfNotConcrete","constructorName","newTarget","defaultProto","proto","obj","$ByteLength","isNewObject","byteLength","data","ArrayBuffer","constructor","argumentList","newTypedArray","mightBeNumber","mightNotBeNumber","reportIntrospectionError","exemplar","defaultConstructor"],"mappings":"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","file":"typedarray.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { TypedArrayKind } from \"../types.js\";\nimport { FatalError } from \"../errors.js\";\nimport {\n  AbstractValue,\n  IntegerIndexedExotic,\n  ObjectValue,\n  Value,\n  NumberValue,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport { GetPrototypeFromConstructor } from \"../methods/get.js\";\nimport { AllocateArrayBuffer } from \"../methods/arraybuffer.js\";\nimport { IsDetachedBuffer, IsInteger } from \"../methods/is.js\";\nimport { GetValueFromBuffer, SetValueInBuffer } from \"../methods/arraybuffer.js\";\nimport { Construct, SpeciesConstructor } from \"../methods/construct.js\";\nimport { ToNumber } from \"../methods/to.js\";\nimport invariant from \"../invariant.js\";\n\nexport const ArrayElementSize = {\n  Float32Array: 4,\n  Float64Array: 8,\n  Int8Array: 1,\n  Int16Array: 2,\n  Int32Array: 4,\n  Uint8Array: 1,\n  Uint16Array: 2,\n  Uint32Array: 4,\n  Uint8ClampedArray: 1,\n};\n\nexport const ArrayElementType = {\n  Float32Array: \"Float32\",\n  Float64Array: \"Float64\",\n  Int8Array: \"Int8\",\n  Int16Array: \"Int16\",\n  Int32Array: \"Int32\",\n  Uint8Array: \"Uint8\",\n  Uint16Array: \"Uint16\",\n  Uint32Array: \"Uint32\",\n  Uint8ClampedArray: \"Uint8Clamped\",\n};\n\n// ECMA262 9.4.5.7\nexport function IntegerIndexedObjectCreate(\n  realm: Realm,\n  prototype: ObjectValue,\n  internalSlotsList: { [key: string]: void }\n): ObjectValue {\n  // 1. Assert: internalSlotsList contains the names [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]].\n  invariant(\n    \"$ViewedArrayBuffer\" in internalSlotsList &&\n      \"$ArrayLength\" in internalSlotsList &&\n      \"$ByteOffset\" in internalSlotsList &&\n      \"$TypedArrayName\" in internalSlotsList\n  );\n\n  // 2. Let A be a newly created object with an internal slot for each name in internalSlotsList.\n  let A = new IntegerIndexedExotic(realm);\n  Object.assign(A, internalSlotsList);\n\n  // 3. Set A's essential internal methods to the default ordinary object definitions specified in 9.1.\n  // 4. Set the [[GetOwnProperty]] internal method of A as specified in 9.4.5.1.\n  // 5. Set the [[HasProperty]] internal method of A as specified in 9.4.5.2.\n  // 6. Set the [[DefineOwnProperty]] internal method of A as specified in 9.4.5.3.\n  // 7. Set the [[Get]] internal method of A as specified in 9.4.5.4.\n  // 8. Set the [[Set]] internal method of A as specified in 9.4.5.5.\n  // 9. Set the [[OwnPropertyKeys]] internal method of A as specified in 9.4.5.6.\n\n  // 10. Set A.[[Prototype]] to prototype.\n  A.$Prototype = prototype;\n\n  // 11. Set A.[[Extensible]] to true.\n  A.setExtensible(true);\n\n  // 12. Return A.\n  return A;\n}\n\n// ECMA262 9.4.5.8\nexport function IntegerIndexedElementGet(realm: Realm, O: ObjectValue, index: number): NumberValue | UndefinedValue {\n  // 1. Assert: Type(index) is Number.\n  invariant(typeof index === \"number\", \"Type(index) is Number\");\n\n  // 2. Assert: O is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.\n  invariant(\n    O instanceof ObjectValue &&\n      O.$ViewedArrayBuffer &&\n      O.$ArrayLength !== undefined &&\n      O.$ByteOffset !== undefined &&\n      O.$TypedArrayName\n  );\n\n  // 3. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n\n  // 4. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 5. If IsInteger(index) is false, return undefined.\n  if (IsInteger(realm, index) === false) return realm.intrinsics.undefined;\n\n  // 6. If index = -0, return undefined.\n  if (Object.is(index, -0)) return realm.intrinsics.undefined;\n\n  // 7. Let length be O.[[ArrayLength]].\n  let length = O.$ArrayLength;\n  invariant(typeof length === \"number\");\n\n  // 8. If index < 0 or index ≥ length, return undefined.\n  if (index < 0 || index >= length) return realm.intrinsics.undefined;\n\n  // 9. Let offset be O.[[ByteOffset]].\n  let offset = O.$ByteOffset;\n  invariant(typeof offset === \"number\");\n\n  // 10. Let arrayTypeName be the String value of O.[[TypedArrayName]].\n  let arrayTypeName = O.$TypedArrayName;\n  invariant(typeof arrayTypeName === \"string\");\n\n  // 11. Let elementSize be the Number value of the Element Size value specified in Table 50 for arrayTypeName.\n  let elementSize = ArrayElementSize[arrayTypeName];\n\n  // 12. Let indexedPosition be (index × elementSize) + offset.\n  let indexedPosition = index * elementSize + offset;\n\n  // 13. Let elementType be the String value of the Element Type value in Table 50 for arrayTypeName.\n  let elementType = ArrayElementType[arrayTypeName];\n\n  // 14. Return GetValueFromBuffer(buffer, indexedPosition, elementType).\n  return GetValueFromBuffer(realm, buffer, indexedPosition, elementType);\n}\n\n// ECMA262 9.4.5.9\nexport function IntegerIndexedElementSet(realm: Realm, O: ObjectValue, index: number, value: Value): boolean {\n  // 1. Assert: Type(index) is Number.\n  invariant(typeof index === \"number\", \"Type(index) is Number\");\n\n  // 2. Assert: O is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.\n  invariant(\n    O instanceof ObjectValue &&\n      O.$ViewedArrayBuffer &&\n      O.$ArrayLength !== undefined &&\n      O.$ByteOffset !== undefined &&\n      O.$TypedArrayName\n  );\n\n  // 3. Let numValue be ? ToNumber(value).\n  let numValue = ToNumber(realm, value);\n\n  // 4. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n  invariant(buffer);\n\n  // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 6. If IsInteger(index) is false, return false.\n  if (IsInteger(realm, index) === false) return false;\n\n  // 7. If index = -0, return false.\n  if (Object.is(index, -0)) return false;\n\n  // 8. Let length be O.[[ArrayLength]].\n  let length = O.$ArrayLength;\n  invariant(typeof length === \"number\");\n\n  // 9. If index < 0 or index ≥ length, return false.\n  if (index < 0 || index >= length) return false;\n\n  // 10. Let offset be O.[[ByteOffset]].\n  let offset = O.$ByteOffset;\n  invariant(typeof offset === \"number\");\n\n  // 11. Let arrayTypeName be the String value of O.[[TypedArrayName]].\n  let arrayTypeName = O.$TypedArrayName;\n  invariant(typeof arrayTypeName === \"string\");\n\n  // 12. Let elementSize be the Number value of the Element Size value specified in Table 50 for arrayTypeName.\n  let elementSize = ArrayElementSize[arrayTypeName];\n\n  // 13. Let indexedPosition be (index × elementSize) + offset.\n  let indexedPosition = index * elementSize + offset;\n\n  // 14. Let elementType be the String value of the Element Type value in Table 50 for arrayTypeName.\n  let elementType = ArrayElementType[arrayTypeName];\n\n  // 15. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue).\n  SetValueInBuffer(realm, buffer, indexedPosition, elementType, numValue);\n\n  // 16. Return true.\n  return true;\n}\n\n// ECMA262 22.2.3.5.1\nexport function ValidateTypedArray(realm: Realm, O: Value) {\n  O = O.throwIfNotConcrete();\n\n  // 1. If Type(O) is not Object, throw a TypeError exception.\n  if (!(O instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n  }\n\n  // 2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n  if (!O.$TypedArrayName) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n  }\n\n  // 3. Assert: O has a [[ViewedArrayBuffer]] internal slot.\n  invariant(O.$ViewedArrayBuffer, \"O has a [[ViewedArrayBuffer]] internal slot\");\n\n  // 4. Let buffer be O.[[ViewedArrayBuffer]].\n  let buffer = O.$ViewedArrayBuffer;\n\n  // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n  if (IsDetachedBuffer(realm, buffer) === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n  }\n\n  // 6. Return buffer.\n  return buffer;\n}\n\n// ECMA262 22.2.4.2.1\nexport function AllocateTypedArray(\n  realm: Realm,\n  constructorName: TypedArrayKind,\n  newTarget: ObjectValue,\n  defaultProto: string,\n  length?: number\n): ObjectValue {\n  // 1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n  let proto = GetPrototypeFromConstructor(realm, newTarget, defaultProto);\n\n  // 2. Let obj be IntegerIndexedObjectCreate(proto, « [[ViewedArrayBuffer]], [[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).\n  let obj = IntegerIndexedObjectCreate(realm, proto, {\n    $ViewedArrayBuffer: undefined,\n    $TypedArrayName: undefined,\n    $ByteLength: undefined,\n    $ByteOffset: undefined,\n    $ArrayLength: undefined,\n  });\n\n  // 3. Assert: obj.[[ViewedArrayBuffer]] is undefined.\n  invariant(obj.$ViewedArrayBuffer === undefined);\n\n  // 4. Set obj.[[TypedArrayName]] to constructorName.\n  obj.$TypedArrayName = constructorName;\n\n  // 5. If length was not passed, then\n  if (length === undefined) {\n    // a. Set obj.[[ByteLength]] to 0.\n    obj.$ByteLength = 0;\n\n    // b. Set obj.[[ByteOffset]] to 0.\n    obj.$ByteOffset = 0;\n\n    // c. Set obj.[[ArrayLength]] to 0.\n    obj.$ArrayLength = 0;\n  } else {\n    // 6. Else,\n    // a. Perform ? AllocateTypedArrayBuffer(obj, length).\n    AllocateTypedArrayBuffer(realm, obj, length);\n  }\n\n  // 7. Return obj.\n  return obj;\n}\n\n// ECMA262 22.2.4.2.2\nexport function AllocateTypedArrayBuffer(realm: Realm, O: ObjectValue, length: number): ObjectValue {\n  // Note that O is a new object, and we can thus write to internal slots\n  invariant(realm.isNewObject(O));\n\n  // 1. Assert: O is an Object that has a [[ViewedArrayBuffer]] internal slot.\n  invariant(\n    O instanceof ObjectValue && \"$ViewedArrayBuffer\" in O,\n    \"O is an Object that has a [[ViewedArrayBuffer]] internal slot\"\n  );\n\n  // 2. Assert: O.[[ViewedArrayBuffer]] is undefined.\n  invariant(O.$ViewedArrayBuffer === undefined, \"O.[[ViewedArrayBuffer]] is undefined\");\n\n  // 3. Assert: length ≥ 0.\n  invariant(length >= 0, \"length ≥ 0\");\n\n  // 4. Let constructorName be the String value of O.[[TypedArrayName]].\n  let constructorName = O.$TypedArrayName;\n  invariant(constructorName);\n\n  // 5. Let elementSize be the Element Size value in Table 50 for constructorName.\n  let elementSize = ArrayElementSize[constructorName];\n\n  // 6. Let byteLength be elementSize × length.\n  let byteLength = elementSize * length;\n\n  // 7. Let data be ? AllocateArrayBuffer(%ArrayBuffer%, byteLength).\n  let data = AllocateArrayBuffer(realm, realm.intrinsics.ArrayBuffer, byteLength);\n\n  // 8. Set O.[[ViewedArrayBuffer]] to data.\n  O.$ViewedArrayBuffer = data;\n\n  // 9. Set O.[[ByteLength]] to byteLength.\n  O.$ByteLength = byteLength;\n\n  // 10. Set O.[[ByteOffset]] to 0.\n  O.$ByteOffset = 0;\n\n  // 11. Set O.[[ArrayLength]] to length.\n  O.$ArrayLength = length;\n\n  // 12. Return O.\n  return O;\n}\n\n// ECMA262 22.2.4.6\nexport function TypedArrayCreate(realm: Realm, constructor: ObjectValue, argumentList: Array<Value>): ObjectValue {\n  // 1. Let newTypedArray be ? Construct(constructor, argumentList).\n  let newTypedArray = Construct(realm, constructor, argumentList);\n\n  // 2. Perform ? ValidateTypedArray(newTypedArray).\n  ValidateTypedArray(realm, newTypedArray);\n\n  // 3. If argumentList is a List of a single Number, then\n  if (argumentList.length === 1 && argumentList[0].mightBeNumber()) {\n    if (argumentList[0].mightNotBeNumber()) {\n      invariant(argumentList[0] instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(argumentList[0]);\n      throw new FatalError();\n    }\n    // a. If newTypedArray.[[ArrayLength]] < argumentList[0], throw a TypeError exception.\n    invariant(typeof newTypedArray.$ArrayLength === \"number\");\n    if (newTypedArray.$ArrayLength < ((argumentList[0].throwIfNotConcrete(): any): NumberValue).value) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"newTypedArray.[[ArrayLength]] < argumentList[0]\"\n      );\n    }\n  }\n\n  // 4. Return newTypedArray.\n  return newTypedArray;\n}\n\n// ECMA262 22.2.4.7\nexport function TypedArraySpeciesCreate(realm: Realm, exemplar: ObjectValue, argumentList: Array<Value>): ObjectValue {\n  // 1. Assert: exemplar is an Object that has a [[TypedArrayName]] internal slot.\n  invariant(exemplar instanceof ObjectValue && typeof exemplar.$TypedArrayName === \"string\");\n\n  // 2. Let defaultConstructor be the intrinsic object listed in column one of Table 50 for exemplar.[[TypedArrayName]].\n  invariant(typeof exemplar.$TypedArrayName === \"string\");\n  let defaultConstructor = {\n    Float32Array: realm.intrinsics.Float32Array,\n    Float64Array: realm.intrinsics.Float64Array,\n    Int8Array: realm.intrinsics.Int8Array,\n    Int16Array: realm.intrinsics.Int16Array,\n    Int32Array: realm.intrinsics.Int32Array,\n    Uint8Array: realm.intrinsics.Uint8Array,\n    Uint16Array: realm.intrinsics.Uint16Array,\n    Uint32Array: realm.intrinsics.Uint32Array,\n    Uint8ClampedArray: realm.intrinsics.Uint8ClampedArray,\n  }[exemplar.$TypedArrayName];\n\n  // 3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n  let constructor = SpeciesConstructor(realm, exemplar, defaultConstructor);\n\n  // 4. Return ? TypedArrayCreate(constructor, argumentList).\n  return TypedArrayCreate(realm, constructor, argumentList);\n}\n"]}