{"version":3,"sources":["../../src/methods/join.js"],"names":["joinGenerators","realm","joinCondition","generator1","generator2","result","empty","joinArrays","v1","v2","getAbstractValue","e","joinArraysOfValues","joinArrayOfsMapEntries","a1","a2","intrinsics","n","Math","max","length","i","$Key","$Value","key1","val1","key2","val2","undefined","key3","val3","JoinImplementation","c1","c2","getCapturedEffects","stopEffectCaptureAndUndoEffects","joined_effects","joinPossiblyNormalCompletionWithAbruptCompletion","applyEffects","completionOrValue","completion","value","leftCompletion","rightCompletion","resultValue","updatePossiblyNormalCompletionWithValue","composePossiblyNormalCompletions","pnc","c","consequent","alternate","alternateEffects","g","b","p","o","newAlternateEffects","consequentEffects","savedEffects","new_alternate","newConsequentEffects","new_consequent","subsequentEffects","v","composeEffects","updatePossiblyNormalCompletionWithSubsequentEffects","ac","joinEffects","alternate_effects","consequent_effects","joinValuesAsConditional","joinPossiblyNormalCompletionWithValue","joinValueWithPossiblyNormalCompletion","joinAndRemoveNestedReturnCompletions","joinResults","nested_effects","e1","joinEffectsAndPromoteNestedReturnCompletions","e2","currentLocation","r1","r2","r1jr2c","or","createFromLogicalOp","r1jr2a","notR2jc","createFromUnaryOp","r2jr1c","r2jr1a","notR1jc","empty_effects","removeNormalEffects","result1","gen1","bindings1","properties1","createdObj1","result2","gen2","bindings2","properties2","createdObj2","bindings","joinBindings","properties","joinPropertyBindings","createdObjects","Set","forEach","add","generator","reportIntrospectionError","target","expressionLocation","val","joinValues","location","composeGenerators","m1","m2","join","m3","Map","key","map1","get","set","map2","has","joinMaps","Array","isArray","throwIfNotConcrete","condition","createFromConditionalOp","d1","d2","object","descriptor","joinDescriptors","clone_with_abstract_value","d","d3","dc","dcValue","elem0","map","descriptor2","descriptor1"],"mappings":"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","file":"join.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Binding } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport type { Bindings, Effects, EvaluationResult, PropertyBindings, CreatedObjects, Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding } from \"../types.js\";\n\nimport {\n  AbruptCompletion,\n  BreakCompletion,\n  Completion,\n  ContinueCompletion,\n  PossiblyNormalCompletion,\n  JoinedAbruptCompletions,\n  NormalCompletion,\n  ReturnCompletion,\n  ThrowCompletion,\n} from \"../completions.js\";\nimport { Reference } from \"../environment.js\";\nimport { cloneDescriptor, equalDescriptors, IsDataDescriptor, StrictEqualityComparison } from \"../methods/index.js\";\nimport { construct_empty_effects } from \"../realm.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport { AbstractValue, ObjectValue, Value } from \"../values/index.js\";\n\nimport invariant from \"../invariant.js\";\n\nfunction joinGenerators(\n  realm: Realm,\n  joinCondition: AbstractValue,\n  generator1: Generator,\n  generator2: Generator\n): Generator {\n  let result = new Generator(realm);\n  if (!generator1.empty() || !generator2.empty()) {\n    result.joinGenerators(joinCondition, generator1, generator2);\n  }\n  return result;\n}\n\nfunction joinArrays(\n  realm: Realm,\n  v1: void | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n  v2: void | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }> {\n  let e = (v1 && v1[0]) || (v2 && v2[0]);\n  if (e instanceof Value) return joinArraysOfValues(realm, (v1: any), (v2: any), getAbstractValue);\n  else return joinArrayOfsMapEntries(realm, (v1: any), (v2: any), getAbstractValue);\n}\n\nfunction joinArrayOfsMapEntries(\n  realm: Realm,\n  a1: void | Array<{ $Key: void | Value, $Value: void | Value }>,\n  a2: void | Array<{ $Key: void | Value, $Value: void | Value }>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<{ $Key: void | Value, $Value: void | Value }> {\n  let empty = realm.intrinsics.empty;\n  let n = Math.max((a1 && a1.length) || 0, (a2 && a2.length) || 0);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    let { $Key: key1, $Value: val1 } = (a1 && a1[i]) || { $Key: empty, $Value: empty };\n    let { $Key: key2, $Value: val2 } = (a2 && a2[i]) || { $Key: empty, $Value: empty };\n    if (key1 === undefined && key2 === undefined) {\n      result[i] = { $Key: undefined, $Value: undefined };\n    } else {\n      let key3 = getAbstractValue(key1, key2);\n      let val3 = getAbstractValue(val1, val2);\n      result[i] = { $Key: key3, $Value: val3 };\n    }\n  }\n  return result;\n}\n\nfunction joinArraysOfValues(\n  realm: Realm,\n  a1: void | Array<Value>,\n  a2: void | Array<Value>,\n  getAbstractValue: (void | Value, void | Value) => Value\n): Array<Value> {\n  let n = Math.max((a1 && a1.length) || 0, (a2 && a2.length) || 0);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result[i] = getAbstractValue((a1 && a1[i]) || undefined, (a2 && a2[i]) || undefined);\n  }\n  return result;\n}\n\nexport class JoinImplementation {\n  stopEffectCaptureJoinApplyAndReturnCompletion(\n    c1: PossiblyNormalCompletion,\n    c2: AbruptCompletion,\n    realm: Realm\n  ): AbruptCompletion {\n    let e = realm.getCapturedEffects(c1);\n    invariant(e !== undefined);\n    realm.stopEffectCaptureAndUndoEffects(c1);\n    let joined_effects = this.joinPossiblyNormalCompletionWithAbruptCompletion(realm, c1, c2, e);\n    realm.applyEffects(joined_effects);\n    let result = joined_effects[0];\n    invariant(result instanceof AbruptCompletion);\n    return result;\n  }\n\n  unbundleNormalCompletion(\n    completionOrValue: Completion | Value | Reference\n  ): [void | NormalCompletion, Value | Reference] {\n    let completion, value;\n    if (completionOrValue instanceof PossiblyNormalCompletion) {\n      completion = completionOrValue;\n      value = completionOrValue.value;\n    } else {\n      invariant(completionOrValue instanceof Value || completionOrValue instanceof Reference);\n      value = completionOrValue;\n    }\n    return [completion, value];\n  }\n\n  composeNormalCompletions(\n    leftCompletion: void | NormalCompletion,\n    rightCompletion: void | NormalCompletion,\n    resultValue: Value,\n    realm: Realm\n  ): PossiblyNormalCompletion | Value {\n    if (leftCompletion instanceof PossiblyNormalCompletion) {\n      if (rightCompletion instanceof PossiblyNormalCompletion) {\n        this.updatePossiblyNormalCompletionWithValue(realm, rightCompletion, resultValue);\n        return this.composePossiblyNormalCompletions(realm, leftCompletion, rightCompletion);\n      }\n      this.updatePossiblyNormalCompletionWithValue(realm, leftCompletion, resultValue);\n      return leftCompletion;\n    } else if (rightCompletion instanceof PossiblyNormalCompletion) {\n      this.updatePossiblyNormalCompletionWithValue(realm, rightCompletion, resultValue);\n      return rightCompletion;\n    } else {\n      invariant(leftCompletion === undefined && rightCompletion === undefined);\n      return resultValue;\n    }\n  }\n\n  composePossiblyNormalCompletions(\n    realm: Realm,\n    pnc: PossiblyNormalCompletion,\n    c: PossiblyNormalCompletion\n  ): PossiblyNormalCompletion {\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        let [, g, b, p, o] = pnc.alternateEffects;\n        let newAlternateEffects = [c, g, b, p, o];\n        return new PossiblyNormalCompletion(\n          c.value,\n          pnc.joinCondition,\n          pnc.consequent,\n          pnc.consequentEffects,\n          c,\n          newAlternateEffects,\n          pnc.savedEffects\n        );\n      }\n      invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n      let new_alternate = this.composePossiblyNormalCompletions(realm, pnc.alternate, c);\n      let [, g, b, p, o] = pnc.alternateEffects;\n      let newAlternateEffects = [new_alternate, g, b, p, o];\n      return new PossiblyNormalCompletion(\n        new_alternate.value,\n        pnc.joinCondition,\n        pnc.consequent,\n        pnc.consequentEffects,\n        new_alternate,\n        newAlternateEffects,\n        pnc.savedEffects\n      );\n    } else {\n      invariant(pnc.alternate instanceof AbruptCompletion);\n      if (pnc.consequent instanceof Value) {\n        let [, g, b, p, o] = pnc.consequentEffects;\n        let newConsequentEffects = [c, g, b, p, o];\n        return new PossiblyNormalCompletion(\n          c.value,\n          pnc.joinCondition,\n          c,\n          newConsequentEffects,\n          pnc.alternate,\n          pnc.alternateEffects,\n          pnc.savedEffects\n        );\n      }\n      invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n      let new_consequent = this.composePossiblyNormalCompletions(realm, pnc.consequent, c);\n      let [, g, b, p, o] = pnc.consequentEffects;\n      let newConsequentEffects = [new_consequent, g, b, p, o];\n      return new PossiblyNormalCompletion(\n        new_consequent.value,\n        pnc.joinCondition,\n        new_consequent,\n        newConsequentEffects,\n        pnc.alternate,\n        pnc.alternateEffects,\n        pnc.savedEffects\n      );\n    }\n  }\n\n  updatePossiblyNormalCompletionWithSubsequentEffects(\n    realm: Realm,\n    pnc: PossiblyNormalCompletion,\n    subsequentEffects: Effects\n  ) {\n    let v = subsequentEffects[0];\n    invariant(v instanceof Value);\n    pnc.value = v;\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        pnc.alternate = v;\n        pnc.alternateEffects = realm.composeEffects(pnc.alternateEffects, subsequentEffects);\n      } else {\n        invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n        this.updatePossiblyNormalCompletionWithSubsequentEffects(realm, pnc.alternate, subsequentEffects);\n      }\n    } else {\n      if (pnc.consequent instanceof Value) {\n        pnc.consequent = v;\n        pnc.consequentEffects = realm.composeEffects(pnc.consequentEffects, subsequentEffects);\n      } else {\n        invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n        this.updatePossiblyNormalCompletionWithSubsequentEffects(realm, pnc.consequent, subsequentEffects);\n      }\n    }\n  }\n\n  updatePossiblyNormalCompletionWithValue(realm: Realm, pnc: PossiblyNormalCompletion, v: Value) {\n    pnc.value = v;\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        pnc.alternate = v;\n        pnc.alternateEffects[0] = v;\n      } else {\n        invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n        this.updatePossiblyNormalCompletionWithValue(realm, pnc.alternate, v);\n      }\n    } else {\n      if (pnc.consequent instanceof Value) {\n        pnc.consequent = v;\n        pnc.consequentEffects[0] = v;\n      } else {\n        invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n        this.updatePossiblyNormalCompletionWithValue(realm, pnc.consequent, v);\n      }\n    }\n  }\n\n  // Returns the joined effects of all of the paths in pnc.\n  // The normal path in pnc is modified to become terminated by ac,\n  // so the overall completion will always be an instance of JoinedAbruptCompletions\n  joinPossiblyNormalCompletionWithAbruptCompletion(\n    realm: Realm,\n    // a forked path with a non abrupt (normal) component\n    pnc: PossiblyNormalCompletion,\n    // an abrupt completion that completes the normal path\n    ac: AbruptCompletion,\n    // effects collected after pnc was constructed\n    e: Effects\n  ): Effects {\n    // set up e with ac as the completion. It's OK to do this repeatedly since ac is not changed by recursive calls.\n    e[0] = ac;\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        return this.joinEffects(\n          realm,\n          pnc.joinCondition,\n          pnc.consequentEffects,\n          realm.composeEffects(pnc.alternateEffects, e)\n        );\n      }\n      invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n      let alternate_effects = this.joinPossiblyNormalCompletionWithAbruptCompletion(realm, pnc.alternate, ac, e);\n      invariant(pnc.consequent instanceof AbruptCompletion);\n      return this.joinEffects(realm, pnc.joinCondition, pnc.consequentEffects, alternate_effects);\n    } else {\n      invariant(pnc.alternate instanceof AbruptCompletion);\n      if (pnc.consequent instanceof Value) {\n        return this.joinEffects(\n          realm,\n          pnc.joinCondition,\n          realm.composeEffects(pnc.consequentEffects, e),\n          pnc.alternateEffects\n        );\n      }\n      invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n      let consequent_effects = this.joinPossiblyNormalCompletionWithAbruptCompletion(realm, pnc.consequent, ac, e);\n      invariant(pnc.alternate instanceof AbruptCompletion);\n      return this.joinEffects(realm, pnc.joinCondition, consequent_effects, pnc.alternateEffects);\n    }\n  }\n\n  joinPossiblyNormalCompletionWithValue(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    pnc: PossiblyNormalCompletion,\n    v: Value\n  ) {\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        pnc.alternate = this.joinValuesAsConditional(realm, joinCondition, pnc.alternate, v);\n      } else {\n        invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n        this.joinPossiblyNormalCompletionWithValue(realm, joinCondition, pnc.alternate, v);\n      }\n    } else {\n      if (pnc.consequent instanceof Value) {\n        pnc.consequent = this.joinValuesAsConditional(realm, joinCondition, pnc.consequent, v);\n      } else {\n        invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n        this.joinPossiblyNormalCompletionWithValue(realm, joinCondition, pnc.consequent, v);\n      }\n    }\n  }\n\n  joinValueWithPossiblyNormalCompletion(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    pnc: PossiblyNormalCompletion,\n    v: Value\n  ) {\n    if (pnc.consequent instanceof AbruptCompletion) {\n      if (pnc.alternate instanceof Value) {\n        pnc.alternate = this.joinValuesAsConditional(realm, joinCondition, v, pnc.alternate);\n      } else {\n        invariant(pnc.alternate instanceof PossiblyNormalCompletion);\n        this.joinValueWithPossiblyNormalCompletion(realm, joinCondition, pnc.alternate, v);\n      }\n    } else {\n      if (pnc.consequent instanceof Value) {\n        pnc.consequent = this.joinValuesAsConditional(realm, joinCondition, v, pnc.consequent);\n      } else {\n        invariant(pnc.consequent instanceof PossiblyNormalCompletion);\n        this.joinValueWithPossiblyNormalCompletion(realm, joinCondition, pnc.consequent, v);\n      }\n    }\n  }\n\n  joinAndRemoveNestedReturnCompletions(\n    realm: Realm,\n    c: AbruptCompletion\n  ): AbruptCompletion | PossiblyNormalCompletion | Value {\n    if (c instanceof ReturnCompletion) {\n      return c.value;\n    }\n    if (c instanceof JoinedAbruptCompletions) {\n      let c1 = this.joinAndRemoveNestedReturnCompletions(realm, c.consequent);\n      let c2 = this.joinAndRemoveNestedReturnCompletions(realm, c.alternate);\n      c.consequentEffects[0] = c1;\n      c.alternateEffects[0] = c2;\n      return this.joinResults(realm, c.joinCondition, c1, c2, c.consequentEffects, c.alternateEffects);\n    }\n    return c;\n  }\n\n  joinEffectsAndPromoteNestedReturnCompletions(\n    realm: Realm,\n    c: Completion | Value,\n    e: Effects,\n    nested_effects?: Effects\n  ): Effects {\n    if (c instanceof Value) {\n      // If not undefined, the nested effects were captured when evaluating a conditional code block that ended normally.\n      // e represent effects that were captured since reaching the join point where the normal and abrupt\n      // completions came together into the completion supplied to the outermost call to this recursive function.\n      if (nested_effects !== undefined) e = realm.composeEffects(nested_effects, e);\n      return e;\n    }\n    if (c instanceof AbruptCompletion && !(c instanceof JoinedAbruptCompletions)) {\n      // The nested effects were captured when evaluating a conditional code block that ended abruptly.\n      // An abrupt completion does not care about the effects that were collected since the join point.\n      invariant(nested_effects !== undefined);\n      return nested_effects;\n    }\n    if (c instanceof PossiblyNormalCompletion) {\n      let e1 = this.joinEffectsAndPromoteNestedReturnCompletions(realm, c.consequent, e, c.consequentEffects);\n      let e2 = this.joinEffectsAndPromoteNestedReturnCompletions(realm, c.alternate, e, c.alternateEffects);\n      if (e1[0] instanceof AbruptCompletion) {\n        if (e2[0] instanceof Value) e2[0] = new ReturnCompletion(realm.intrinsics.undefined, realm.currentLocation);\n        return this.joinEffects(realm, c.joinCondition, e1, e2);\n      } else if (e2[0] instanceof AbruptCompletion) {\n        if (e1[0] instanceof Value) e1[0] = new ReturnCompletion(realm.intrinsics.undefined, realm.currentLocation);\n        return this.joinEffects(realm, c.joinCondition, e1, e2);\n      }\n    }\n    invariant(c instanceof JoinedAbruptCompletions);\n    // e will be ignored in the calls below since the branches are all abrupt.\n    let e1 = this.joinEffectsAndPromoteNestedReturnCompletions(realm, c.consequent, e, c.consequentEffects);\n    let e2 = this.joinEffectsAndPromoteNestedReturnCompletions(realm, c.alternate, e, c.alternateEffects);\n    let [r1, r2] = [e1[0], e2[0]];\n    if (r1 instanceof ReturnCompletion) {\n      invariant(!(r2 instanceof ReturnCompletion)); // Otherwise their values should have been joined\n      if (r2 instanceof JoinedAbruptCompletions) {\n        if (r2.consequent instanceof ReturnCompletion) {\n          let r1jr2c = this.joinEffects(realm, c.joinCondition, e1, r2.consequentEffects);\n          invariant(r1jr2c[0] instanceof ReturnCompletion);\n          let or = AbstractValue.createFromLogicalOp(realm, \"||\", c.joinCondition, r2.joinCondition);\n          invariant(or instanceof AbstractValue);\n          return this.joinEffects(realm, or, r1jr2c, r2.alternateEffects);\n        }\n        if (r2.alternate instanceof ReturnCompletion) {\n          let r1jr2a = this.joinEffects(realm, c.joinCondition, e1, r2.alternateEffects);\n          invariant(r1jr2a[0] instanceof ReturnCompletion);\n          let notR2jc = AbstractValue.createFromUnaryOp(realm, \"!\", r2.joinCondition);\n          let or = AbstractValue.createFromLogicalOp(realm, \"||\", c.joinCondition, notR2jc);\n          invariant(or instanceof AbstractValue);\n          return this.joinEffects(realm, or, r1jr2a, r2.consequentEffects);\n        }\n      }\n    } else if (r2 instanceof ReturnCompletion) {\n      invariant(!(r1 instanceof ReturnCompletion)); // Otherwise their values should have been joined\n      if (r1 instanceof JoinedAbruptCompletions) {\n        if (r1.consequent instanceof ReturnCompletion) {\n          let r2jr1c = this.joinEffects(realm, c.joinCondition, r1.consequentEffects, e2);\n          invariant(r2jr1c[0] instanceof ReturnCompletion);\n          let or = AbstractValue.createFromLogicalOp(realm, \"||\", c.joinCondition, r1.joinCondition);\n          invariant(or instanceof AbstractValue);\n          return this.joinEffects(realm, or, r2jr1c, r1.alternateEffects);\n        }\n        if (r1.alternate instanceof ReturnCompletion) {\n          let r2jr1a = this.joinEffects(realm, c.joinCondition, r1.alternateEffects, e2);\n          let notR1jc = AbstractValue.createFromUnaryOp(realm, \"!\", r1.joinCondition);\n          invariant(r2jr1a[0] instanceof ReturnCompletion);\n          let or = AbstractValue.createFromLogicalOp(realm, \"||\", c.joinCondition, notR1jc);\n          invariant(or instanceof AbstractValue);\n          return this.joinEffects(realm, or, r2jr1a, r1.consequentEffects);\n        }\n      }\n    }\n    return this.joinEffects(realm, c.joinCondition, e1, e2);\n  }\n\n  unbundleReturnCompletion(realm: Realm, c: JoinedAbruptCompletions): [Effects, PossiblyNormalCompletion] {\n    let empty_effects = construct_empty_effects(realm);\n    let v = realm.intrinsics.empty;\n    if (c.consequent instanceof ReturnCompletion) {\n      let pnc = new PossiblyNormalCompletion(v, c.joinCondition, v, empty_effects, c.alternate, c.alternateEffects);\n      return [c.consequentEffects, pnc];\n    } else if (c.alternate instanceof ReturnCompletion) {\n      let pnc = new PossiblyNormalCompletion(v, c.joinCondition, c.consequent, c.consequentEffects, v, empty_effects);\n      return [c.alternateEffects, pnc];\n    } else {\n      invariant(false, \"unbundleReturnCompletion needs an argument that contains a non nested return completion\");\n    }\n  }\n\n  removeNormalEffects(realm: Realm, c: PossiblyNormalCompletion): Effects {\n    if (c.consequent instanceof AbruptCompletion) {\n      if (c.alternate instanceof Value) {\n        let result = c.alternateEffects;\n        c.alternateEffects = construct_empty_effects(realm);\n        return result;\n      } else {\n        invariant(c.alternate instanceof PossiblyNormalCompletion);\n        let result = realm.composeEffects(c.alternateEffects, this.removeNormalEffects(realm, c.alternate));\n        c.alternateEffects = construct_empty_effects(realm);\n        return result;\n      }\n    } else {\n      if (c.consequent instanceof Value) {\n        let result = c.consequentEffects;\n        c.consequentEffects = construct_empty_effects(realm);\n        return result;\n      } else {\n        invariant(c.consequent instanceof PossiblyNormalCompletion);\n        let result = realm.composeEffects(c.consequentEffects, this.removeNormalEffects(realm, c.consequent));\n        c.consequentEffects = construct_empty_effects(realm);\n        return result;\n      }\n    }\n  }\n\n  joinEffects(realm: Realm, joinCondition: AbstractValue, e1: Effects, e2: Effects): Effects {\n    let [result1, gen1, bindings1, properties1, createdObj1] = e1;\n    let [result2, gen2, bindings2, properties2, createdObj2] = e2;\n\n    let result = this.joinResults(realm, joinCondition, result1, result2, e1, e2);\n    if (result1 instanceof AbruptCompletion) {\n      if (!(result2 instanceof AbruptCompletion)) {\n        invariant(result instanceof PossiblyNormalCompletion);\n        return [result, gen2, bindings2, properties2, createdObj2];\n      }\n    } else if (result2 instanceof AbruptCompletion) {\n      invariant(result instanceof PossiblyNormalCompletion);\n      return [result, gen1, bindings1, properties1, createdObj1];\n    }\n\n    let bindings = this.joinBindings(realm, joinCondition, bindings1, bindings2);\n    let properties = this.joinPropertyBindings(\n      realm,\n      joinCondition,\n      properties1,\n      properties2,\n      createdObj1,\n      createdObj2\n    );\n    let createdObjects = new Set();\n    createdObj1.forEach(o => {\n      createdObjects.add(o);\n    });\n    createdObj2.forEach(o => {\n      createdObjects.add(o);\n    });\n\n    let generator = joinGenerators(realm, joinCondition, gen1, gen2);\n\n    return [result, generator, bindings, properties, createdObjects];\n  }\n\n  joinResults(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    result1: EvaluationResult,\n    result2: EvaluationResult,\n    e1: Effects,\n    e2: Effects\n  ): AbruptCompletion | PossiblyNormalCompletion | Value {\n    let getAbstractValue = (v1: void | Value, v2: void | Value) => {\n      return this.joinValuesAsConditional(realm, joinCondition, v1, v2);\n    };\n    if (result1 instanceof Reference || result2 instanceof Reference) {\n      AbstractValue.reportIntrospectionError(joinCondition);\n      throw new FatalError();\n    }\n    if (result1 instanceof BreakCompletion && result2 instanceof BreakCompletion && result1.target === result2.target) {\n      return new BreakCompletion(realm.intrinsics.empty, joinCondition.expressionLocation, result1.target);\n    }\n    if (\n      result1 instanceof ContinueCompletion &&\n      result2 instanceof ContinueCompletion &&\n      result1.target === result2.target\n    ) {\n      return new ContinueCompletion(realm.intrinsics.empty, joinCondition.expressionLocation, result1.target);\n    }\n    if (result1 instanceof ReturnCompletion && result2 instanceof ReturnCompletion) {\n      let val = this.joinValues(realm, result1.value, result2.value, getAbstractValue);\n      invariant(val instanceof Value);\n      return new ReturnCompletion(val, joinCondition.expressionLocation);\n    }\n    if (result1 instanceof ThrowCompletion && result2 instanceof ThrowCompletion) {\n      let val = this.joinValues(realm, result1.value, result2.value, getAbstractValue);\n      invariant(val instanceof Value);\n      return new ThrowCompletion(val, result1.location);\n    }\n    if (result1 instanceof AbruptCompletion && result2 instanceof AbruptCompletion) {\n      return new JoinedAbruptCompletions(realm, joinCondition, result1, e1, result2, e2);\n    }\n    if (result1 instanceof Value && result2 instanceof Value) {\n      let val = this.joinValues(realm, result1, result2, getAbstractValue);\n      invariant(val instanceof Value);\n      return val;\n    }\n    if (result1 instanceof PossiblyNormalCompletion && result2 instanceof PossiblyNormalCompletion) {\n      return this.composePossiblyNormalCompletions(realm, result1, result2);\n    }\n    if (result1 instanceof AbruptCompletion) {\n      let value = result2;\n      let savedEffects;\n      if (result2 instanceof PossiblyNormalCompletion) {\n        value = result2.value;\n        savedEffects = result2.savedEffects;\n      }\n      invariant(value instanceof Value);\n      return new PossiblyNormalCompletion(value, joinCondition, result1, e1, result2, e2, savedEffects);\n    }\n    if (result2 instanceof AbruptCompletion) {\n      let value = result1;\n      let savedEffects;\n      if (result1 instanceof PossiblyNormalCompletion) {\n        value = result1.value;\n        savedEffects = result1.savedEffects;\n      }\n      invariant(value instanceof Value);\n      return new PossiblyNormalCompletion(value, joinCondition, result1, e1, result2, e2, savedEffects);\n    }\n    if (result1 instanceof PossiblyNormalCompletion) {\n      invariant(result2 instanceof Value);\n      this.joinPossiblyNormalCompletionWithValue(realm, joinCondition, result1, result2);\n      return result1;\n    }\n    if (result2 instanceof PossiblyNormalCompletion) {\n      invariant(result1 instanceof Value);\n      this.joinValueWithPossiblyNormalCompletion(realm, joinCondition, result2, result1);\n      return result2;\n    }\n    invariant(false);\n  }\n\n  composeGenerators(realm: Realm, generator1: Generator, generator2: Generator): Generator {\n    let result = new Generator(realm);\n    if (!generator1.empty() || !generator2.empty()) {\n      result.composeGenerators(generator1, generator2);\n    }\n    return result;\n  }\n\n  // Creates a single map that joins together maps m1 and m2 using the given join\n  // operator. If an entry is present in one map but not the other, the missing\n  // entry is treated as if it were there and its value were undefined.\n  joinMaps<K, V>(m1: Map<K, void | V>, m2: Map<K, void | V>, join: (K, void | V, void | V) => V): Map<K, void | V> {\n    let m3: Map<K, void | V> = new Map();\n    m1.forEach((val1, key, map1) => {\n      let val2 = m2.get(key);\n      let val3 = join(key, val1, val2);\n      m3.set(key, val3);\n    });\n    m2.forEach((val2, key, map2) => {\n      if (!m1.has(key)) {\n        m3.set(key, join(key, undefined, val2));\n      }\n    });\n    return m3;\n  }\n\n  // Creates a single map that has an key, value pair for the union of the key\n  // sets of m1 and m2. The value of a pair is the join of m1[key] and m2[key]\n  // where the join is defined to be just m1[key] if m1[key] === m2[key] and\n  // and abstract value with expression \"joinCondition ? m1[key] : m2[key]\" if not.\n  joinBindings(realm: Realm, joinCondition: AbstractValue, m1: Bindings, m2: Bindings): Bindings {\n    let getAbstractValue = (v1: void | Value, v2: void | Value) => {\n      return this.joinValuesAsConditional(realm, joinCondition, v1, v2);\n    };\n    let join = (b: Binding, v1: void | Value, v2: void | Value) => {\n      if (v1 === undefined) v1 = b.value;\n      if (v2 === undefined) v2 = b.value;\n      let result = this.joinValues(realm, v1, v2, getAbstractValue);\n      invariant(result instanceof Value);\n      return result;\n    };\n    return this.joinMaps(m1, m2, join);\n  }\n\n  // If v1 is known and defined and v1 === v2 return v1,\n  // otherwise return getAbstractValue(v1, v2)\n  joinValues(\n    realm: Realm,\n    v1: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n    v2: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>,\n    getAbstractValue: (void | Value, void | Value) => Value\n  ): Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }> {\n    if (Array.isArray(v1) || Array.isArray(v2)) {\n      invariant(v1 === undefined || Array.isArray(v1));\n      invariant(v2 === undefined || Array.isArray(v2));\n      return joinArrays(realm, ((v1: any): void | Array<Value>), ((v2: any): void | Array<Value>), getAbstractValue);\n    }\n    invariant(v1 === undefined || v1 instanceof Value);\n    invariant(v2 === undefined || v2 instanceof Value);\n    if (\n      v1 !== undefined &&\n      v2 !== undefined &&\n      !(v1 instanceof AbstractValue) &&\n      !(v2 instanceof AbstractValue) &&\n      StrictEqualityComparison(realm, v1.throwIfNotConcrete(), v2.throwIfNotConcrete())\n    ) {\n      return v1;\n    } else {\n      return getAbstractValue(v1, v2);\n    }\n  }\n\n  joinValuesAsConditional(realm: Realm, condition: AbstractValue, v1: void | Value, v2: void | Value): Value {\n    return AbstractValue.createFromConditionalOp(realm, condition, v1, v2);\n  }\n\n  joinPropertyBindings(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    m1: PropertyBindings,\n    m2: PropertyBindings,\n    c1: CreatedObjects,\n    c2: CreatedObjects\n  ): PropertyBindings {\n    let join = (b: PropertyBinding, d1: void | Descriptor, d2: void | Descriptor) => {\n      // If the PropertyBinding object has been freshly allocated do not join\n      if (d1 === undefined) {\n        if (b.object instanceof ObjectValue && c2.has(b.object)) return d2; // no join\n        if (b.descriptor !== undefined && m1.has(b)) {\n          // property was deleted\n          d1 = cloneDescriptor(b.descriptor);\n          invariant(d1 !== undefined);\n          d1.value = realm.intrinsics.empty;\n        } else {\n          // no write to property\n          d1 = b.descriptor; //Get value of property before the split\n        }\n      }\n      if (d2 === undefined) {\n        if (b.object instanceof ObjectValue && c1.has(b.object)) return d1; // no join\n        if (b.descriptor !== undefined && m2.has(b)) {\n          // property was deleted\n          d2 = cloneDescriptor(b.descriptor);\n          invariant(d2 !== undefined);\n          d2.value = realm.intrinsics.empty;\n        } else {\n          // no write to property\n          d2 = b.descriptor; //Get value of property before the split\n        }\n      }\n      return this.joinDescriptors(realm, joinCondition, d1, d2);\n    };\n    return this.joinMaps(m1, m2, join);\n  }\n\n  // Returns a field by field join of two descriptors.\n  // Descriptors with get/set are not yet supported.\n  joinDescriptors(\n    realm: Realm,\n    joinCondition: AbstractValue,\n    d1: void | Descriptor,\n    d2: void | Descriptor\n  ): void | Descriptor {\n    let getAbstractValue = (v1: void | Value, v2: void | Value) => {\n      return this.joinValuesAsConditional(realm, joinCondition, v1, v2);\n    };\n    let clone_with_abstract_value = (d: Descriptor) => {\n      if (!IsDataDescriptor(realm, d)) {\n        let d3: Descriptor = {};\n        d3.joinCondition = joinCondition;\n        return d3;\n      }\n      let dc = cloneDescriptor(d);\n      invariant(dc !== undefined);\n      let dcValue = dc.value;\n      if (Array.isArray(dcValue)) {\n        invariant(dcValue.length > 0);\n        let elem0 = dcValue[0];\n        if (elem0 instanceof Value) {\n          dc.value = dcValue.map(e => getAbstractValue((e: any), realm.intrinsics.empty));\n        } else {\n          dc.value = dcValue.map(e => {\n            let { $Key: key1, $Value: val1 } = (e: any);\n            let key3 = getAbstractValue(key1, realm.intrinsics.empty);\n            let val3 = getAbstractValue(val1, realm.intrinsics.empty);\n            return { $Key: key3, $Value: val3 };\n          });\n        }\n      } else {\n        invariant(dcValue === undefined || dcValue instanceof Value);\n        dc.value = getAbstractValue(dcValue, realm.intrinsics.empty);\n      }\n      return dc;\n    };\n    if (d1 === undefined) {\n      if (d2 === undefined) return undefined;\n      // d2 is a new property created in only one branch, join with empty\n      let d3 = clone_with_abstract_value(d2);\n      if (!IsDataDescriptor(realm, d2)) d3.descriptor2 = d2;\n      return d3;\n    } else if (d2 === undefined) {\n      invariant(d1 !== undefined);\n      // d1 is a new property created in only one branch, join with empty\n      let d3 = clone_with_abstract_value(d1);\n      if (!IsDataDescriptor(realm, d1)) d3.descriptor1 = d1;\n      return d3;\n    } else {\n      if (equalDescriptors(d1, d2) && IsDataDescriptor(realm, d1)) {\n        let dc = cloneDescriptor(d1);\n        invariant(dc !== undefined);\n        dc.value = this.joinValues(realm, d1.value, d2.value, getAbstractValue);\n        return dc;\n      }\n      let d3: Descriptor = {};\n      d3.joinCondition = joinCondition;\n      d3.descriptor1 = d1;\n      d3.descriptor2 = d2;\n      return d3;\n    }\n  }\n}\n"]}