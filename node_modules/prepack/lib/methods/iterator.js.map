{"version":3,"sources":["../../src/methods/iterator.js"],"names":["GetIterator","IteratorStep","IteratorValue","IteratorComplete","IteratorNext","CreateListIterator","CreateMapIterator","CreateSetIterator","IteratorClose","IterableToList","realm","obj","intrinsics","undefined","method","SymbolIterator","iterator","createErrorThrowCompletion","TypeError","result","done","iterResult","value","list","IteratorPrototype","$IteratorNext","$IteratedList","$ListIteratorNextIndex","next","ListIterator_next","func","context","O","f","index","len","length","map","kind","$MapData","MapIteratorPrototype","$Map","$MapNextIndex","$MapIterationKind","set","$SetData","SetIteratorPrototype","$IteratedSet","$SetNextIndex","$SetIterationKind","completion","ret","innerResult","throwIfNotConcrete","error","items","values","nextValue","push"],"mappings":"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","file":"iterator.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { CallableObjectValue } from \"../types.js\";\nimport { Completion, AbruptCompletion, ThrowCompletion } from \"../completions.js\";\nimport { NativeFunctionValue, NumberValue, ObjectValue, StringValue, UndefinedValue, Value } from \"../values/index.js\";\nimport { Call, Get, GetMethod, Invoke, ObjectCreate, ToBooleanPartial } from \"./index.js\";\nimport invariant from \"../invariant.js\";\nimport type { IterationKind } from \"../types.js\";\nimport { SameValue } from \"./abstract.js\";\nimport { CreateMethodProperty, CreateIterResultObject } from \"./create.js\";\n\n// ECMA262 7.4.1\nexport function GetIterator(realm: Realm, obj: Value = realm.intrinsics.undefined, method?: Value): ObjectValue {\n  // 1. If method was not passed, then\n  if (!method) {\n    // a. Let method be ? GetMethod(obj, @@iterator).\n    method = GetMethod(realm, obj, realm.intrinsics.SymbolIterator);\n  }\n\n  // 2. Let iterator be ? Call(method, obj).\n  let iterator = Call(realm, method, obj);\n\n  // 3. If Type(iterator) is not Object, throw a TypeError exception.\n  if (!(iterator instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.5\nexport function IteratorStep(realm: Realm, iterator: Value): false | ObjectValue {\n  // 1. Let result be ? IteratorNext(iterator).\n  let result = IteratorNext(realm, iterator);\n\n  // 2. Let done be ? IteratorComplete(result).\n  let done = IteratorComplete(realm, result);\n\n  // 3. If done is true, return false.\n  if (done) return false;\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.4\nexport function IteratorValue(realm: Realm, iterResult: ObjectValue): Value {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ? Get(iterResult, \"value\").\n  return Get(realm, iterResult, \"value\");\n}\n\n// ECMA262 7.4.2\nexport function IteratorComplete(realm: Realm, iterResult: ObjectValue): boolean {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ToBoolean(? Get(iterResult, \"done\")).\n  return ToBooleanPartial(realm, Get(realm, iterResult, \"done\"));\n}\n\n// ECMA262 7.4.2\nexport function IteratorNext(realm: Realm, iterator: Value, value?: Value): ObjectValue {\n  // 1. If value was not passed, then\n  let result;\n  if (!value) {\n    // a. Let result be ? Invoke(iterator, \"next\", « »).\n    result = Invoke(realm, iterator, \"next\", []);\n  } else {\n    // 2. Else,\n    // a. Let result be ? Invoke(iterator, \"next\", « value »).\n    result = Invoke(realm, iterator, \"next\", [value]);\n  }\n\n  // 3. If Type(result) is not Object, throw a TypeError exception.\n  if (!(result instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.8\nexport function CreateListIterator(realm: Realm, list: Array<Value>): ObjectValue {\n  // 1. Let iterator be ObjectCreate(%IteratorPrototype%, « [[IteratorNext]], [[IteratedList]], [[ListIteratorNextIndex]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.IteratorPrototype, {\n    $IteratorNext: undefined,\n    $IteratedList: undefined,\n    $ListIteratorNextIndex: undefined,\n  });\n\n  // 2. Set iterator's [[IteratedList]] internal slot to list.\n  iterator.$IteratedList = list;\n\n  // 3. Set iterator's [[ListIteratorNextIndex]] internal slot to 0.\n  iterator.$ListIteratorNextIndex = 0;\n\n  // 4. Let next be a new built-in function object as defined in ListIterator next (7.4.8.1).\n  let next = ListIterator_next(realm);\n\n  // 5. Set iterator's [[IteratorNext]] internal slot to next.\n  iterator.$IteratorNext = next;\n\n  // 6. Perform CreateMethodProperty(iterator, \"next\", next).\n  CreateMethodProperty(realm, iterator, new StringValue(realm, \"next\"), next);\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.8.1\nfunction ListIterator_next(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, undefined, \"next\", 0, context => {\n    invariant(context instanceof ObjectValue);\n\n    // 1. Let O be the this value.\n    let O = context;\n\n    // 2. Let f be the active function object.\n    let f = func;\n\n    // 3. If O does not have a [[IteratorNext]] internal slot, throw a TypeError exception.\n    if (!O.$IteratorNext) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratorNext]] internal slot\"\n      );\n    }\n\n    // 4. Let next be the value of the [[IteratorNext]] internal slot of O.\n    let next = O.$IteratorNext;\n\n    // 5. If SameValue(f, next) is false, throw a TypeError exception.\n    if (!SameValue(realm, f, next)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. If O does not have an [[IteratedList]] internal slot, throw a TypeError exception.\n    if (!O.$IteratedList) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratedList]] internal slot\"\n      );\n    }\n\n    // 7. Let list be the value of the [[IteratedList]] internal slot of O.\n    let list = O.$IteratedList;\n\n    invariant(typeof O.$ListIteratorNextIndex === \"number\");\n\n    // 8. Let index be the value of the [[ListIteratorNextIndex]] internal slot of O.\n    // Default to 0 for Flow.\n    let index = O.$ListIteratorNextIndex;\n\n    // 9. Let len be the number of elements of list.\n    let len = list.length;\n\n    // 10. If index ≥ len, then\n    if (index >= len) {\n      // a. Return CreateIterResultObject(undefined, true).\n      return CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 11. Set the value of the [[ListIteratorNextIndex]] internal slot of O to index+1.\n    O.$ListIteratorNextIndex = index + 1;\n\n    // 12. Return CreateIterResultObject(list[index], false).\n    return CreateIterResultObject(realm, list[index], false);\n  });\n\n  return func;\n}\n\n// ECMA262 23.1.5.1\nexport function CreateMapIterator(realm: Realm, map: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(map) is not Object, throw a TypeError exception.\n  if (!(map instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If map does not have a [[MapData]] internal slot, throw a TypeError exception.\n  if (!map.$MapData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%MapIteratorPrototype%, « [[Map]], [[MapNextIndex]], [[MapIterationKind]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.MapIteratorPrototype, {\n    $Map: undefined,\n    $MapNextIndex: undefined,\n    $MapIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[Map]] internal slot to map.\n  iterator.$Map = map;\n\n  // 5. Set iterator's [[MapNextIndex]] internal slot to 0.\n  iterator.$MapNextIndex = new NumberValue(realm, 0);\n\n  // 6. Set iterator's [[MapIterationKind]] internal slot to kind.\n  iterator.$MapIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 23.2.5.1\nexport function CreateSetIterator(realm: Realm, set: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(set) is not Object, throw a TypeError exception.\n  if (!(set instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If set does not have a [[SetData]] internal slot, throw a TypeError exception.\n  if (!set.$SetData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%SetIteratorPrototype%, « [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.SetIteratorPrototype, {\n    $IteratedSet: undefined,\n    $SetNextIndex: undefined,\n    $SetIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[IteratedSet]] internal slot to set.\n  iterator.$IteratedSet = set;\n\n  // 5. Set iterator's [[SetNextIndex]] internal slot to 0.\n  iterator.$SetNextIndex = 0;\n\n  // 6. Set iterator's [[SetIterationKind]] internal slot to kind.\n  iterator.$SetIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.6\nexport function IteratorClose(realm: Realm, iterator: ObjectValue, completion: Completion): Completion {\n  // 1. Assert: Type(iterator) is Object.\n  invariant(iterator instanceof ObjectValue, \"expected object\");\n\n  // 2. Assert: completion is a Completion Record.\n  invariant(completion instanceof Completion, \"expected completion record\");\n\n  // 3. Let return be ? GetMethod(iterator, \"return\").\n  let ret = GetMethod(realm, iterator, \"return\");\n\n  // 4. If return is undefined, return Completion(completion).\n  if (ret instanceof UndefinedValue) return completion;\n\n  // 5. Let innerResult be Call(return, iterator, « »).\n  let innerResult;\n  try {\n    innerResult = Call(realm, ret.throwIfNotConcrete(), iterator, []);\n  } catch (error) {\n    if (error instanceof AbruptCompletion) {\n      innerResult = error;\n    } else {\n      throw error;\n    }\n  }\n\n  // 6. If completion.[[Type]] is throw, return Completion(completion).\n  if (completion instanceof ThrowCompletion) return completion;\n\n  // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n  if (innerResult instanceof ThrowCompletion) return innerResult;\n\n  // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n  if (!(innerResult instanceof ObjectValue)) {\n    return realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 9. Return Completion(completion).\n  return completion;\n}\n\n// ECMA262 22.2.2.1.1\nexport function IterableToList(realm: Realm, items: Value, method: CallableObjectValue): Array<Value> {\n  // 1. Let iterator be ? GetIterator(items, method).\n  let iterator = GetIterator(realm, items, method);\n\n  // 2. Let values be a new empty List.\n  let values = [];\n\n  // 3. Let next be true.\n  let next = true;\n\n  // 4. Repeat, while next is not false\n  while (next !== false) {\n    // a. Let next be ? IteratorStep(iterator).\n    next = IteratorStep(realm, iterator);\n\n    // b. If next is not false, then\n    if (next !== false) {\n      // i. Let nextValue be ? IteratorValue(next).\n      let nextValue = IteratorValue(realm, next);\n\n      // ii. Append nextValue to the end of the List values.\n      values.push(nextValue);\n    }\n  }\n\n  // 5. Return values.\n  return values;\n}\n"]}