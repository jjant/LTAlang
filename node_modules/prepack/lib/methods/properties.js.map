{"version":3,"sources":["../../src/methods/properties.js"],"names":["t","InternalDescriptorPropertyToValue","realm","value","undefined","intrinsics","InternalGetPropertiesKey","P","InternalGetPropertiesMap","O","properties","symbols","InternalSetProperty","desc","map","key","propertyBinding","get","descriptor","object","set","recordModifiedProperty","InternalUpdatedProperty","oldDesc","generator","isIntrinsic","$GlobalObject","emitGlobalDelete","getRunningContext","isStrict","emitPropertyDelete","descValue","configurable","enumerable","writable","emitGlobalDeclaration","emitGlobalAssignment","emitDefineProperty","emitPropertyAssignment","parentPermitsChildPropertyCreation","ownDesc","$GetOwnProperty","ownDescValue","mightHaveBeenDeleted","parent","$GetPrototypeOf","throwIfNotConcrete","PropertiesImplementation","V","Receiver","weakDeletion","$Set","reportIntrospectionError","joinCondition","descriptor2","descriptor1","withCondition","evaluateForEffects","OrdinarySetHelper","compl1","gen1","bindings1","properties1","createdObj1","withInverseCondition","compl2","gen2","bindings2","properties2","createdObj2","joinedEffects","joinEffects","completion","composeWithSavedCompletion","applyEffects","existingDescriptor","existingDescValue","valueDesc","$Delete","$DefineOwnProperty","setter","Desc","obj","ObjectPrototype","getExtensible","size","success","createErrorThrowCompletion","TypeError","like","extensible","current","ValidateAndApplyPropertyDescriptor","jc","implies","createFromUnaryOp","mightNotBeTrue","ThrowIfMightHaveBeenDeleted","Object","keys","length","identical","field","dval","cval","currentValue","Properties","mightNotBeObject","mightBeObject","props","$OwnPropertyKeys","descriptors","nextKey","propDesc","descObj","push","pair","DefinePropertyOrThrow","Throw","W","promoteEmptyToUndefined","ReferenceError","base","GetBase","IsUnresolvableReference","IsStrictReference","globalObj","Set","GetReferencedName","IsPropertyReference","HasPrimitiveBase","succeeded","$SetPartial","GetReferencedNamePartial","referencedName","SetMutableBinding","A","DescValue","OrdinaryDefineOwnProperty","newLenDesc","assign","newLen","numberLen","RangeError","oldLenDesc","OrdinaryGetOwnProperty","oldLen","newWritable","oldLenCopy","Array","from","parseInt","x","filter","sort","reverse","deleteSucceeded","existingBinding","isPartialObject","useAbstractInterpretation","isSimpleObject","pname","getAsPropertyNameExpression","absVal","createTemporalFromBuildFunction","node","memberExpression","isIdentifier","configurabe","callReportPropertyAccess","D","X","kind","realmGenerator","derive","types","values","args","getBuildNode","$Prototype","p","done","visited","global","index","iterator","defineNativeMethod","proto","add","has","isNewObject","MethodDefinition","env","strictCode","methodDef","DefineMethod","SetFunctionName","$Closure","$Key","propKey","strict","body","scope","closure","GeneratorFunctionCreate","params","MakeMethod","prototype","GeneratorPrototype","originalConstructor","formalParameterList","FunctionCreate"],"mappings":"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","file":"properties.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { AbruptCompletion, PossiblyNormalCompletion } from \"../completions.js\";\nimport { construct_empty_effects, type Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding, PropertyKeyValue } from \"../types.js\";\nimport {\n  ArrayValue,\n  UndefinedValue,\n  NumberValue,\n  SymbolValue,\n  NullValue,\n  BooleanValue,\n  ObjectValue,\n  StringValue,\n  Value,\n  ConcreteValue,\n  AbstractValue,\n  AbstractObjectValue,\n} from \"../values/index.js\";\nimport { EvalPropertyName } from \"../evaluators/ObjectExpression\";\nimport { EnvironmentRecord, Reference } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport { CreateIterResultObject } from \"../methods/create.js\";\nimport invariant from \"../invariant.js\";\nimport {\n  Call,\n  cloneDescriptor,\n  CreateDataProperty,\n  equalDescriptors,\n  Get,\n  GetGlobalObject,\n  GetThisValue,\n  HasSomeCompatibleType,\n  IsAccessorDescriptor,\n  IsDataDescriptor,\n  IsGenericDescriptor,\n  IsPropertyKey,\n  MakeConstructor,\n  ObjectCreate,\n  SameValue,\n  SameValuePartial,\n  ToBooleanPartial,\n  ToNumber,\n  ToObject,\n  ToObjectPartial,\n  ToPropertyDescriptor,\n  ToUint32,\n} from \"../methods/index.js\";\nimport { type BabelNodeObjectMethod, type BabelNodeClassMethod, isValidIdentifier } from \"babel-types\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { Environment, Functions, Join, Path } from \"../singletons.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport * as t from \"babel-types\";\n\nfunction InternalDescriptorPropertyToValue(realm: Realm, value: void | boolean | Value) {\n  if (value === undefined) return realm.intrinsics.undefined;\n  if (typeof value === \"boolean\") return new BooleanValue(realm, value);\n  invariant(value instanceof Value);\n  return value;\n}\n\nfunction InternalGetPropertiesKey(P: PropertyKeyValue): string | SymbolValue | void {\n  if (typeof P === \"string\") {\n    return P;\n  } else if (P instanceof StringValue) {\n    return P.value;\n  } else if (P instanceof SymbolValue) {\n    return P;\n  }\n  // otherwise, undefined\n}\n\nfunction InternalGetPropertiesMap(O: ObjectValue, P: PropertyKeyValue): Map<any, PropertyBinding> {\n  if (typeof P === \"string\" || P instanceof StringValue) {\n    return O.properties;\n  } else if (P instanceof SymbolValue) {\n    return O.symbols;\n  } else {\n    invariant(false);\n  }\n}\n\nfunction InternalSetProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, desc: Descriptor) {\n  let map = InternalGetPropertiesMap(O, P);\n  let key = InternalGetPropertiesKey(P);\n  let propertyBinding = map.get(key);\n  if (propertyBinding === undefined) {\n    propertyBinding = { descriptor: undefined, object: O, key: key };\n    map.set(key, propertyBinding);\n  }\n  realm.recordModifiedProperty(propertyBinding);\n  propertyBinding.descriptor = desc;\n}\n\nfunction InternalUpdatedProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, oldDesc?: Descriptor) {\n  let generator = realm.generator;\n  if (!generator) return;\n  if (!O.isIntrinsic()) return;\n  if (P instanceof SymbolValue) return;\n  if (P instanceof StringValue) P = P.value;\n  invariant(typeof P === \"string\");\n  let propertyBinding = InternalGetPropertiesMap(O, P).get(P);\n  invariant(propertyBinding !== undefined); // The callers ensure this\n  let desc = propertyBinding.descriptor;\n  if (desc === undefined) {\n    // The property is being deleted\n    if (O === realm.$GlobalObject) {\n      generator.emitGlobalDelete(P, realm.getRunningContext().isStrict);\n    } else {\n      generator.emitPropertyDelete(O, P);\n    }\n  } else {\n    let descValue = desc.value || realm.intrinsics.undefined;\n    invariant(descValue instanceof Value);\n    if (oldDesc === undefined) {\n      // The property is being created\n      if (O === realm.$GlobalObject) {\n        if (IsDataDescriptor(realm, desc)) {\n          if (isValidIdentifier(P) && !desc.configurable && desc.enumerable && desc.writable) {\n            generator.emitGlobalDeclaration(P, descValue);\n          } else if (desc.configurable && desc.enumerable && desc.writable) {\n            generator.emitGlobalAssignment(P, descValue, realm.getRunningContext().isStrict);\n          } else {\n            generator.emitDefineProperty(O, P, desc);\n          }\n        } else {\n          generator.emitDefineProperty(O, P, desc);\n        }\n      } else {\n        if (IsDataDescriptor(realm, desc) && desc.configurable && desc.enumerable && desc.writable) {\n          generator.emitPropertyAssignment(O, P, descValue);\n        } else {\n          generator.emitDefineProperty(O, P, desc);\n        }\n      }\n    } else {\n      // The property is being modified\n      if (equalDescriptors(desc, oldDesc)) {\n        // only the value is being modified\n        if (O === realm.$GlobalObject) {\n          generator.emitGlobalAssignment(P, descValue, realm.getRunningContext().isStrict);\n        } else {\n          generator.emitPropertyAssignment(O, P, descValue);\n        }\n      } else {\n        generator.emitDefineProperty(O, P, desc, /*isDescChanged*/ true);\n      }\n    }\n  }\n}\n\n// Determines if an object with parent O may create its own property P.\nfunction parentPermitsChildPropertyCreation(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n  let ownDesc = O.$GetOwnProperty(P);\n  let ownDescValue = !ownDesc\n    ? realm.intrinsics.undefined\n    : ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value;\n  invariant(ownDescValue instanceof Value);\n\n  if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n    // O might not object, so first ask its parent\n    let parent = O.$GetPrototypeOf();\n    parent.throwIfNotConcrete(); //TODO #1016: deal with abstract parents\n    if (!(parent instanceof NullValue)) {\n      if (!parentPermitsChildPropertyCreation(realm, parent, P)) return false;\n    }\n\n    // Parent is OK, so if O does not object return true\n    if (!ownDesc) return true; // O has no opinion of its ownDesc\n  }\n  invariant(ownDesc !== undefined);\n\n  // O might have a property P and so might object\n  if (IsDataDescriptor(realm, ownDesc)) {\n    if (ownDesc.writable) {\n      // The grand parent does not object so it is OK that parent does not have P\n      // If parent does have P, it is also OK because it is a writable data property\n      return true;\n    }\n  }\n  // If parent does not have property P, this is too pessimistic, but that is\n  // the caller's problem.\n  return false;\n}\n\nexport class PropertiesImplementation {\n  // ECMA262 9.1.9.1\n  OrdinarySet(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    let weakDeletion = V.mightHaveBeenDeleted();\n\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n    // 2. Let ownDesc be ? O.[[GetOwnProperty]](P).\n    let ownDesc = O.$GetOwnProperty(P);\n    let ownDescValue = !ownDesc\n      ? realm.intrinsics.undefined\n      : ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value;\n    invariant(ownDescValue instanceof Value);\n\n    // 3. If ownDesc is undefined (or might be), then\n    if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n      // a. Let parent be ? O.[[GetPrototypeOf]]().\n      let parent = O.$GetPrototypeOf();\n      parent.throwIfNotConcrete(); //TODO #1016: deal with abstract parents\n\n      // b. If parent is not null, then\n      if (!(parent instanceof NullValue)) {\n        if (!ownDesc) {\n          // i. Return ? parent.[[Set]](P, V, Receiver).\n          return parent.$Set(P, V, Receiver);\n        }\n        // But since we don't know if O has its own property P, the parent might\n        // actually have a say. Give up, unless the parent would be OK with it.\n        if (!parentPermitsChildPropertyCreation(realm, parent, P)) {\n          invariant(ownDescValue instanceof AbstractValue);\n          AbstractValue.reportIntrospectionError(ownDescValue);\n          throw new FatalError();\n        }\n        // Since the parent is OK with us creating a local property for O\n        // we can carry on as if there were no parent.\n      }\n\n      // i. Let ownDesc be the PropertyDescriptor{[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\n      if (!ownDesc)\n        ownDesc = ({\n          value: realm.intrinsics.undefined,\n          writable: true,\n          enumerable: true,\n          configurable: true,\n        }: any);\n    }\n\n    // joined descriptors need special treatment\n    let joinCondition = ownDesc.joinCondition;\n    if (joinCondition !== undefined) {\n      let descriptor2 = ownDesc.descriptor2;\n      ownDesc = ownDesc.descriptor1;\n      let [compl1, gen1, bindings1, properties1, createdObj1] = Path.withCondition(joinCondition, () => {\n        return ownDesc !== undefined\n          ? realm.evaluateForEffects(() => new BooleanValue(realm, OrdinarySetHelper()))\n          : construct_empty_effects(realm);\n      });\n      ownDesc = descriptor2;\n      let [compl2, gen2, bindings2, properties2, createdObj2] = Path.withInverseCondition(joinCondition, () => {\n        return ownDesc !== undefined\n          ? realm.evaluateForEffects(() => new BooleanValue(realm, OrdinarySetHelper()))\n          : construct_empty_effects(realm);\n      });\n\n      // Join the effects, creating an abstract view of what happened, regardless\n      // of the actual value of ownDesc.joinCondition.\n      let joinedEffects = Join.joinEffects(\n        realm,\n        joinCondition,\n        [compl1, gen1, bindings1, properties1, createdObj1],\n        [compl2, gen2, bindings2, properties2, createdObj2]\n      );\n      let completion = joinedEffects[0];\n      if (completion instanceof PossiblyNormalCompletion) {\n        // in this case one of the branches may complete abruptly, which means that\n        // not all control flow branches join into one flow at this point.\n        // Consequently we have to continue tracking changes until the point where\n        // all the branches come together into one.\n        completion = realm.composeWithSavedCompletion(completion);\n      }\n      // Note that the effects of (non joining) abrupt branches are not included\n      // in joinedEffects, but are tracked separately inside completion.\n      realm.applyEffects(joinedEffects);\n\n      // return or throw completion\n      if (completion instanceof AbruptCompletion) throw completion;\n      invariant(completion instanceof Value);\n      return ToBooleanPartial(realm, completion);\n    }\n\n    return OrdinarySetHelper();\n\n    function OrdinarySetHelper(): boolean {\n      invariant(ownDesc !== undefined);\n      invariant(ownDescValue instanceof Value);\n      // 4. If IsDataDescriptor(ownDesc) is true, then\n      if (IsDataDescriptor(realm, ownDesc)) {\n        // a. If ownDesc.[[Writable]] is false, return false.\n        if (!ownDesc.writable && !weakDeletion) {\n          // The write will fail if the property actually exists\n          if (ownDescValue.mightHaveBeenDeleted()) {\n            // But maybe it does not and thus would succeed.\n            // Since we don't know what will happen, give up for now.\n            invariant(ownDescValue instanceof AbstractValue);\n            AbstractValue.reportIntrospectionError(ownDescValue);\n            throw new FatalError();\n          }\n          return false;\n        }\n\n        // b. If Type(Receiver) is not Object, return false.\n        Receiver = Receiver.throwIfNotConcrete();\n        if (!(Receiver instanceof ObjectValue)) return false;\n\n        // c. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\n        let existingDescriptor = Receiver.$GetOwnProperty(P);\n        if (existingDescriptor !== undefined) {\n          if (existingDescriptor.descriptor1 === ownDesc) existingDescriptor = ownDesc;\n          else if (existingDescriptor.descriptor2 === ownDesc) existingDescriptor = ownDesc;\n        }\n        let existingDescValue = !existingDescriptor\n          ? realm.intrinsics.undefined\n          : existingDescriptor.value === undefined ? realm.intrinsics.undefined : existingDescriptor.value;\n        invariant(existingDescValue instanceof Value);\n\n        // d. If existingDescriptor is not undefined, then\n        if (existingDescriptor !== undefined) {\n          // i. If IsAccessorDescriptor(existingDescriptor) is true, return false.\n          if (IsAccessorDescriptor(realm, existingDescriptor)) {\n            invariant(\n              !existingDescValue.mightHaveBeenDeleted(),\n              \"should not fail until weak deletes of accessors are suppported\"\n            );\n            return false;\n          }\n\n          // ii. If existingDescriptor.[[Writable]] is false, return false.\n          if (!existingDescriptor.writable && !(weakDeletion && existingDescriptor.configurable)) {\n            // If we are not sure the receiver actually has a property P we can't just return false here.\n            if (existingDescValue.mightHaveBeenDeleted()) {\n              invariant(existingDescValue instanceof AbstractValue);\n              AbstractValue.reportIntrospectionError(existingDescValue);\n              throw new FatalError();\n            }\n            return false;\n          }\n\n          // iii. Let valueDesc be the PropertyDescriptor{[[Value]]: V}.\n          let valueDesc = { value: V };\n          if (weakDeletion) {\n            valueDesc = existingDescriptor;\n            valueDesc.value = V;\n          }\n\n          // iv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).\n          if (weakDeletion || existingDescValue.mightHaveBeenDeleted()) {\n            // At this point we are not actually sure that Receiver actually has\n            // a property P, however, if it has, we are sure that its a data property,\n            // and that redefining the property with valueDesc will not change the\n            // attributes of the property, so we delete it to make things nice for $DefineOwnProperty.\n            Receiver.$Delete(P);\n          }\n          return Receiver.$DefineOwnProperty(P, valueDesc);\n        } else {\n          // e. Else Receiver does not currently have a property P,\n\n          // i. Return ? CreateDataProperty(Receiver, P, V).\n          return CreateDataProperty(realm, Receiver, P, V);\n        }\n      }\n\n      // 5. Assert: IsAccessorDescriptor(ownDesc) is true.\n      invariant(IsAccessorDescriptor(realm, ownDesc), \"expected accessor\");\n\n      // 6. Let setter be ownDesc.[[Set]].\n      let setter = \"set\" in ownDesc ? ownDesc.set : undefined;\n\n      // 7. If setter is undefined, return false.\n      if (!setter || setter instanceof UndefinedValue) return false;\n\n      // 8. Perform ? Call(setter, Receiver, « V »).\n      Call(realm, setter.throwIfNotConcrete(), Receiver, [V]);\n\n      // 9. Return true.\n      return true;\n    }\n  }\n\n  // ECMA262 6.2.4.4\n  FromPropertyDescriptor(realm: Realm, Desc: ?Descriptor): Value {\n    // 1. If Desc is undefined, return undefined.\n    if (!Desc) return realm.intrinsics.undefined;\n\n    // 2. Let obj be ObjectCreate(%ObjectPrototype%).\n    let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n    // 3. Assert: obj is an extensible ordinary object with no own properties.\n    invariant(obj.getExtensible(), \"expected an extensible object\");\n    invariant(!obj.properties.size, \"expected an object with no own properties\");\n\n    // 4. If Desc has a [[Value]] field, then\n    let success = true;\n    if (\"value\" in Desc) {\n      invariant(Desc.value instanceof Value);\n      // a. Perform CreateDataProperty(obj, \"value\", Desc.[[Value]]).\n      success = CreateDataProperty(realm, obj, \"value\", Desc.value) && success;\n    }\n\n    // 5. If Desc has a [[Writable]] field, then\n    if (\"writable\" in Desc) {\n      invariant(Desc.writable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"writable\", Desc.[[Writable]]).\n      success = CreateDataProperty(realm, obj, \"writable\", new BooleanValue(realm, Desc.writable)) && success;\n    }\n\n    // 6. If Desc has a [[Get]] field, then\n    if (\"get\" in Desc) {\n      invariant(Desc.get !== undefined);\n      // a. Perform CreateDataProperty(obj, \"get\", Desc.[[Get]]).\n      success = CreateDataProperty(realm, obj, \"get\", Desc.get) && success;\n    }\n\n    // 7. If Desc has a [[Set]] field, then\n    if (\"set\" in Desc) {\n      invariant(Desc.set !== undefined);\n      // a. Perform CreateDataProperty(obj, \"set\", Desc.[[Set]]).\n      success = CreateDataProperty(realm, obj, \"set\", Desc.set) && success;\n    }\n\n    // 8. If Desc has an [[Enumerable]] field, then\n    if (\"enumerable\" in Desc) {\n      invariant(Desc.enumerable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"enumerable\", Desc.[[Enumerable]]).\n      success = CreateDataProperty(realm, obj, \"enumerable\", new BooleanValue(realm, Desc.enumerable)) && success;\n    }\n\n    // 9. If Desc has a [[Configurable]] field, then\n    if (\"configurable\" in Desc) {\n      invariant(Desc.configurable !== undefined);\n      // a. Perform CreateDataProperty(obj, \"configurable\", Desc.[[Configurable]]).\n      success = CreateDataProperty(realm, obj, \"configurable\", new BooleanValue(realm, Desc.configurable)) && success;\n    }\n\n    // 10. Assert: all of the above CreateDataProperty operations return true.\n    invariant(success, \"fails to create data property\");\n\n    // 11. Return obj.\n    return obj;\n  }\n\n  //\n  OrdinaryDelete(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 2. Let desc be ? O.[[GetOwnProperty]](P).\n    let desc = O.$GetOwnProperty(P);\n\n    // 3. If desc is undefined, return true.\n    if (!desc) return true;\n\n    // 4. If desc.[[Configurable]] is true, then\n    if (desc.configurable) {\n      // a. Remove the own property with name P from O.\n      let key = InternalGetPropertiesKey(P);\n      let map = InternalGetPropertiesMap(O, P);\n      let propertyBinding = map.get(key);\n      invariant(propertyBinding !== undefined);\n      realm.recordModifiedProperty(propertyBinding);\n      propertyBinding.descriptor = undefined;\n      InternalUpdatedProperty(realm, O, P, desc);\n\n      // b. Return true.\n      return true;\n    }\n\n    // 5. Return false.\n    return false;\n  }\n\n  // ECMA262 7.3.8\n  DeletePropertyOrThrow(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n    // 1. Assert: Type(O) is Object.\n    invariant(O instanceof ObjectValue, \"expected an object\");\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 3. Let success be ? O.[[Delete]](P).\n    let success = O.$Delete(P);\n\n    // 4. If success is false, throw a TypeError exception.\n    if (!success) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"couldn't delete property\");\n    }\n\n    // 5. Return success.\n    return success;\n  }\n\n  // ECMA262 6.2.4.6\n  CompletePropertyDescriptor(realm: Realm, Desc: Descriptor): Descriptor {\n    // 1. Assert: Desc is a Property Descriptor.\n\n    // 2. Let like be Record{[[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined, [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false}.\n    let like = {\n      value: realm.intrinsics.undefined,\n      get: realm.intrinsics.undefined,\n      set: realm.intrinsics.undefined,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    };\n\n    // 3. If either IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then\n    if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n      // a. If Desc does not have a [[Value]] field, set Desc.[[Value]] to like.[[Value]].\n      if (!(\"value\" in Desc)) Desc.value = like.value;\n      // b. If Desc does not have a [[Writable]] field, set Desc.[[Writable]] to like.[[Writable]].\n      if (!(\"writable\" in Desc)) Desc.writable = like.writable;\n    } else {\n      // 4. Else,\n      // a. If Desc does not have a [[Get]] field, set Desc.[[Get]] to like.[[Get]].\n      if (!(\"get\" in Desc)) Desc.get = like.get;\n      // b. If Desc does not have a [[Set]] field, set Desc.[[Set]] to like.[[Set]].\n      if (!(\"set\" in Desc)) Desc.set = like.set;\n    }\n\n    // 5. If Desc does not have an [[Enumerable]] field, set Desc.[[Enumerable]] to like.[[Enumerable]].\n    if (!(\"enumerable\" in Desc)) Desc.enumerable = like.enumerable;\n\n    // 6. If Desc does not have a [[Configurable]] field, set Desc.[[Configurable]] to like.[[Configurable]].\n    if (!(\"configurable\" in Desc)) Desc.configurable = like.configurable;\n\n    // 7. Return Desc.\n    return Desc;\n  }\n\n  // ECMA262 9.1.6.2\n  IsCompatiblePropertyDescriptor(realm: Realm, extensible: boolean, Desc: Descriptor, current: ?Descriptor): boolean {\n    // 1. Return ValidateAndApplyPropertyDescriptor(undefined, undefined, Extensible, Desc, Current).\n    return this.ValidateAndApplyPropertyDescriptor(realm, undefined, undefined, extensible, Desc, current);\n  }\n\n  // ECMA262 9.1.6.3\n  ValidateAndApplyPropertyDescriptor(\n    realm: Realm,\n    O: void | ObjectValue,\n    P: void | PropertyKeyValue,\n    extensible: boolean,\n    Desc: Descriptor,\n    current: ?Descriptor\n  ): boolean {\n    // 1. Assert: If O is not undefined, then IsPropertyKey(P) is true.\n    if (O !== undefined) {\n      invariant(P !== undefined);\n      invariant(IsPropertyKey(realm, P));\n    }\n\n    if (current && current.joinCondition !== undefined) {\n      let jc = current.joinCondition;\n      if (Path.implies(jc)) current = current.descriptor1;\n      else if (!AbstractValue.createFromUnaryOp(realm, \"!\", jc, true).mightNotBeTrue()) current = current.descriptor2;\n    }\n\n    // 2. If current is undefined, then\n    if (!current) {\n      // a. If extensible is false, return false.\n      if (!extensible) return false;\n\n      // b. Assert: extensible is true.\n      invariant(extensible === true, \"expected extensible to be true\");\n\n      // c. If IsGenericDescriptor(Desc) is true or IsDataDescriptor(Desc) is true, then\n      if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n        // i. If O is not undefined, create an own data property named P of object O whose [[Value]],\n        //    [[Writable]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the\n        //    value of an attribute field of Desc is absent, the attribute of the newly created property is set\n        //    to its default value.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          InternalSetProperty(realm, O, P, {\n            value: \"value\" in Desc ? Desc.value : realm.intrinsics.undefined,\n            writable: \"writable\" in Desc ? Desc.writable : false,\n            enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n            configurable: \"configurable\" in Desc ? Desc.configurable : false,\n          });\n          InternalUpdatedProperty(realm, O, P, undefined);\n        }\n      } else {\n        // d. Else Desc must be an accessor Property Descriptor,\n        // i. If O is not undefined, create an own accessor property named P of object O whose [[Get]],\n        //    [[Set]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value\n        //    of an attribute field of Desc is absent, the attribute of the newly created property is set to its\n        //    default value.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          InternalSetProperty(realm, O, P, {\n            get: \"get\" in Desc ? Desc.get : realm.intrinsics.undefined,\n            set: \"set\" in Desc ? Desc.set : realm.intrinsics.undefined,\n            enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n            configurable: \"configurable\" in Desc ? Desc.configurable : false,\n          });\n          InternalUpdatedProperty(realm, O, P, undefined);\n        }\n      }\n\n      // e. Return true.\n      return true;\n    }\n    this.ThrowIfMightHaveBeenDeleted(current.value);\n\n    // 3. Return true, if every field in Desc is absent.\n    if (!Object.keys(Desc).length) return true;\n\n    // 4. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the\n    // same value as the corresponding field in current when compared using the SameValue algorithm.\n    let identical = true;\n    for (let field in Desc) {\n      if (!(field in current)) {\n        identical = false;\n      } else {\n        let dval = InternalDescriptorPropertyToValue(realm, Desc[field]);\n        let cval = InternalDescriptorPropertyToValue(realm, current[field]);\n        if (dval instanceof ConcreteValue && cval instanceof ConcreteValue) identical = SameValue(realm, dval, cval);\n        else {\n          identical = dval === cval;\n          // This might be false now but true at runtime. This does not\n          // matter because the logic for non identical values will still\n          // do the right thing in the cases below that does not blow up\n          // when dealing with an abstract value.\n        }\n      }\n      if (!identical) break;\n    }\n    if (identical) {\n      return true;\n    }\n\n    // 5. If the [[Configurable]] field of current is false, then\n    if (!current.configurable) {\n      // a. Return false, if the [[Configurable]] field of Desc is true.\n      if (Desc.configurable) return false;\n\n      // b. Return false, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and Desc are the Boolean negation of each other.\n      if (\"enumerable\" in Desc && Desc.enumerable !== current.enumerable) {\n        return false;\n      }\n    }\n\n    let oldDesc = current;\n    current = cloneDescriptor(current);\n    invariant(current !== undefined);\n\n    // 6. If IsGenericDescriptor(Desc) is true, no further validation is required.\n    if (IsGenericDescriptor(realm, Desc)) {\n    } else if (IsDataDescriptor(realm, current) !== IsDataDescriptor(realm, Desc)) {\n      // 7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then\n      // a. Return false, if the [[Configurable]] field of current is false.\n      if (!current.configurable) return false;\n\n      // b. If IsDataDescriptor(current) is true, then\n      if (IsDataDescriptor(realm, current)) {\n        // i. If O is not undefined, convert the property named P of object O from a data property to an accessor property.\n        // Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          let key = InternalGetPropertiesKey(P);\n          let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n          invariant(propertyBinding !== undefined);\n          delete current.writable;\n          delete current.value;\n          current.get = realm.intrinsics.undefined;\n          current.set = realm.intrinsics.undefined;\n        }\n      } else {\n        // c. Else,\n        // i. If O is not undefined, convert the property named P of object O from an accessor property to a data property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n        if (O !== undefined) {\n          invariant(P !== undefined);\n          let key = InternalGetPropertiesKey(P);\n          let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n          invariant(propertyBinding !== undefined);\n          delete current.get;\n          delete current.set;\n          current.writable = false;\n          current.value = realm.intrinsics.undefined;\n        }\n      }\n    } else if (IsDataDescriptor(realm, current) && IsDataDescriptor(realm, Desc)) {\n      // 8. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\n      // a. If the [[Configurable]] field of current is false, then\n      if (!current.configurable) {\n        // i. Return false, if the [[Writable]] field of current is false and the [[Writable]] field of Desc is true.\n        if (!current.writable && Desc.writable) return false;\n\n        // ii. If the [[Writable]] field of current is false, then\n        if (!current.writable) {\n          // 1. Return false, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], current.[[Value]]) is false.\n          let descValue = Desc.value || realm.intrinsics.undefined;\n          invariant(descValue instanceof Value);\n          let currentValue = current.value || realm.intrinsics.undefined;\n          invariant(currentValue instanceof Value);\n          if (Desc.value && !SameValuePartial(realm, descValue, currentValue)) {\n            return false;\n          }\n        }\n      } else {\n        // b. Else the [[Configurable]] field of current is true, so any change is acceptable.\n      }\n    } else {\n      // 9. Else IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true,\n      // a. If the [[Configurable]] field of current is false, then\n      if (!current.configurable) {\n        // i. Return false, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is false.\n        if (Desc.set && !SameValuePartial(realm, Desc.set, current.set || realm.intrinsics.undefined)) return false;\n\n        // ii. Return false, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) is false.\n        if (Desc.get && !SameValuePartial(realm, Desc.get, current.get || realm.intrinsics.undefined)) return false;\n      }\n    }\n\n    // 10. If O is not undefined, then\n    if (O !== undefined) {\n      invariant(P !== undefined);\n      let key = InternalGetPropertiesKey(P);\n      let map = InternalGetPropertiesMap(O, P);\n      let propertyBinding = map.get(key);\n      if (propertyBinding === undefined) {\n        propertyBinding = { descriptor: undefined, object: O, key: key };\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n        map.set(key, propertyBinding);\n      } else if (propertyBinding.descriptor === undefined) {\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n      } else {\n        realm.recordModifiedProperty(propertyBinding);\n        propertyBinding.descriptor = current;\n      }\n\n      // a. For each field of Desc that is present, set the corresponding attribute of the property named P of\n      //    object O to the value of the field.\n      for (let field in Desc) current[field] = Desc[field];\n      InternalUpdatedProperty(realm, O, P, oldDesc);\n    }\n\n    // 11. Return true.\n    return true;\n  }\n\n  // ECMA262 9.1.6.1\n  OrdinaryDefineOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, Desc: Descriptor): boolean {\n    invariant(O instanceof ObjectValue);\n\n    // 1. Let current be ? O.[[GetOwnProperty]](P).\n    let current = O.$GetOwnProperty(P);\n\n    // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n    let extensible = O.getExtensible();\n\n    // 3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current).\n    return this.ValidateAndApplyPropertyDescriptor(realm, O, P, extensible, Desc, current);\n  }\n\n  // ECMA262 19.1.2.3.1\n  ObjectDefineProperties(realm: Realm, O: Value, Properties: Value): ObjectValue | AbstractObjectValue {\n    // 1. If Type(O) is not Object, throw a TypeError exception.\n    if (O.mightNotBeObject()) {\n      if (O.mightBeObject()) O.throwIfNotConcrete();\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(O instanceof ObjectValue || O instanceof AbstractObjectValue);\n\n    // 2. Let props be ? ToObject(Properties).\n    let props = ToObject(realm, Properties.throwIfNotConcrete());\n\n    // 3. Let keys be ? props.[[OwnPropertyKeys]]().\n    let keys = props.$OwnPropertyKeys();\n\n    // 4. Let descriptors be a new empty List.\n    let descriptors = [];\n\n    // 5. Repeat for each element nextKey of keys in List order,\n    for (let nextKey of keys) {\n      // a. Let propDesc be ? props.[[GetOwnProperty]](nextKey).\n      let propDesc = props.$GetOwnProperty(nextKey);\n\n      // b. If propDesc is not undefined and propDesc.[[Enumerable]] is true, then\n      if (propDesc && propDesc.enumerable) {\n        this.ThrowIfMightHaveBeenDeleted(propDesc.value);\n\n        // i. Let descObj be ? Get(props, nextKey).\n        let descObj = Get(realm, props, nextKey);\n\n        // ii. Let desc be ? ToPropertyDescriptor(descObj).\n        let desc = ToPropertyDescriptor(realm, descObj);\n\n        // iii. Append the pair (a two element List) consisting of nextKey and desc to the end of descriptors.\n        descriptors.push([nextKey, desc]);\n      }\n    }\n\n    // 6. For each pair from descriptors in list order,\n    for (let pair of descriptors) {\n      // a. Let P be the first element of pair.\n      let P = pair[0];\n\n      // b. Let desc be the second element of pair.\n      let desc = pair[1];\n\n      // c. Perform ? DefinePropertyOrThrow(O, P, desc).\n      this.DefinePropertyOrThrow(realm, O, P, desc);\n    }\n\n    // 7. Return O.\n    return O;\n  }\n\n  // ECMA262 7.3.3\n  Set(realm: Realm, O: ObjectValue | AbstractObjectValue, P: PropertyKeyValue, V: Value, Throw: boolean): boolean {\n    // 1. Assert: Type(O) is Object.\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n    // 3. Assert: Type(Throw) is Boolean.\n    invariant(typeof Throw === \"boolean\", \"expected boolean\");\n\n    // 4. Let success be ? O.[[Set]](P, V, O).\n    let success = O.$Set(P, V, O);\n\n    // 5. If success is false and Throw is true, throw a TypeError exception.\n    if (success === false && Throw === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. Return success.\n    return success;\n  }\n\n  // ECMA262 7.3.7\n  DefinePropertyOrThrow(\n    realm: Realm,\n    O: ObjectValue | AbstractObjectValue,\n    P: PropertyKeyValue,\n    desc: Descriptor\n  ): boolean {\n    // 1. Assert: Type(O) is Object.\n\n    // 2. Assert: IsPropertyKey(P) is true.\n    invariant(typeof P === \"string\" || IsPropertyKey(realm, P), \"expected property key\");\n\n    // 3. Let success be ? O.[[DefineOwnProperty]](P, desc).\n    let success = O.$DefineOwnProperty(P, desc);\n\n    // 4. If success is false, throw a TypeError exception.\n    if (success === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return success.\n    return success;\n  }\n\n  // ECMA262 6.2.3.2\n  PutValue(realm: Realm, V: Value | Reference, W: Value): void | boolean | Value {\n    W = W.promoteEmptyToUndefined();\n    // The following two steps are not necessary as we propagate completions with exceptions.\n    // 1. ReturnIfAbrupt(V).\n    // 2. ReturnIfAbrupt(W).\n\n    // 3. If Type(V) is not Reference, throw a ReferenceError exception.\n    if (!(V instanceof Reference)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, \"can't put a value to a non-reference\");\n    }\n\n    // 4. Let base be GetBase(V).\n    let base = Environment.GetBase(realm, V);\n\n    // 5. If IsUnresolvableReference(V) is true, then\n    if (Environment.IsUnresolvableReference(realm, V)) {\n      // a. If IsStrictReference(V) is true, then\n      if (Environment.IsStrictReference(realm, V)) {\n        // i. Throw a ReferenceError exception.\n        throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError);\n      }\n\n      // b. Let globalObj be GetGlobalObject().\n      let globalObj = GetGlobalObject(realm);\n\n      // c. Return ? Set(globalObj, GetReferencedName(V), W, false).\n      return this.Set(realm, globalObj, Environment.GetReferencedName(realm, V), W, false);\n    }\n\n    // 6. Else if IsPropertyReference(V) is true, then\n    if (Environment.IsPropertyReference(realm, V)) {\n      // a. If HasPrimitiveBase(V) is true, then\n      if (Environment.HasPrimitiveBase(realm, V)) {\n        // i. Assert: In realm case, base will never be null or undefined.\n        invariant(base instanceof Value && !HasSomeCompatibleType(base, UndefinedValue, NullValue));\n\n        // ii. Set base to ToObject(base).\n        base = ToObjectPartial(realm, base);\n      }\n      invariant(base instanceof ObjectValue || base instanceof AbstractObjectValue);\n\n      // b. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\n      let succeeded = base.$SetPartial(Environment.GetReferencedNamePartial(realm, V), W, GetThisValue(realm, V));\n\n      // c. If succeeded is false and IsStrictReference(V) is true, throw a TypeError exception.\n      if (succeeded === false && Environment.IsStrictReference(realm, V)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // d. Return.\n      return;\n    }\n\n    // 7. Else base must be an Environment Record,\n    if (base instanceof EnvironmentRecord) {\n      // a. Return ? base.SetMutableBinding(GetReferencedName(V), W, IsStrictReference(V)) (see 8.1.1).\n      let referencedName = Environment.GetReferencedName(realm, V);\n      invariant(typeof referencedName === \"string\");\n      return base.SetMutableBinding(referencedName, W, Environment.IsStrictReference(realm, V));\n    }\n\n    invariant(false);\n  }\n\n  // ECMA262 9.4.2.4\n  ArraySetLength(realm: Realm, A: ArrayValue, Desc: Descriptor): boolean {\n    // 1. If the [[Value]] field of Desc is absent, then\n    let DescValue = Desc.value;\n    if (!DescValue) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", Desc).\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", Desc);\n    }\n    invariant(DescValue instanceof Value);\n\n    // 2. Let newLenDesc be a copy of Desc.\n    let newLenDesc = Object.assign({}, Desc);\n\n    // 3. Let newLen be ? ToUint32(Desc.[[Value]]).\n    let newLen = ToUint32(realm, DescValue);\n\n    // 4. Let numberLen be ? ToNumber(Desc.[[Value]]).\n    let numberLen = ToNumber(realm, DescValue);\n\n    // 5. If newLen ≠ numberLen, throw a RangeError exception.\n    if (newLen !== numberLen) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"should be a uint\");\n    }\n\n    // 6. Set newLenDesc.[[Value]] to newLen.\n    newLenDesc.value = new NumberValue(realm, newLen);\n\n    // 7. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").\n    let oldLenDesc = this.OrdinaryGetOwnProperty(realm, A, \"length\");\n\n    // 8. Assert: oldLenDesc will never be undefined or an accessor descriptor because Array objects are created\n    //    with a length data property that cannot be deleted or reconfigured.\n    invariant(\n      oldLenDesc !== undefined && !IsAccessorDescriptor(realm, oldLenDesc),\n      \"cannot be undefined or an accessor descriptor\"\n    );\n\n    // 9. Let oldLen be oldLenDesc.[[Value]].\n    let oldLen = oldLenDesc.value;\n    invariant(oldLen instanceof Value);\n    oldLen = oldLen.throwIfNotConcrete();\n    invariant(oldLen instanceof NumberValue, \"should be a number\");\n    oldLen = (oldLen.value: number);\n\n    // 10. If newLen ≥ oldLen, then\n    if (newLen >= oldLen) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n    }\n\n    // 11. If oldLenDesc.[[Writable]] is false, return false.\n    if (!oldLenDesc.writable) return false;\n\n    // 12. If newLenDesc.[[Writable]] is absent or has the value true, let newWritable be true.\n    let newWritable;\n    if (!(\"writable\" in newLenDesc) || newLenDesc.writable === true) {\n      newWritable = true;\n    } else {\n      // 13. Else,\n      // a. Need to defer setting the [[Writable]] attribute to false in case any elements cannot be deleted.\n\n      // b. Let newWritable be false.\n      newWritable = false;\n\n      // c. Set newLenDesc.[[Writable]] to true.\n      newLenDesc.writable = true;\n    }\n\n    // 14. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n    let succeeded = this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n    // 15. If succeeded is false, return false.\n    if (succeeded === false) return false;\n\n    // Here we diverge from the spec: instead of traversing all indices from\n    // oldLen to newLen, only the indices that are actually present are touched.\n    let oldLenCopy = oldLen;\n    let keys = Array.from(A.properties.keys())\n      .map(x => parseInt(x, 10))\n      .filter(x => newLen <= x && x <= oldLenCopy)\n      .sort()\n      .reverse();\n\n    // 16. While newLen < oldLen repeat,\n    for (let key of keys) {\n      // a. Set oldLen to oldLen - 1.\n      oldLen = key;\n\n      // b. Let deleteSucceeded be ! A.[[Delete]](! ToString(oldLen)).\n      let deleteSucceeded = A.$Delete(oldLen + \"\");\n\n      // c. If deleteSucceeded is false, then\n      if (deleteSucceeded === false) {\n        // i. Set newLenDesc.[[Value]] to oldLen + 1.\n        newLenDesc.value = new NumberValue(realm, oldLen + 1);\n\n        // ii. If newWritable is false, set newLenDesc.[[Writable]] to false.\n        if (newWritable === false) newLenDesc.writable = false;\n\n        // iii. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n        succeeded = this.OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n        // iv. Return false.\n        return false;\n      }\n    }\n\n    // 17. If newWritable is false, then\n    if (!newWritable) {\n      // a. Return OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor{[[Writable]]: false}). This call will always return true.\n      return this.OrdinaryDefineOwnProperty(realm, A, \"length\", {\n        writable: false,\n      });\n    }\n\n    // 18. Return true.\n    return true;\n  }\n\n  // ECMA262 9.1.5.1\n  OrdinaryGetOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue): Descriptor | void {\n    // 1. Assert: IsPropertyKey(P) is true.\n    invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n    // 2. If O does not have an own property with key P, return undefined.\n    let existingBinding = InternalGetPropertiesMap(O, P).get(InternalGetPropertiesKey(P));\n    if (!existingBinding) {\n      if (O.isPartialObject()) {\n        invariant(realm.useAbstractInterpretation); // __makePartial will already have thrown an error if not\n        if (O.isSimpleObject()) {\n          if (P instanceof StringValue) P = P.value;\n          if (typeof P === \"string\") {\n            // In this case it is safe to defer the property access to runtime (at this point in time)\n            invariant(realm.generator);\n            let pname = realm.generator.getAsPropertyNameExpression(P);\n            let absVal = AbstractValue.createTemporalFromBuildFunction(realm, Value, [O], ([node]) =>\n              t.memberExpression(node, pname, !t.isIdentifier(pname))\n            );\n            return { configurabe: true, enumerable: true, value: absVal, writable: true };\n          } else {\n            invariant(P instanceof SymbolValue);\n            // Simple objects don't have symbol properties\n            return undefined;\n          }\n        }\n        AbstractValue.reportIntrospectionError(O, P);\n        throw new FatalError();\n      }\n      return undefined;\n    }\n    realm.callReportPropertyAccess(existingBinding);\n    if (!existingBinding.descriptor) return undefined;\n\n    // 3. Let D be a newly created Property Descriptor with no fields.\n    let D = {};\n\n    // 4. Let X be O's own property whose key is P.\n    let X = existingBinding.descriptor;\n    invariant(X !== undefined);\n\n    if (X.joinCondition !== undefined) {\n      D.joinCondition = X.joinCondition;\n      D.descriptor1 = X.descriptor1;\n      D.descriptor2 = X.descriptor2;\n      return D;\n    }\n    // 5. If X is a data property, then\n    if (IsDataDescriptor(realm, X)) {\n      let value = X.value;\n      if (O.isPartialObject() && value instanceof AbstractValue && value.kind !== \"resolved\") {\n        let realmGenerator = realm.generator;\n        invariant(realmGenerator);\n        value = realmGenerator.derive(value.types, value.values, value.args, value.getBuildNode(), {\n          kind: \"resolved\",\n        });\n        InternalSetProperty(realm, O, P, {\n          value: value,\n          writable: \"writable\" in X ? X.writable : false,\n          enumerable: \"enumerable\" in X ? X.enumerable : false,\n          configurable: \"configurable\" in X ? X.configurable : false,\n        });\n      }\n\n      // a. Set D.[[Value]] to the value of X's [[Value]] attribute.\n      D.value = value;\n\n      // b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.\n      D.writable = X.writable;\n    } else {\n      // 6. Else X is an accessor property,\n      invariant(IsAccessorDescriptor(realm, X), \"expected accessor property\");\n\n      // a. Set D.[[Get]] to the value of X's [[Get]] attribute.\n      D.get = X.get;\n\n      // b. Set D.[[Set]] to the value of X's [[Set]] attribute.\n      D.set = X.set;\n    }\n\n    // 7. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.\n    D.enumerable = X.enumerable;\n\n    // 8. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.\n    D.configurable = X.configurable;\n\n    // 9. Return D.\n    return D;\n  }\n\n  // ECMA262 9.1.2.1\n  OrdinarySetPrototypeOf(realm: Realm, O: ObjectValue, V: ObjectValue | NullValue): boolean {\n    // 1. Assert: Either Type(V) is Object or Type(V) is Null.\n    invariant(V instanceof ObjectValue || V instanceof NullValue);\n\n    // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n    let extensible = O.getExtensible();\n\n    // 3. Let current be the value of the [[Prototype]] internal slot of O.\n    let current = O.$Prototype;\n\n    // 4. If SameValue(V, current) is true, return true.\n    if (SameValue(realm, V, current)) return true;\n\n    // 5. If extensible is false, return false.\n    if (!extensible) return false;\n\n    // 6. Let p be V.\n    let p = V;\n\n    // 7. Let done be false.\n    let done = false;\n\n    // 8. Repeat while done is false,\n    while (!done) {\n      // a. If p is null, let done be true.\n      if (p instanceof NullValue) {\n        done = true;\n      } else if (SameValue(realm, p, O)) {\n        // b. Else if SameValue(p, O) is true, return false.\n        return false;\n      } else {\n        // c. Else,\n        // TODO #1017 i. If the [[GetPrototypeOf]] internal method of p is not the ordinary object internal method defined in 9.1.1, let done be true.\n\n        // ii. Else, let p be the value of p's [[Prototype]] internal slot.\n        p = p.$Prototype;\n      }\n    }\n\n    // 9. Set the value of the [[Prototype]] internal slot of O to V.\n    O.$Prototype = V;\n\n    // 10. Return true.\n    return true;\n  }\n\n  // ECMA262 13.7.5.15\n  EnumerateObjectProperties(realm: Realm, O: ObjectValue): ObjectValue {\n    /*global global*/\n    let visited = new global.Set();\n    let obj = O;\n    let keys = O.$OwnPropertyKeys();\n    let index = 0;\n\n    let iterator = new ObjectValue(realm);\n    iterator.defineNativeMethod(\"next\", 0, () => {\n      while (true) {\n        if (index >= keys.length) {\n          let proto = obj.$GetPrototypeOf();\n          if (proto instanceof NullValue) {\n            return CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n          }\n          obj = proto;\n          keys = obj.$OwnPropertyKeys();\n          index = 0;\n        }\n\n        let key = keys[index];\n\n        // Omit symbols.\n        if (!(key instanceof StringValue)) {\n          index += 1;\n          continue;\n        }\n\n        // Omit non-enumerable properties.\n        let desc = obj.$GetOwnProperty(key);\n        if (desc && !desc.enumerable) {\n          this.ThrowIfMightHaveBeenDeleted(desc.value);\n          index += 1;\n          visited.add(key.value);\n          continue;\n        }\n\n        // Omit duplicates.\n        if (visited.has(key.value)) {\n          index += 1;\n          continue;\n        }\n        visited.add(key.value);\n\n        // Yield the key.\n        return CreateIterResultObject(realm, key, false);\n      }\n    });\n    return iterator;\n  }\n\n  ThrowIfMightHaveBeenDeleted(\n    value: void | Value | Array<Value> | Array<{ $Key: void | Value, $Value: void | Value }>\n  ): void {\n    if (!(value instanceof Value)) return;\n    if (!value.mightHaveBeenDeleted()) return;\n    invariant(value instanceof AbstractValue); // real empty values should never get here\n    AbstractValue.reportIntrospectionError(value);\n    throw new FatalError();\n  }\n\n  ThrowIfInternalSlotNotWritable<T: ObjectValue>(realm: Realm, object: T, key: string): T {\n    if (!realm.isNewObject(object)) {\n      AbstractValue.reportIntrospectionError(object, key);\n      throw new FatalError();\n    }\n    return object;\n  }\n\n  // ECMA 14.3.9\n  PropertyDefinitionEvaluation(\n    realm: Realm,\n    MethodDefinition: BabelNodeObjectMethod | BabelNodeClassMethod,\n    object: ObjectValue,\n    env: LexicalEnvironment,\n    strictCode: boolean,\n    enumerable: boolean\n  ): boolean {\n    // MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n    if (MethodDefinition.kind === \"method\") {\n      // 1. Let methodDef be DefineMethod of MethodDefinition with argument object.\n      let methodDef = Functions.DefineMethod(realm, MethodDefinition, object, env, strictCode);\n\n      // 2. ReturnIfAbrupt(methodDef).\n\n      // 3. Perform SetFunctionName(methodDef.[[closure]], methodDef.[[key]]).\n      Functions.SetFunctionName(realm, methodDef.$Closure, methodDef.$Key);\n\n      // 4. Let desc be the Property Descriptor{[[Value]]: methodDef.[[closure]], [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc: Descriptor = { value: methodDef.$Closure, writable: true, enumerable: enumerable, configurable: true };\n\n      // 5. Return DefinePropertyOrThrow(object, methodDef.[[key]], desc).\n      return this.DefinePropertyOrThrow(realm, object, methodDef.$Key, desc);\n    } else if (MethodDefinition.kind === \"generator\") {\n      // MethodDefinition : GeneratorMethod\n      // See 14.4.\n      // ECMA 14.4.13\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n      // 3. If the function code for this GeneratorMethod is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context’s LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let closure be GeneratorFunctionCreate(Method, StrictFormalParameters, GeneratorBody, scope, strict).\n      let closure = Functions.GeneratorFunctionCreate(\n        realm,\n        \"method\",\n        MethodDefinition.params,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 6. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 7. Let prototype be ObjectCreate(%GeneratorPrototype%).\n      let prototype = ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n      prototype.originalConstructor = closure;\n\n      // 8. Perform MakeConstructor(closure, true, prototype).\n      MakeConstructor(realm, closure, true, prototype);\n\n      // 9. Perform SetFunctionName(closure, propKey).\n      Functions.SetFunctionName(realm, closure, propKey);\n\n      // 10. Let desc be the Property Descriptor{[[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc: Descriptor = { value: closure, writable: true, enumerable: enumerable, configurable: true };\n\n      // 11. Return DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    } else if (MethodDefinition.kind === \"get\") {\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n\n      // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context's LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let formalParameterList be the production FormalParameters:[empty] .\n      let formalParameterList = [];\n\n      // 6. Let closure be FunctionCreate(Method, formalParameterList, FunctionBody, scope, strict).\n      let closure = Functions.FunctionCreate(\n        realm,\n        \"method\",\n        formalParameterList,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 7. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 8. Perform SetFunctionName(closure, propKey, \"get\").\n      Functions.SetFunctionName(realm, closure, propKey, \"get\");\n\n      // 9. Let desc be the PropertyDescriptor{[[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc = {\n        get: closure,\n        enumerable: true,\n        configurable: true,\n      };\n\n      // 10. Return ? DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    } else {\n      invariant(MethodDefinition.kind === \"set\");\n      // 1. Let propKey be the result of evaluating PropertyName.\n      let propKey = EvalPropertyName(MethodDefinition, env, realm, strictCode);\n\n      // 2. ReturnIfAbrupt(propKey).\n\n      // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.\n      let strict = strictCode || IsStrict(MethodDefinition.body);\n\n      // 4. Let scope be the running execution context's LexicalEnvironment.\n      let scope = env;\n\n      // 5. Let closure be FunctionCreate(Method, PropertySetParameterList, FunctionBody, scope, strict).\n      let closure = Functions.FunctionCreate(\n        realm,\n        \"method\",\n        MethodDefinition.params,\n        MethodDefinition.body,\n        scope,\n        strict\n      );\n\n      // 6. Perform MakeMethod(closure, object).\n      Functions.MakeMethod(realm, closure, object);\n\n      // 7. Perform SetFunctionName(closure, propKey, \"set\").\n      Functions.SetFunctionName(realm, closure, propKey, \"set\");\n\n      // 8. Let desc be the PropertyDescriptor{[[Set]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.\n      let desc = {\n        set: closure,\n        enumerable: true,\n        configurable: true,\n      };\n\n      // 9. Return ? DefinePropertyOrThrow(object, propKey, desc).\n      return this.DefinePropertyOrThrow(realm, object, propKey, desc);\n    }\n  }\n}\n"]}