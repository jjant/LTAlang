{"version":3,"sources":["../../src/methods/call.js"],"names":["ArgumentListEvaluation","Invoke","EvaluateCall","PrepareForOrdinaryCall","OrdinaryCallBindThis","OrdinaryCallEvaluateBody","EvaluateDirectCall","EvaluateDirectCallWithArgList","PrepareForTailCall","Call","t","realm","strictCode","env","argNodes","Array","isArray","args","node_","type","node","list","spreadRef","evaluate","argument","spreadObj","GetValue","iterator","next","nextArg","push","ref","expr","expressions","length","templateLiteral","siteObj","firstSubRef","firstSub","restSub","slice","map","constructor","V","P","argumentsList","func","thisValue","IsPropertyReference","refEnv","GetBase","WithBaseObject","intrinsics","undefined","F","newTarget","callerContext","getRunningContext","calleeContext","createExecutionContext","setFunction","setCaller","calleeRealm","ScriptOrModule","$ScriptOrModule","localEnv","NewFunctionEnvironment","lexicalEnvironment","variableEnvironment","suspend","pushContext","thisArgument","thisMode","$ThisMode","$Realm","globalEnv","$GlobalEnv","globalEnvRec","environmentRecord","$GlobalThisValue","envRec","BindThisValue","callCallback","GetThisBinding","$NewTarget","err","Error","$FunctionKind","FunctionDeclarationInstantiation","G","$GeneratorState","$GeneratorContext","code","$ECMAScriptCode","currentLocation","context","c","evaluateCompletionDeref","$Strict","incorporateSavedCompletion","joinedEffects","e","getCapturedEffects","stopEffectCaptureAndUndoEffects","joinEffectsAndPromoteNestedReturnCompletions","result","applyEffects","consequent","alternate","extractAndSavePossiblyNormalCompletion","unbundleReturnCompletion","possiblyNormalCompletion","composeWithSavedCompletion","tailPosition","argList","isTypeCompatibleWith","getType","createTemporalFromBuildFunction","concat","nodes","fun_args","callExpression","throwIfNotConcrete","createErrorThrowCompletion","TypeError","leafContext","popContext","argsList","fullArgs","$Call"],"mappings":";;;;;;;;QAoDgBA,sB,GAAAA,sB;QAuFAC,M,GAAAA,M;QAeAC,Y,GAAAA,Y;QAsCAC,sB,GAAAA,sB;QAoDAC,oB,GAAAA,oB;QAuDAC,wB,GAAAA,wB;QAsGAC,kB,GAAAA,kB;QAgBAC,6B,GAAAA,6B;QAkDAC,kB,GAAAA,kB;QAeAC,I,GAAAA,I;;AArdhB;;AACA;;AACA;;AACA;;;;AACA;;AAUA;;AASA;;AACA;;AACA;;AAMA;;AAEA;;AACA;;;;AAEA;;IAAYC,C;;;;;;oMAjDZ;;;;;;;;;AAmDA;AACO,SAASV,sBAAT,CACLW,KADK,EAELC,UAFK,EAGLC,GAHK,EAILC,QAJK,EAKS;AACd,MAAIC,MAAMC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,QAAIG,OAAO,EAAX;AAD2B;AAAA;AAAA;;AAAA;AAE3B,2BAAkBH,QAAlB,8HAA4B;AAAA,YAAnBI,KAAmB;;AAC1B,YAAIA,MAAMC,IAAN,KAAe,eAAnB,EAAoC;AAClC,cAAIC,OAAQF,KAAZ;AACA;AACA,cAAIG,OAAOJ,IAAX;;AAEA;AACA,cAAIK,YAAYT,IAAIU,QAAJ,CAAaH,KAAKI,QAAlB,EAA4BZ,UAA5B,CAAhB;;AAEA;AACA,cAAIa,YAAY,wBAAYC,QAAZ,CAAqBf,KAArB,EAA4BW,SAA5B,CAAhB;;AAEA;AACA,cAAIK,WAAW,yBAAYhB,KAAZ,EAAmBc,SAAnB,CAAf;;AAEA;AACA,iBAAO,IAAP,EAAa;AACX;AACA,gBAAIG,OAAO,0BAAajB,KAAb,EAAoBgB,QAApB,CAAX;;AAEA;AACA,gBAAI,CAACC,IAAL,EAAW;AACT;AACD;;AAED;AACA,gBAAIC,UAAU,2BAAclB,KAAd,EAAqBiB,IAArB,CAAd;;AAEA;AACAP,iBAAKS,IAAL,CAAUD,OAAV;AACD;AACF,SA9BD,MA8BO;AACL,cAAIE,MAAMlB,IAAIU,QAAJ,CAAaL,KAAb,EAAoBN,UAApB,CAAV;AACA,cAAIoB,OAAO,wBAAYN,QAAZ,CAAqBf,KAArB,EAA4BoB,GAA5B,CAAX;AACAd,eAAKa,IAAL,CAAUE,IAAV;AACD;AACF;AAtC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuC3B,WAAOf,IAAP;AACD,GAxCD,MAwCO;AACL,QAAIG,QAAQN,QAAZ;AACA,QAAIM,MAAKa,WAAL,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC;AACA,UAAIC,kBAAkBf,KAAtB;;AAEA;AACA,UAAIgB,UAAU,4BAAkBzB,KAAlB,EAAyBwB,eAAzB,CAAd;;AAEA;AACA,aAAO,CAACC,OAAD,CAAP;AACD,KATD,MASO;AACL;AACA,UAAID,mBAAkBf,KAAtB;;AAEA;AACA,UAAIgB,WAAU,4BAAkBzB,KAAlB,EAAyBwB,gBAAzB,CAAd;;AAEA;AACA,UAAIE,cAAcxB,IAAIU,QAAJ,CAAaH,MAAKa,WAAL,CAAiB,CAAjB,CAAb,EAAkCrB,UAAlC,CAAlB;;AAEA;AACA,UAAI0B,WAAW,wBAAYZ,QAAZ,CAAqBf,KAArB,EAA4B0B,WAA5B,CAAf;;AAEA;AACA,UAAIE,UAAUnB,MAAKa,WAAL,CAAiBO,KAAjB,CAAuB,CAAvB,EAA0BpB,MAAKa,WAAL,CAAiBC,MAA3C,EAAmDO,GAAnD,CAAuD,gBAAQ;AAC3E,eAAO,wBAAYf,QAAZ,CAAqBf,KAArB,EAA4BE,IAAIU,QAAJ,CAAaS,IAAb,EAAmBpB,UAAnB,CAA5B,CAAP;AACD,OAFa,CAAd;;AAIA;;AAEA;AACA,+BAAU2B,QAAQG,WAAR,KAAwB3B,KAAlC,EAAyC,mBAAzC;;AAEA;AACA,cAAQqB,QAAR,EAAiBE,QAAjB,4BAA8BC,OAA9B;AACD;AACF;AACF;;AAED;AACO,SAAStC,MAAT,CAAgBU,KAAhB,EAA8BgC,CAA9B,EAAwCC,CAAxC,EAA6DC,aAA7D,EAAkG;AACvG;AACA,2BAAU,2BAAclC,KAAd,EAAqBiC,CAArB,CAAV,EAAmC,uBAAnC;;AAEA;AACA,MAAI,CAACC,aAAL,EAAoBA,gBAAgB,EAAhB;;AAEpB;AACA,MAAIC,OAAO,eAAKnC,KAAL,EAAYgC,CAAZ,EAAeC,CAAf,CAAX;;AAEA;AACA,SAAOnC,KAAKE,KAAL,EAAYmC,IAAZ,EAAkBH,CAAlB,EAAqBE,aAArB,CAAP;AACD;;AAED;AACO,SAAS3C,YAAT,CACLS,KADK,EAELC,UAFK,EAGLC,GAHK,EAILkB,GAJK,EAKLd,IALK,EAME;AACP,MAAI8B,kBAAJ;;AAEA;AACA,MAAID,OAAO,wBAAYpB,QAAZ,CAAqBf,KAArB,EAA4BoB,GAA5B,CAAX;;AAEA;AACA,MAAIA,qCAAJ,EAA8B;AAC5B;AACA,QAAI,wBAAYiB,mBAAZ,CAAgCrC,KAAhC,EAAuCoB,GAAvC,CAAJ,EAAiD;AAC/C;AACAgB,kBAAY,uBAAapC,KAAb,EAAoBoB,GAApB,CAAZ;AACD,KAHD,MAGO;AACL;AACA;AACA,UAAIkB,SAAS,wBAAYC,OAAZ,CAAoBvC,KAApB,EAA2BoB,GAA3B,CAAb;AACA,+BAAUkB,gDAAV;;AAEA;AACAF,kBAAYE,OAAOE,cAAP,EAAZ;AACD;AACF,GAdD,MAcO;AACL;AACA;AACAJ,gBAAYpC,MAAMyC,UAAN,CAAiBC,SAA7B;AACD;;AAED;AACA,SAAO/C,mBAAmBK,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CkB,GAA3C,EAAgDe,IAAhD,EAAsDC,SAAtD,EAAiE9B,IAAjE,CAAP;AACD;;AAED;AACO,SAASd,sBAAT,CACLQ,KADK,EAEL2C,CAFK,EAGLC,SAHK,EAIa;AAClB;AACA,2BACEA,cAAcF,SAAd,IAA2BE,uCAD7B,EAEE,mDAFF;;AAKA;AACA,MAAIC,gBAAgB7C,MAAM8C,iBAAN,EAApB;;AAEA;AACA,MAAIC,gBAAgB/C,MAAMgD,sBAAN,EAApB;;AAEA;AACAD,gBAAcE,WAAd,CAA0BN,CAA1B;AACAI,gBAAcG,SAAd,CAAwBlD,MAAM8C,iBAAN,EAAxB;;AAEA;AACA,MAAIK,cAAcnD,KAAlB;;AAEA;AACA+C,gBAAc/C,KAAd,GAAsBmD,WAAtB;;AAEA;AACAJ,gBAAcK,cAAd,GAA+BT,EAAEU,eAAjC;;AAEA;AACA,MAAIC,WAAW,wBAAYC,sBAAZ,CAAmCvD,KAAnC,EAA0C2C,CAA1C,EAA6CC,SAA7C,CAAf;;AAEA;AACAG,gBAAcS,kBAAd,GAAmCF,QAAnC;;AAEA;AACAP,gBAAcU,mBAAd,GAAoCH,QAApC;;AAEA;AACAT,gBAAca,OAAd;;AAEA;AACA1D,QAAM2D,WAAN,CAAkBZ,aAAlB;;AAEA;;AAEA;AACA,SAAOA,aAAP;AACD;;AAED;AACO,SAAStD,oBAAT,CACLO,KADK,EAEL2C,CAFK,EAGLI,aAHK,EAILa,YAJK,EAK2D;AAChE;AACA,MAAIC,WAAWlB,EAAEmB,SAAjB;;AAEA;AACA,MAAID,aAAa,SAAjB,EAA4B,OAAO7D,MAAMyC,UAAN,CAAiBC,SAAxB;;AAE5B;AACA,MAAIS,cAAcR,EAAEoB,MAApB;;AAEA;AACA,MAAIT,WAAWP,cAAcS,kBAA7B;;AAEA,MAAIpB,kBAAJ;AACA;AACA,MAAIyB,aAAa,QAAjB,EAA2B;AACzBzB,gBAAawB,YAAb;AACD,GAFD,MAEO;AACL;AACA;AACA,QAAI,mCAAsBA,YAAtB,0CAAJ,EAAoE;AAClE;AACA,UAAII,YAAYhE,MAAMiE,UAAtB;;AAEA;AACA,UAAIC,eAAeF,UAAUG,iBAA7B;AACA,+BAAUD,4DAAV;;AAEA;AACA9B,kBAAY8B,aAAaE,gBAAzB;AACD,KAVD,MAUO;AACL;AACA;AACAhC,kBAAY,6BAAgBe,WAAhB,EAA6BS,YAA7B,CAAZ;;AAEA;AACD;AACF;;AAED;AACA,2BAAUN,aAAaZ,SAAvB;AACA,MAAI2B,SAASf,SAASa,iBAAtB;;AAEA;;AAEA;AACA,SAAOE,OAAOC,aAAP,CAAqBlC,SAArB,CAAP;AACD;;AAED;AACO,SAAS1C,wBAAT,CACLM,KADK,EAEL2C,CAFK,EAGLT,aAHK,EAIiC;AACtC,MAAIS,uCAAJ,EAAsC;AACpC,QAAIzC,MAAMF,MAAM8C,iBAAN,GAA0BU,kBAApC;AACA,QAAI;AACF,aAAOb,EAAE4B,YAAF,CAAerE,IAAIiE,iBAAJ,CAAsBK,cAAtB,EAAf,EAAuDtC,aAAvD,EAAsEhC,IAAIiE,iBAAJ,CAAsBM,UAA5F,CAAP;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,UAAIA,4CAAJ,EAAqC;AACnC,eAAOA,GAAP;AACD,OAFD,MAEO,IAAIA,eAAeC,KAAnB,EAA0B;AAC/B,cAAMD,GAAN;AACD,OAFM,MAEA;AACL,cAAM,uBAAeA,GAAf,CAAN;AACD;AACF;AACF,GAbD,MAaO;AACL,6BAAU/B,iDAAV;AACA,QAAIA,EAAEiC,aAAF,KAAoB,WAAxB,EAAqC;AACnC;AACA,4BAAUC,gCAAV,CAA2C7E,KAA3C,EAAkD2C,CAAlD,EAAqDT,aAArD;;AAEA;AACA,UAAI4C,IAAI,2CAA8B9E,KAA9B,EAAqC2C,CAArC,EAAwC,oBAAxC,EAA8D;AACpEoC,yBAAiBrC,SADmD;AAEpEsC,2BAAmBtC;AAFiD,OAA9D,CAAR;;AAKA;AACA,UAAIuC,OAAOtC,EAAEuC,eAAb;AACA,+BAAUD,SAASvC,SAAnB;AACA,qCAAe1C,KAAf,EAAsB8E,CAAtB,EAAyBG,IAAzB;;AAEA;AACA,aAAO,kCAAqBH,CAArB,EAAwB9E,MAAMmF,eAA9B,CAAP;AACD,KAjBD,MAiBO;AACL;AACA,4BAAUN,gCAAV,CAA2C7E,KAA3C,EAAkD2C,CAAlD,EAAqDT,aAArD;;AAEA;AACA;AACA,UAAI+C,QAAOtC,EAAEuC,eAAb;AACA,+BAAUD,UAASvC,SAAnB;AACA,UAAI0C,UAAUpF,MAAM8C,iBAAN,EAAd;AACA,UAAIuC,IAAID,QAAQ5B,kBAAR,CAA2B8B,uBAA3B,CAAmDL,KAAnD,EAAyDtC,EAAE4C,OAA3D,CAAR;AACA;AACA;AACAF,UAAI,sBAAUG,0BAAV,CAAqCxF,KAArC,EAA4CqF,CAA5C,CAAJ;AACA,UAAII,sBAAJ;AACA,UAAIJ,kDAAJ,EAA2C;AACzC,YAAIK,IAAI1F,MAAM2F,kBAAN,CAAyBN,CAAzB,CAAR;AACA,YAAIK,MAAMhD,SAAV,EAAqB;AACnB;AACA;AACA1C,gBAAM4F,+BAAN,CAAsCP,CAAtC;AACD,SAJD,MAIO;AACLK,cAAI,oCAAwB1F,KAAxB,CAAJ;AACD;AACDyF,wBAAgB,iBAAKI,4CAAL,CAAkD7F,KAAlD,EAAyDqF,CAAzD,EAA4DK,CAA5D,CAAhB;AACD,OAVD,MAUO,IAAIL,iDAAJ,EAA0C;AAC/CI,wBAAgB,iBAAKI,4CAAL,CAAkD7F,KAAlD,EAAyDqF,CAAzD,EAA4D,oCAAwBrF,KAAxB,CAA5D,CAAhB;AACD;AACD,UAAIyF,kBAAkB/C,SAAtB,EAAiC;AAC/B,YAAIoD,SAASL,cAAc,CAAd,CAAb;AACA,YAAIK,+CAAJ,EAAwC;AACtC9F,gBAAM+F,YAAN,CAAmBN,aAAnB;AACA,iBAAOK,MAAP;AACD;AACD,iCAAUA,sDAAV;AACA,YAAI,EAAEA,OAAOE,UAAP,6CAAiDF,OAAOG,SAAP,yCAAnD,CAAJ,EAAsG;AACpGjG,gBAAM+F,YAAN,CAAmBN,aAAnB;AACA,gBAAMK,MAAN;AACD;AACD;AACA;AACA;AACAL,wBAAgBS,uCAAuCJ,MAAvC,CAAhB;AACAA,iBAASL,cAAc,CAAd,CAAT;AACA,iCAAUK,+CAAV;AACA9F,cAAM+F,YAAN,CAAmBN,aAAnB;AACA,eAAOK,MAAP;AACD,OAnBD,MAmBO;AACL,iCAAUT,gCAAsBA,0CAAhC;AACA,eAAOA,CAAP;AACD;AACF;AACF;;AAED,WAASa,sCAAT,CAAgDb,CAAhD,EAA4E;AAC1E;AACA;AACA;AAH0E,gCAK1B,iBAAKc,wBAAL,CAA8BnG,KAA9B,EAAqCqF,CAArC,CAL0B;AAAA;AAAA,QAKrEI,aALqE;AAAA,QAKtDW,wBALsD;;AAM1EpG,UAAMqG,0BAAN,CAAiCD,wBAAjC;AACA,WAAOX,aAAP;AACD;AACF;;AAED;AACO,SAAS9F,kBAAT,CACLK,KADK,EAELC,UAFK,EAGLC,GAHK,EAILkB,GAJK,EAKLe,IALK,EAMLC,SANK,EAOL9B,IAPK,EAQLgG,YARK,EASE;AACP;AACA,MAAIC,UAAUlH,uBAAuBW,KAAvB,EAA8BC,UAA9B,EAA0CC,GAA1C,EAA+CI,IAA/C,CAAd;;AAEA,SAAOV,8BAA8BI,KAA9B,EAAqCC,UAArC,EAAiDC,GAAjD,EAAsDkB,GAAtD,EAA2De,IAA3D,EAAiEC,SAAjE,EAA4EmE,OAA5E,EAAqFD,YAArF,CAAP;AACD;;AAEM,SAAS1G,6BAAT,CACLI,KADK,EAELC,UAFK,EAGLC,GAHK,EAILkB,GAJK,EAKLe,IALK,EAMLC,SANK,EAOLmE,OAPK,EAQLD,YARK,EASE;AACP,MAAInE,wCAAiC,gBAAMqE,oBAAN,CAA2BrE,KAAKsE,OAAL,EAA3B,uBAArC,EAAgG;AAC9F,WAAO,qBAAcC,+BAAd,CACL1G,KADK,mBAGL,CAACmC,IAAD,EAAOwE,MAAP,CAAcJ,OAAd,CAHK,EAIL,UAACK,KAAD,EAAuC;AACrC,UAAIC,WAAWD,MAAM/E,KAAN,CAAY,CAAZ,CAAf;AACA,aAAO9B,EAAE+G,cAAF,CAAiBF,MAAM,CAAN,CAAjB,EAA6BC,QAA7B,CAAP;AACD,KAPI,CAAP;AASD;AACD1E,SAAOA,KAAK4E,kBAAL,EAAP;;AAEA;AACA,MAAI,EAAE5E,kCAAF,CAAJ,EAAoC;AAClC,UAAMnC,MAAMgH,0BAAN,CAAiChH,MAAMyC,UAAN,CAAiBwE,SAAlD,EAA6D,eAA7D,CAAN;AACD;;AAED;AACA,MAAI,CAAC,wBAAWjH,KAAX,EAAkBmC,IAAlB,CAAL,EAA8B;AAC5B,UAAMnC,MAAMgH,0BAAN,CAAiChH,MAAMyC,UAAN,CAAiBwE,SAAlD,EAA6D,cAA7D,CAAN;AACD;;AAED;AACA,MAAIX,iBAAiB,IAArB,EAA2BzG,mBAAmBG,KAAnB;;AAE3B;AACA,MAAI8F,SAAShG,KAAKE,KAAL,EAAYmC,IAAZ,EAAkBC,SAAlB,EAA6BmE,OAA7B,CAAb;;AAEA;AACA;;AAEA;AACA,2BAAUT,iCAAV,EAAmC,8BAAnC;;AAEA;AACA,SAAOA,MAAP;AACD;;AAED;AACO,SAASjG,kBAAT,CAA4BG,KAA5B,EAA0C;AAC/C;AACA,MAAIkH,cAAclH,MAAM8C,iBAAN,EAAlB;;AAEA;AACAoE,cAAYxD,OAAZ;;AAEA;AACA;AACA1D,QAAMmH,UAAN,CAAiBD,WAAjB;;AAEA;AACD;;AAED;AACO,SAASpH,IAAT,CAAcE,KAAd,EAA4B2C,CAA5B,EAAsCX,CAAtC,EAAgDoF,QAAhD,EAAgF;AACrF;AACAA,aAAWA,YAAY,EAAvB;;AAEA;AACA,MAAI,wBAAWpH,KAAX,EAAkB2C,CAAlB,MAAyB,KAA7B,EAAoC;AAClC,UAAM3C,MAAMgH,0BAAN,CAAiChH,MAAMyC,UAAN,CAAiBwE,SAAlD,EAA6D,cAA7D,CAAN;AACD;AACD,MAAItE,qCAA8B,gBAAM6D,oBAAN,CAA2B7D,EAAE8D,OAAF,EAA3B,uBAAlC,EAA0F;AACxF,QAAIY,WAAW,CAAC1E,CAAD,EAAIgE,MAAJ,CAAWS,QAAX,CAAf;AACA,WAAO,qBAAcV,+BAAd,CAA8C1G,KAA9C,mBAA4DqH,QAA5D,EAAsE,iBAAS;AACpF,UAAIR,WAAaD,MAAM/E,KAAN,CAAY,CAAZ,CAAjB;AACA,aAAO9B,EAAE+G,cAAF,CAAiBF,MAAM,CAAN,CAAjB,EAA2BC,QAA3B,CAAP;AACD,KAHM,CAAP;AAID;AACD,2BAAUlE,+BAAV;;AAEA;AACA,2BAAUA,EAAE2E,KAAZ,EAAmB,8BAAnB;AACA,SAAO3E,EAAE2E,KAAF,CAAQtF,CAAR,EAAWoF,QAAX,CAAP;AACD","file":"call.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { PropertyKeyValue } from \"../types.js\";\nimport type { ECMAScriptFunctionValue } from \"../values/index.js\";\nimport { LexicalEnvironment, Reference, EnvironmentRecord, GlobalEnvironmentRecord } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport Value from \"../values/Value.js\";\nimport {\n  FunctionValue,\n  ECMAScriptSourceFunctionValue,\n  ObjectValue,\n  NullValue,\n  UndefinedValue,\n  NativeFunctionValue,\n  AbstractObjectValue,\n  AbstractValue,\n} from \"../values/index.js\";\nimport {\n  GetIterator,\n  HasSomeCompatibleType,\n  IsCallable,\n  IsPropertyKey,\n  IteratorStep,\n  IteratorValue,\n  ToObjectPartial,\n} from \"./index.js\";\nimport { GeneratorStart } from \"../methods/generator.js\";\nimport { OrdinaryCreateFromConstructor } from \"../methods/create.js\";\nimport {\n  ReturnCompletion,\n  AbruptCompletion,\n  JoinedAbruptCompletions,\n  PossiblyNormalCompletion,\n} from \"../completions.js\";\nimport { GetTemplateObject, GetV, GetThisValue } from \"../methods/get.js\";\nimport { construct_empty_effects } from \"../realm.js\";\nimport { Environment, Functions, Join } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeExpression, BabelNodeSpreadElement, BabelNodeTemplateLiteral } from \"babel-types\";\nimport * as t from \"babel-types\";\n\n// ECMA262 12.3.6.1\nexport function ArgumentListEvaluation(\n  realm: Realm,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  argNodes: Array<BabelNodeExpression | BabelNodeSpreadElement> | BabelNodeTemplateLiteral\n): Array<Value> {\n  if (Array.isArray(argNodes)) {\n    let args = [];\n    for (let node_ of argNodes) {\n      if (node_.type === \"SpreadElement\") {\n        let node = (node_: BabelNodeSpreadElement);\n        // 1. Let list be a new empty List.\n        let list = args;\n\n        // 2. Let spreadRef be the result of evaluating AssignmentExpression.\n        let spreadRef = env.evaluate(node.argument, strictCode);\n\n        // 3. Let spreadObj be ? GetValue(spreadRef).\n        let spreadObj = Environment.GetValue(realm, spreadRef);\n\n        // 4. Let iterator be ? GetIterator(spreadObj).\n        let iterator = GetIterator(realm, spreadObj);\n\n        // 5. Repeat\n        while (true) {\n          // a. Let next be ? IteratorStep(iterator).\n          let next = IteratorStep(realm, iterator);\n\n          // b. If next is false, return list.\n          if (!next) {\n            break;\n          }\n\n          // c. Let nextArg be ? IteratorValue(next).\n          let nextArg = IteratorValue(realm, next);\n\n          // d. Append nextArg as the last element of list.\n          list.push(nextArg);\n        }\n      } else {\n        let ref = env.evaluate(node_, strictCode);\n        let expr = Environment.GetValue(realm, ref);\n        args.push(expr);\n      }\n    }\n    return args;\n  } else {\n    let node = (argNodes: BabelNodeTemplateLiteral);\n    if (node.expressions.length === 0) {\n      // 1. Let templateLiteral be this TemplateLiteral.\n      let templateLiteral = node;\n\n      // 2. Let siteObj be GetTemplateObject(templateLiteral).\n      let siteObj = GetTemplateObject(realm, templateLiteral);\n\n      // 3. Return a List containing the one element which is siteObj.\n      return [siteObj];\n    } else {\n      // 1. Let templateLiteral be this TemplateLiteral.\n      let templateLiteral = node;\n\n      // 2. Let siteObj be GetTemplateObject(templateLiteral).\n      let siteObj = GetTemplateObject(realm, templateLiteral);\n\n      // 3. Let firstSubRef be the result of evaluating Expression.\n      let firstSubRef = env.evaluate(node.expressions[0], strictCode);\n\n      // 4. Let firstSub be ? GetValue(firstSubRef).\n      let firstSub = Environment.GetValue(realm, firstSubRef);\n\n      // 5. Let restSub be SubstitutionEvaluation of TemplateSpans.\n      let restSub = node.expressions.slice(1, node.expressions.length).map(expr => {\n        return Environment.GetValue(realm, env.evaluate(expr, strictCode));\n      });\n\n      // 6. ReturnIfAbrupt(restSub).\n\n      // 7. Assert: restSub is a List.\n      invariant(restSub.constructor === Array, \"restSub is a List\");\n\n      // 8. Return a List whose first element is siteObj, whose second elements is firstSub, and whose subsequent elements are the elements of restSub, in order. restSub may contain no elements.\n      return [siteObj, firstSub, ...restSub];\n    }\n  }\n}\n\n// ECMA262 7.3.18\nexport function Invoke(realm: Realm, V: Value, P: PropertyKeyValue, argumentsList?: Array<Value>): Value {\n  // 1. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n  // 2. If argumentsList was not passed, let argumentsList be a new empty List.\n  if (!argumentsList) argumentsList = [];\n\n  // 3. Let func be ? GetV(V, P).\n  let func = GetV(realm, V, P);\n\n  // 4. Return ? Call(func, V, argumentsList).\n  return Call(realm, func, V, argumentsList);\n}\n\n// ECMA262 12.3.4.2\nexport function EvaluateCall(\n  realm: Realm,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  ref: Reference | Value,\n  args: Array<BabelNode> | BabelNodeTemplateLiteral\n): Value {\n  let thisValue;\n\n  // 1. Let func be ? GetValue(ref).\n  let func = Environment.GetValue(realm, ref);\n\n  // 2. If Type(ref) is Reference, then\n  if (ref instanceof Reference) {\n    // a. If IsPropertyReference(ref) is true, then\n    if (Environment.IsPropertyReference(realm, ref)) {\n      // i. Let thisValue be GetThisValue(ref).\n      thisValue = GetThisValue(realm, ref);\n    } else {\n      // b. Else, the base of ref is an Environment Record\n      // i. Let refEnv be GetBase(ref).\n      let refEnv = Environment.GetBase(realm, ref);\n      invariant(refEnv instanceof EnvironmentRecord);\n\n      // ii. Let thisValue be refEnv.WithBaseObject().\n      thisValue = refEnv.WithBaseObject();\n    }\n  } else {\n    // 3. Else Type(ref) is not Reference,\n    // a. Let thisValue be undefined.\n    thisValue = realm.intrinsics.undefined;\n  }\n\n  // 4. Return ? EvaluateDirectCall(func, thisValue, arguments, tailPosition).\n  return EvaluateDirectCall(realm, strictCode, env, ref, func, thisValue, args);\n}\n\n// ECMA262 9.2.1.1\nexport function PrepareForOrdinaryCall(\n  realm: Realm,\n  F: ECMAScriptFunctionValue,\n  newTarget?: ObjectValue\n): ExecutionContext {\n  // 1. Assert: Type(newTarget) is Undefined or Object.\n  invariant(\n    newTarget === undefined || newTarget instanceof ObjectValue,\n    \"expected undefined or object value for new target\"\n  );\n\n  // 2. Let callerContext be the running execution context.\n  let callerContext = realm.getRunningContext();\n\n  // 3. Let calleeContext be a new ECMAScript code execution context.\n  let calleeContext = realm.createExecutionContext();\n\n  // 4. Set the Function of calleeContext to F.\n  calleeContext.setFunction(F);\n  calleeContext.setCaller(realm.getRunningContext());\n\n  // 5. Let calleeRealm be the value of F's [[Realm]] internal slot.\n  let calleeRealm = realm;\n\n  // 6. Set the Realm of calleeContext to calleeRealm.\n  calleeContext.realm = calleeRealm;\n\n  // 7. Set the ScriptOrModule of calleeContext to the value of F's [[ScriptOrModule]] internal slot.\n  calleeContext.ScriptOrModule = F.$ScriptOrModule;\n\n  // 8. Let localEnv be NewFunctionEnvironment(F, newTarget).\n  let localEnv = Environment.NewFunctionEnvironment(realm, F, newTarget);\n\n  // 9. Set the LexicalEnvironment of calleeContext to localEnv.\n  calleeContext.lexicalEnvironment = localEnv;\n\n  // 10. Set the VariableEnvironment of calleeContext to localEnv.\n  calleeContext.variableEnvironment = localEnv;\n\n  // 11. If callerContext is not already suspended, suspend callerContext.\n  callerContext.suspend();\n\n  // 12. Push calleeContext onto the execution context stack; calleeContext is now the running execution context.\n  realm.pushContext(calleeContext);\n\n  // 13. NOTE Any exception objects produced after this point are associated with calleeRealm.\n\n  // 14. Return calleeContext.\n  return calleeContext;\n}\n\n// ECMA262 9.2.1.2\nexport function OrdinaryCallBindThis(\n  realm: Realm,\n  F: ECMAScriptFunctionValue,\n  calleeContext: ExecutionContext,\n  thisArgument: Value\n): NullValue | ObjectValue | AbstractObjectValue | UndefinedValue {\n  // 1. Let thisMode be the value of F's [[ThisMode]] internal slot.\n  let thisMode = F.$ThisMode;\n\n  // 2. If thisMode is lexical, return NormalCompletion(undefined).\n  if (thisMode === \"lexical\") return realm.intrinsics.undefined;\n\n  // 3. Let calleeRealm be the value of F's [[Realm]] internal slot.\n  let calleeRealm = F.$Realm;\n\n  // 4. Let localEnv be the LexicalEnvironment of calleeContext.\n  let localEnv = calleeContext.lexicalEnvironment;\n\n  let thisValue;\n  // 5. If thisMode is strict, let thisValue be thisArgument.\n  if (thisMode === \"strict\") {\n    thisValue = (thisArgument: any);\n  } else {\n    // 6. Else,\n    // a. If thisArgument is null or undefined, then\n    if (HasSomeCompatibleType(thisArgument, NullValue, UndefinedValue)) {\n      // i. Let globalEnv be calleeRealm.[[GlobalEnv]].\n      let globalEnv = realm.$GlobalEnv;\n\n      // ii. Let globalEnvRec be globalEnv's EnvironmentRecord.\n      let globalEnvRec = globalEnv.environmentRecord;\n      invariant(globalEnvRec instanceof GlobalEnvironmentRecord);\n\n      // iii. Let thisValue be globalEnvRec.[[GlobalThisValue]].\n      thisValue = globalEnvRec.$GlobalThisValue;\n    } else {\n      //  b. Else,\n      // i. Let thisValue be ! ToObject(thisArgument).\n      thisValue = ToObjectPartial(calleeRealm, thisArgument);\n\n      // ii. NOTE ToObject produces wrapper objects using calleeRealm.\n    }\n  }\n\n  // 7. Let envRec be localEnv's EnvironmentRecord.\n  invariant(localEnv !== undefined);\n  let envRec = localEnv.environmentRecord;\n\n  // 8. Assert: The next step never returns an abrupt completion because envRec.[[ThisBindingStatus]] is not \"initialized\".\n\n  // 9. Return envRec.BindThisValue(thisValue).\n  return envRec.BindThisValue(thisValue);\n}\n\n// ECMA262 9.2.1.3\nexport function OrdinaryCallEvaluateBody(\n  realm: Realm,\n  F: ECMAScriptFunctionValue,\n  argumentsList: Array<Value>\n): Reference | Value | AbruptCompletion {\n  if (F instanceof NativeFunctionValue) {\n    let env = realm.getRunningContext().lexicalEnvironment;\n    try {\n      return F.callCallback(env.environmentRecord.GetThisBinding(), argumentsList, env.environmentRecord.$NewTarget);\n    } catch (err) {\n      if (err instanceof AbruptCompletion) {\n        return err;\n      } else if (err instanceof Error) {\n        throw err;\n      } else {\n        throw new FatalError(err);\n      }\n    }\n  } else {\n    invariant(F instanceof ECMAScriptSourceFunctionValue);\n    if (F.$FunctionKind === \"generator\") {\n      // 1. Perform ? FunctionDeclarationInstantiation(functionObject, argumentsList).\n      Functions.FunctionDeclarationInstantiation(realm, F, argumentsList);\n\n      // 2. Let G be ? OrdinaryCreateFromConstructor(functionObject, \"%GeneratorPrototype%\", « [[GeneratorState]], [[GeneratorContext]] »).\n      let G = OrdinaryCreateFromConstructor(realm, F, \"GeneratorPrototype\", {\n        $GeneratorState: undefined,\n        $GeneratorContext: undefined,\n      });\n\n      // 3. Perform GeneratorStart(G, FunctionBody).\n      let code = F.$ECMAScriptCode;\n      invariant(code !== undefined);\n      GeneratorStart(realm, G, code);\n\n      // 4. Return Completion{[[Type]]: return, [[Value]]: G, [[Target]]: empty}.\n      return new ReturnCompletion(G, realm.currentLocation);\n    } else {\n      // 1. Perform ? FunctionDeclarationInstantiation(F, argumentsList).\n      Functions.FunctionDeclarationInstantiation(realm, F, argumentsList);\n\n      // 2. Return the result of EvaluateBody of the parsed code that is the value of F's\n      //    [[ECMAScriptCode]] internal slot passing F as the argument.\n      let code = F.$ECMAScriptCode;\n      invariant(code !== undefined);\n      let context = realm.getRunningContext();\n      let c = context.lexicalEnvironment.evaluateCompletionDeref(code, F.$Strict);\n      // We are about the leave this function and this presents a join point where all non exeptional control flows\n      // converge into a single flow using the joined effects as the new state.\n      c = Functions.incorporateSavedCompletion(realm, c);\n      let joinedEffects;\n      if (c instanceof PossiblyNormalCompletion) {\n        let e = realm.getCapturedEffects(c);\n        if (e !== undefined) {\n          // There were earlier, conditional exits from the function\n          // We join together the current effects with the effects of any earlier returns that are tracked in c.\n          realm.stopEffectCaptureAndUndoEffects(c);\n        } else {\n          e = construct_empty_effects(realm);\n        }\n        joinedEffects = Join.joinEffectsAndPromoteNestedReturnCompletions(realm, c, e);\n      } else if (c instanceof JoinedAbruptCompletions) {\n        joinedEffects = Join.joinEffectsAndPromoteNestedReturnCompletions(realm, c, construct_empty_effects(realm));\n      }\n      if (joinedEffects !== undefined) {\n        let result = joinedEffects[0];\n        if (result instanceof ReturnCompletion) {\n          realm.applyEffects(joinedEffects);\n          return result;\n        }\n        invariant(result instanceof JoinedAbruptCompletions);\n        if (!(result.consequent instanceof ReturnCompletion || result.alternate instanceof ReturnCompletion)) {\n          realm.applyEffects(joinedEffects);\n          throw result;\n        }\n        // There is a normal return exit, but also one or more throw completions.\n        // The throw completions must be extracted into a saved possibly normal completion\n        // so that the caller can pick them up in its next completion.\n        joinedEffects = extractAndSavePossiblyNormalCompletion(result);\n        result = joinedEffects[0];\n        invariant(result instanceof ReturnCompletion);\n        realm.applyEffects(joinedEffects);\n        return result;\n      } else {\n        invariant(c instanceof Value || c instanceof AbruptCompletion);\n        return c;\n      }\n    }\n  }\n\n  function extractAndSavePossiblyNormalCompletion(c: JoinedAbruptCompletions) {\n    // There are throw completions that conditionally escape from the the call.\n    // We need to carry on in normal mode (after arranging to capturing effects)\n    // while stashing away the throw completions so that the next completion we return\n    // incorporates them.\n    let [joinedEffects, possiblyNormalCompletion] = Join.unbundleReturnCompletion(realm, c);\n    realm.composeWithSavedCompletion(possiblyNormalCompletion);\n    return joinedEffects;\n  }\n}\n\n// ECMA262 12.3.4.3\nexport function EvaluateDirectCall(\n  realm: Realm,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  ref: Value | Reference,\n  func: Value,\n  thisValue: Value,\n  args: Array<BabelNodeExpression | BabelNodeSpreadElement> | BabelNodeTemplateLiteral,\n  tailPosition?: boolean\n): Value {\n  // 1. Let argList be ? ArgumentListEvaluation(arguments).\n  let argList = ArgumentListEvaluation(realm, strictCode, env, args);\n\n  return EvaluateDirectCallWithArgList(realm, strictCode, env, ref, func, thisValue, argList, tailPosition);\n}\n\nexport function EvaluateDirectCallWithArgList(\n  realm: Realm,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  ref: Value | Reference,\n  func: Value,\n  thisValue: Value,\n  argList: Array<Value>,\n  tailPosition?: boolean\n): Value {\n  if (func instanceof AbstractValue && Value.isTypeCompatibleWith(func.getType(), FunctionValue)) {\n    return AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      Value,\n      [func].concat(argList),\n      (nodes: Array<BabelNodeExpression>) => {\n        let fun_args = nodes.slice(1);\n        return t.callExpression(nodes[0], ((fun_args: any): Array<BabelNodeExpression | BabelNodeSpreadElement>));\n      }\n    );\n  }\n  func = func.throwIfNotConcrete();\n\n  // 2. If Type(func) is not Object, throw a TypeError exception.\n  if (!(func instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an object\");\n  }\n\n  // 3. If IsCallable(func) is false, throw a TypeError exception.\n  if (!IsCallable(realm, func)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n  }\n\n  // 4. If tailPosition is true, perform PrepareForTailCall().\n  if (tailPosition === true) PrepareForTailCall(realm);\n\n  // 5. Let result be Call(func, thisValue, argList).\n  let result = Call(realm, func, thisValue, argList);\n\n  // 6. Assert: If tailPosition is true, the above call will not return here, but instead\n  //    evaluation will continue as if the following return has already occurred.\n\n  // 7. Assert: If result is not an abrupt completion, then Type(result) is an ECMAScript language type.\n  invariant(result instanceof Value, \"expected language value type\");\n\n  // 8. Return result.\n  return result;\n}\n\n// ECMA262 14.6.3\nexport function PrepareForTailCall(realm: Realm) {\n  // 1. Let leafContext be the running execution context.\n  let leafContext = realm.getRunningContext();\n\n  // 2. Suspend leafContext.\n  leafContext.suspend();\n\n  // 3. Pop leafContext from the execution context stack. The execution context now on the\n  //    top of the stack becomes the running execution context.\n  realm.popContext(leafContext);\n\n  // TODO #1008 4. Assert: leafContext has no further use. It will never be activated as the running execution context.\n}\n\n// ECMA262 7.3.12\nexport function Call(realm: Realm, F: Value, V: Value, argsList?: Array<Value>): Value {\n  // 1. If argumentsList was not passed, let argumentsList be a new empty List.\n  argsList = argsList || [];\n\n  // 2. If IsCallable(F) is false, throw a TypeError exception.\n  if (IsCallable(realm, F) === false) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n  }\n  if (F instanceof AbstractValue && Value.isTypeCompatibleWith(F.getType(), FunctionValue)) {\n    let fullArgs = [F].concat(argsList);\n    return AbstractValue.createTemporalFromBuildFunction(realm, Value, fullArgs, nodes => {\n      let fun_args = ((nodes.slice(1): any): Array<BabelNodeExpression | BabelNodeSpreadElement>);\n      return t.callExpression(nodes[0], fun_args);\n    });\n  }\n  invariant(F instanceof ObjectValue);\n\n  // 3. Return ? F.[[Call]](V, argumentsList).\n  invariant(F.$Call, \"no call method on this value\");\n  return F.$Call(V, argsList);\n}\n"]}