{"version":3,"sources":["../scripts/detect_bad_deps.js"],"names":["error","stdout","stderr","start","indexOf","lines","substr","split","splice","found_ecma","found_realm","cycle_len","line","startsWith","includes","console","log","process","exit","MAX_CYCLE_LEN","then","deps","res","obj","idx_deps","depends","length","dep","ext_deps","filter","depend"],"mappings":";;AAWA;;;;AACA;;;;AAZA;;;;;;;;;AAcA,yBAAK,sBAAL,EAA6B,UAASA,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC3DF;AACAC;AACA;;;;;;;;;;AAUA,MAAIE,QAAQD,OAAOE,OAAP,CAAe,0CAAf,CAAZ;AACA,MAAIC,QAAQH,OAAOI,MAAP,CAAcH,KAAd,EAAqBI,KAArB,CAA2B,IAA3B,EAAiCC,MAAjC,CAAwC,CAAxC,CAAZ;AACA,MAAIC,aAAa,KAAjB;AACA,MAAIC,cAAc,KAAlB;AACA,MAAIC,YAAY,CAAhB;AAjB2D;AAAA;AAAA;;AAAA;AAkB3D,yBAAiBN,KAAjB,8HAAwB;AAAA,UAAfO,IAAe;;AACtB,UAAI,CAACA,KAAKC,UAAL,CAAgB,IAAhB,CAAL,EAA4B;AAC5BF,mBAAa,CAAb;AACAF,mBAAaA,cAAcG,KAAKE,QAAL,CAAc,WAAd,CAA3B;AACAJ,oBAAcA,eAAeE,KAAKE,QAAL,CAAc,WAAd,CAA7B;AACD;AAvB0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwB3D,MAAIL,cAAcC,WAAlB,EAA+B;AAC7BK,YAAQC,GAAR,CAAY,0EAAZ;AACAC,YAAQC,IAAR,CAAa,CAAb;AACD;AACDH,UAAQC,GAAR,CAAY,oBAAoBL,SAAhC;AACA,MAAIQ,gBAAgB,EAApB,CA7B2D,CA6BnC;AACxB,MAAIR,YAAYQ,aAAhB,EAA+B;AAC7BJ,YAAQC,GAAR,CAAY,iEAAiEG,aAA7E;AACAJ,YAAQC,GAAR,CAAY,mBAAZ;AACAC,YAAQC,IAAR,CAAa,CAAb;AACD;AACF,CAnCD;;AAqCA;AACA;;AAEA,qBAAM,QAAN,EAAgBE,IAAhB,CAAqB,eAAO;AAC1B,MAAIC,OAAOC,IAAIC,GAAJ,EAAX;AACA,MAAIC,WAAWF,IAAIG,OAAJ,CAAY,kBAAZ,CAAf;AACA,MAAID,SAASE,MAAT,KAAoB,CAApB,IAAyBF,SAAS,CAAT,MAAgB,iBAA7C,EAAgE;AAC9DT,YAAQC,GAAR,CAAY,qDAAqDQ,SAAS,CAAT,CAAjE;AACAP,YAAQC,IAAR,CAAa,CAAb;AACD;;AAED,OAAK,IAAIS,GAAT,IAAgBN,IAAhB,EAAsB;AACpB;AACA,QACEM,IAAId,UAAJ,CAAe,oBAAf,KACAc,QAAQ,0BADR,IAEAA,QAAQ,2BAHV,EAIE;AACA,UAAIC,WAAWN,IACZG,OADY,CACJE,GADI,EAEZE,MAFY,CAEL;AAAA,eAAUC,WAAW,kBAAX,IAAiC,CAACA,OAAOjB,UAAP,CAAkB,oBAAlB,CAA5C;AAAA,OAFK,CAAf;AAGA,UAAIe,SAASF,MAAT,GAAkB,CAAtB,EAAyB;AACvBX,gBAAQC,GAAR,CAAY,yBAAyBW,GAAzB,GAA+B,cAA/B,GAAgDC,QAA5D;AACAX,gBAAQC,IAAR,CAAa,CAAb;AACD;AACF;AACF;AACF,CAxBD","file":"detect_bad_deps.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport madge from \"madge\";\nimport { exec } from \"child_process\";\n\nexec(\"flow check --profile\", function(error, stdout, stderr) {\n  error;\n  stdout;\n  /*\n  pattern format:\n  ...\n  cycle detected among the following files:\n      file1\n      file2\n      ...\n      filen\n  ... more flow output after unindented line\n  */\n  let start = stderr.indexOf(\"cycle detected among the following files\");\n  let lines = stderr.substr(start).split(\"\\n\").splice(1);\n  let found_ecma = false;\n  let found_realm = false;\n  let cycle_len = 0;\n  for (let line of lines) {\n    if (!line.startsWith(\"\\t\")) break;\n    cycle_len += 1;\n    found_ecma = found_ecma || line.includes(\"/ecma262/\");\n    found_realm = found_realm || line.includes(\"/realm.js\");\n  }\n  if (found_ecma && found_realm) {\n    console.log(\"Invalid Dependencies: ecma262/ is in a circular dependency with realm.js\");\n    process.exit(1);\n  }\n  console.log(\"Biggest cycle: \" + cycle_len);\n  let MAX_CYCLE_LEN = 58; // NEVER EVER increase this value\n  if (cycle_len > MAX_CYCLE_LEN) {\n    console.log(\"Error: You increased cycle length from the previous high of \" + MAX_CYCLE_LEN);\n    console.log(\"This is never OK.\");\n    process.exit(1);\n  }\n});\n\n// NB: This doesn't prevent cycles using \"import type\" because those are\n// erased in the lib folder but madge doesn't work with flow type imports.\n\nmadge(\"./lib/\").then(res => {\n  let deps = res.obj();\n  let idx_deps = res.depends(\"intrinsics/index\");\n  if (idx_deps.length !== 1 || idx_deps[0] !== \"construct_realm\") {\n    console.log(\"Invalid Dependency: Intrinsics index depends on \" + idx_deps[0]);\n    process.exit(1);\n  }\n\n  for (let dep in deps) {\n    // Nothing in intrinsics/ecma262 depends on anything but intrinsics/index except Error and global.\n    if (\n      dep.startsWith(\"intrinsics/ecma262\") &&\n      dep !== \"intrinsics/ecma262/Error\" &&\n      dep !== \"intrinsics/ecma262/global\"\n    ) {\n      let ext_deps = res\n        .depends(dep)\n        .filter(depend => depend !== \"intrinsics/index\" && !depend.startsWith(\"intrinsics/ecma262\"));\n      if (ext_deps.length > 0) {\n        console.log(\"Invalid Dependency: \" + dep + \" depends on \" + ext_deps);\n        process.exit(1);\n      }\n    }\n  }\n});\n"]}