{"version":3,"sources":["../../src/debugger/BreakpointManager.js"],"names":["BreakpointManager","_breakpointMaps","Map","breakpoints","_doBreakpointsAction","_addBreakpoint","bind","bp","filePath","breakpointMap","addBreakpoint","line","column","lineNum","columnNum","getBreakpoint","undefined","_removeBreakpoint","removeBreakpoint","_enableBreakpoint","enableBreakpoint","_disableBreakpoint","disableBreakpoint","action"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;AACA;;;;AAGA;IACaA,iB,WAAAA,iB;AACX,+BAAc;AAAA;;AACZ,SAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;AACD;;;;uCAGkBC,W,EAAoC;AACrD,WAAKC,oBAAL,CAA0BD,WAA1B,EAAuC,KAAKE,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAvC;AACD;;;mCAEcC,E,EAAoB;AACjC,UAAI,EAAEA,GAAGC,QAAH,IAAe,KAAKP,eAAtB,CAAJ,EAA4C;AAC1C,aAAKA,eAAL,CAAqBM,GAAGC,QAAxB,IAAoC,+CAAyBD,GAAGC,QAA5B,CAApC;AACD;AACD,UAAIC,gBAAgB,KAAKR,eAAL,CAAqBM,GAAGC,QAAxB,CAApB;AACAC,oBAAcC,aAAd,CAA4BH,GAAGI,IAA/B,EAAqCJ,GAAGK,MAAxC;AACD;;;kCAEaJ,Q,EAAkBK,O,EAA2D;AAAA,UAA1CC,SAA0C,uEAAtB,CAAsB;;AACzF,UAAIN,YAAY,KAAKP,eAArB,EAAsC;AACpC,YAAIQ,gBAAgB,KAAKR,eAAL,CAAqBO,QAArB,CAApB;AACA,eAAOC,cAAcM,aAAd,CAA4BF,OAA5B,EAAqCC,SAArC,CAAP;AACD;AACD,aAAOE,SAAP;AACD;;;0CAEqBb,W,EAAoC;AACxD,WAAKC,oBAAL,CAA0BD,WAA1B,EAAuC,KAAKc,iBAAL,CAAuBX,IAAvB,CAA4B,IAA5B,CAAvC;AACD;;;sCAEiBC,E,EAAoB;AACpC,UAAIA,GAAGC,QAAH,IAAe,KAAKP,eAAxB,EAAyC;AACvC,aAAKA,eAAL,CAAqBM,GAAGC,QAAxB,EAAkCU,gBAAlC,CAAmDX,GAAGI,IAAtD,EAA4DJ,GAAGK,MAA/D;AACD;AACF;;;0CAEqBT,W,EAAoC;AACxD,WAAKC,oBAAL,CAA0BD,WAA1B,EAAuC,KAAKgB,iBAAL,CAAuBb,IAAvB,CAA4B,IAA5B,CAAvC;AACD;;;sCAEiBC,E,EAAoB;AACpC,UAAIA,GAAGC,QAAH,IAAe,KAAKP,eAAxB,EAAyC;AACvC,aAAKA,eAAL,CAAqBM,GAAGC,QAAxB,EAAkCY,gBAAlC,CAAmDb,GAAGI,IAAtD,EAA4DJ,GAAGK,MAA/D;AACD;AACF;;;2CAEsBT,W,EAAoC;AACzD,WAAKC,oBAAL,CAA0BD,WAA1B,EAAuC,KAAKkB,kBAAL,CAAwBf,IAAxB,CAA6B,IAA7B,CAAvC;AACD;;;uCAEkBC,E,EAAoB;AACrC,UAAIA,GAAGC,QAAH,IAAe,KAAKP,eAAxB,EAAyC;AACvC,aAAKA,eAAL,CAAqBM,GAAGC,QAAxB,EAAkCc,iBAAlC,CAAoDf,GAAGI,IAAvD,EAA6DJ,GAAGK,MAAhE;AACD;AACF;;;yCAEoBT,W,EAAoCoB,M,EAAgC;AAAA;AAAA;AAAA;;AAAA;AACvF,6BAAepB,WAAf,8HAA4B;AAAA,cAAnBI,EAAmB;;AAC1BgB,iBAAOhB,EAAP;AACD;AAHsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxF","file":"BreakpointManager.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PerFileBreakpointMap } from \"./PerFileBreakpointMap.js\";\nimport { Breakpoint } from \"./Breakpoint.js\";\nimport type { Breakpoint as BreakpointType } from \"./types.js\";\n\n// Storing BreakpointStores for all source files\nexport class BreakpointManager {\n  constructor() {\n    this._breakpointMaps = new Map();\n  }\n  _breakpointMaps: { [string]: PerFileBreakpointMap };\n\n  addBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._addBreakpoint.bind(this));\n  }\n\n  _addBreakpoint(bp: BreakpointType) {\n    if (!(bp.filePath in this._breakpointMaps)) {\n      this._breakpointMaps[bp.filePath] = new PerFileBreakpointMap(bp.filePath);\n    }\n    let breakpointMap = this._breakpointMaps[bp.filePath];\n    breakpointMap.addBreakpoint(bp.line, bp.column);\n  }\n\n  getBreakpoint(filePath: string, lineNum: number, columnNum: number = 0): void | Breakpoint {\n    if (filePath in this._breakpointMaps) {\n      let breakpointMap = this._breakpointMaps[filePath];\n      return breakpointMap.getBreakpoint(lineNum, columnNum);\n    }\n    return undefined;\n  }\n\n  removeBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._removeBreakpoint.bind(this));\n  }\n\n  _removeBreakpoint(bp: BreakpointType) {\n    if (bp.filePath in this._breakpointMaps) {\n      this._breakpointMaps[bp.filePath].removeBreakpoint(bp.line, bp.column);\n    }\n  }\n\n  enableBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._enableBreakpoint.bind(this));\n  }\n\n  _enableBreakpoint(bp: BreakpointType) {\n    if (bp.filePath in this._breakpointMaps) {\n      this._breakpointMaps[bp.filePath].enableBreakpoint(bp.line, bp.column);\n    }\n  }\n\n  disableBreakpointMulti(breakpoints: Array<BreakpointType>) {\n    this._doBreakpointsAction(breakpoints, this._disableBreakpoint.bind(this));\n  }\n\n  _disableBreakpoint(bp: BreakpointType) {\n    if (bp.filePath in this._breakpointMaps) {\n      this._breakpointMaps[bp.filePath].disableBreakpoint(bp.line, bp.column);\n    }\n  }\n\n  _doBreakpointsAction(breakpoints: Array<BreakpointType>, action: BreakpointType => void) {\n    for (let bp of breakpoints) {\n      action(bp);\n    }\n  }\n}\n"]}