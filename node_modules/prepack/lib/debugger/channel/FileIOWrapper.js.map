{"version":3,"sources":["../../../src/debugger/channel/FileIOWrapper.js"],"names":["FileIOWrapper","isAdapter","inFilePath","outFilePath","_inFilePath","join","__dirname","_outFilePath","_packager","_isAdapter","errorHandler","messageProcessor","readFile","encoding","err","contents","message","unpackage","readIn","writeFileSync","readFileSync","package"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEaA,a,WAAAA,a;AACX,yBAAYC,SAAZ,EAAgCC,UAAhC,EAAoDC,WAApD,EAAyE;AAAA;;AACvE;AACA,SAAKC,WAAL,GAAmB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkCJ,UAAlC,CAAnB;AACA,SAAKK,YAAL,GAAoB,eAAKF,IAAL,CAAUC,SAAV,EAAqB,WAArB,EAAkCH,WAAlC,CAApB;AACA,SAAKK,SAAL,GAAiB,qCAAoBP,SAApB,CAAjB;AACA,SAAKQ,UAAL,GAAkBR,SAAlB;AACD;;;;;;AAMD;2BACOS,Y,EAA0CC,gB,EAA6C;AAAA;;AAC5F,mBAAGC,QAAH,CAAY,KAAKR,WAAjB,EAA8B,EAAES,UAAU,MAAZ,EAA9B,EAAoD,UAACC,GAAD,EAAmBC,QAAnB,EAAwC;AAC1F,YAAID,GAAJ,EAAS;AACPJ,uBAAaI,GAAb;AACA;AACD;AACD,YAAIE,UAAU,MAAKR,SAAL,CAAeS,SAAf,CAAyBF,QAAzB,CAAd;AACA,YAAIC,YAAY,IAAhB,EAAsB;AACpB,gBAAKE,MAAL,CAAYR,YAAZ,EAA0BC,gBAA1B;AACA;AACD;AACD;AACA,qBAAGQ,aAAH,CAAiB,MAAKf,WAAtB,EAAmC,EAAnC;AACA;AACAO,yBAAiBK,OAAjB;AACD,OAdD;AAeD;;AAED;;;;iCACqB;AACnB,UAAIA,UAAyB,IAA7B;AACA,aAAO,IAAP,EAAa;AACX,YAAID,WAAW,aAAGK,YAAH,CAAgB,KAAKhB,WAArB,EAAkC,MAAlC,CAAf;AACAY,kBAAU,KAAKR,SAAL,CAAeS,SAAf,CAAyBF,QAAzB,CAAV;AACA,YAAIC,YAAY,IAAhB,EAAsB;AACtB;AACD;AACD;AACA,+BAAUA,YAAY,IAAtB;AACA;AACA,mBAAGG,aAAH,CAAiB,KAAKf,WAAtB,EAAmC,EAAnC;AACA,aAAOY,OAAP;AACD;;AAED;;;;qCACgC;AAC9B,UAAID,WAAW,aAAGK,YAAH,CAAgB,KAAKhB,WAArB,EAAkC,MAAlC,CAAf;AACA,UAAIY,UAAU,KAAKR,SAAL,CAAeS,SAAf,CAAyBF,QAAzB,CAAd;AACA,aAAOC,OAAP;AACD;;AAED;;;;iCACaD,Q,EAAkB;AAC7B,mBAAGI,aAAH,CAAiB,KAAKZ,YAAtB,EAAoC,KAAKC,SAAL,CAAea,OAAf,CAAuBN,QAAvB,CAApC;AACD;;;kCAEa;AACZ,mBAAGI,aAAH,CAAiB,KAAKf,WAAtB,EAAmC,EAAnC;AACD;;;mCAEc;AACb,mBAAGe,aAAH,CAAiB,KAAKZ,YAAtB,EAAoC,EAApC;AACD","file":"FileIOWrapper.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { MessagePackager } from \"./MessagePackager.js\";\nimport invariant from \"../../invariant.js\";\n\nexport class FileIOWrapper {\n  constructor(isAdapter: boolean, inFilePath: string, outFilePath: string) {\n    // the paths are expected to be relative to Prepack top level directory\n    this._inFilePath = path.join(__dirname, \"../../../\", inFilePath);\n    this._outFilePath = path.join(__dirname, \"../../../\", outFilePath);\n    this._packager = new MessagePackager(isAdapter);\n    this._isAdapter = isAdapter;\n  }\n  _inFilePath: string;\n  _outFilePath: string;\n  _packager: MessagePackager;\n  _isAdapter: boolean;\n\n  // Read in a message from the input asynchronously\n  readIn(errorHandler: (err: ?ErrnoError) => void, messageProcessor: (message: string) => void) {\n    fs.readFile(this._inFilePath, { encoding: \"utf8\" }, (err: ?ErrnoError, contents: string) => {\n      if (err) {\n        errorHandler(err);\n        return;\n      }\n      let message = this._packager.unpackage(contents);\n      if (message === null) {\n        this.readIn(errorHandler, messageProcessor);\n        return;\n      }\n      //clear the file\n      fs.writeFileSync(this._inFilePath, \"\");\n      //process the message\n      messageProcessor(message);\n    });\n  }\n\n  // Read in a message from the input synchronously\n  readInSync(): string {\n    let message: null | string = null;\n    while (true) {\n      let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n      message = this._packager.unpackage(contents);\n      if (message === null) continue;\n      break;\n    }\n    // loop should not break when message is still null\n    invariant(message !== null);\n    //clear the file\n    fs.writeFileSync(this._inFilePath, \"\");\n    return message;\n  }\n\n  // Read in a message from the input synchronously only once\n  readInSyncOnce(): null | string {\n    let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n    let message = this._packager.unpackage(contents);\n    return message;\n  }\n\n  // Write out a message to the output synchronously\n  writeOutSync(contents: string) {\n    fs.writeFileSync(this._outFilePath, this._packager.package(contents));\n  }\n\n  clearInFile() {\n    fs.writeFileSync(this._inFilePath, \"\");\n  }\n\n  clearOutFile() {\n    fs.writeFileSync(this._outFilePath, \"\");\n  }\n}\n"]}