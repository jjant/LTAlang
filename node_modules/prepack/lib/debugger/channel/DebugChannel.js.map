{"version":3,"sources":["../../../src/debugger/channel/DebugChannel.js"],"names":["DebugChannel","ioWrapper","_requestReceived","_ioWrapper","_marshaller","message","readInSyncOnce","parts","split","requestID","parseInt","isNaN","command","DEBUGGER_ATTACHED","clearInFile","writeOut","PREPACK_READY_RESPONSE","readInSync","unmarshallRequest","contents","writeOutSync","messageType","args","marshallBreakpointAcknowledge","breakpoints","filePath","line","column","breakpointInfo","kind","marshallBreakpointStopped","stackframes","marshallStackFramesResponse","scopes","marshallScopesResponse","variables","marshallVariablesResponse","marshallPrepackFinish"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAUA;;;;AACA;;AACA;;AACA;;;;;;AAGA;IACaA,Y,WAAAA,Y;AACX,wBAAYC,SAAZ,EAAsC;AAAA;;AACpC,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,WAAL,GAAmB,0CAAnB;AACD;;;;;;AAMD;;;yCAG8B;AAC5B,UAAIC,UAAU,KAAKF,UAAL,CAAgBG,cAAhB,EAAd;AACA,UAAID,YAAY,IAAhB,EAAsB,OAAO,KAAP;AACtB,UAAIE,QAAQF,QAAQG,KAAR,CAAc,GAAd,CAAZ;AACA,UAAIC,YAAYC,SAASH,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAhB;AACA,+BAAU,CAACI,MAAMF,SAAN,CAAX,EAA6B,6BAA7B;AACA,UAAIG,UAAUL,MAAM,CAAN,CAAd;AACA,UAAIK,YAAY,2BAAaC,iBAA7B,EAAgD;AAC9C,aAAKX,gBAAL,GAAwB,IAAxB;AACA,aAAKC,UAAL,CAAgBW,WAAhB;AACA,aAAKC,QAAL,CAAiBN,SAAjB,SAA8B,2BAAaO,sBAA3C;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;6BAI0B;AACxB,UAAIX,UAAU,KAAKF,UAAL,CAAgBc,UAAhB,EAAd;AACA,WAAKf,gBAAL,GAAwB,IAAxB;AACA,aAAO,KAAKE,WAAL,CAAiBc,iBAAjB,CAAmCb,OAAnC,CAAP;AACD;;AAED;;;;6BACSc,Q,EAAwB;AAC/B;AACA,+BAAU,KAAKjB,gBAAf,EAAiC,sDAAsDiB,QAAvF;AACA,WAAKhB,UAAL,CAAgBiB,YAAhB,CAA6BD,QAA7B;AACA,WAAKjB,gBAAL,GAAwB,KAAxB;AACD;;;+CAE0BmB,W,EAAqBZ,S,EAAmBa,I,EAAkC;AACnG,WAAKP,QAAL,CAAc,KAAKX,WAAL,CAAiBmB,6BAAjB,CAA+Cd,SAA/C,EAA0DY,WAA1D,EAAuEC,KAAKE,WAA5E,CAAd;AACD;;;0CAEqBC,Q,EAAkBC,I,EAAcC,M,EAAsB;AAC1E,UAAIC,iBAA6B;AAC/BC,cAAM,YADyB;AAE/BJ,kBAAUA,QAFqB;AAG/BC,cAAMA,IAHyB;AAI/BC,gBAAQA;AAJuB,OAAjC;AAMA,WAAKZ,QAAL,CAAc,KAAKX,WAAL,CAAiB0B,yBAAjB,CAA2CF,cAA3C,CAAd;AACD;;;2CAEsBnB,S,EAAmBsB,W,EAAsC;AAC9E,WAAKhB,QAAL,CAAc,KAAKX,WAAL,CAAiB4B,2BAAjB,CAA6CvB,SAA7C,EAAwDsB,WAAxD,CAAd;AACD;;;uCAEkBtB,S,EAAmBwB,M,EAA4B;AAChE,WAAKlB,QAAL,CAAc,KAAKX,WAAL,CAAiB8B,sBAAjB,CAAwCzB,SAAxC,EAAmDwB,MAAnD,CAAd;AACD;;;0CAEqBxB,S,EAAmB0B,S,EAAkC;AACzE,WAAKpB,QAAL,CAAc,KAAKX,WAAL,CAAiBgC,yBAAjB,CAA2C3B,SAA3C,EAAsD0B,SAAtD,CAAd;AACD;;;wCAEyB;AACxB,WAAKpB,QAAL,CAAc,KAAKX,WAAL,CAAiBiC,qBAAjB,EAAd;AACD","file":"DebugChannel.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport invariant from \"./../../invariant.js\";\nimport { FileIOWrapper } from \"./FileIOWrapper.js\";\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport { MessageMarshaller } from \"./MessageMarshaller.js\";\nimport type { DebuggerRequest, Breakpoint, BreakpointsArguments, Stackframe, Scope, Variable } from \"./../types.js\";\n\n//Channel used by the DebugServer in Prepack to communicate with the debug adapter\nexport class DebugChannel {\n  constructor(ioWrapper: FileIOWrapper) {\n    this._requestReceived = false;\n    this._ioWrapper = ioWrapper;\n    this._marshaller = new MessageMarshaller();\n  }\n\n  _requestReceived: boolean;\n  _ioWrapper: FileIOWrapper;\n  _marshaller: MessageMarshaller;\n\n  /*\n  /* Only called in the beginning to check if a debugger is attached\n  */\n  debuggerIsAttached(): boolean {\n    let message = this._ioWrapper.readInSyncOnce();\n    if (message === null) return false;\n    let parts = message.split(\" \");\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    if (command === DebugMessage.DEBUGGER_ATTACHED) {\n      this._requestReceived = true;\n      this._ioWrapper.clearInFile();\n      this.writeOut(`${requestID} ${DebugMessage.PREPACK_READY_RESPONSE}`);\n      return true;\n    }\n    return false;\n  }\n\n  /* Reads in a request from the debug adapter\n  /* The caller is responsible for sending a response with the appropriate\n  /* contents at the right time.\n  */\n  readIn(): DebuggerRequest {\n    let message = this._ioWrapper.readInSync();\n    this._requestReceived = true;\n    return this._marshaller.unmarshallRequest(message);\n  }\n\n  // Write out a response to the debug adapter\n  writeOut(contents: string): void {\n    //Prepack only writes back to the debug adapter in response to a request\n    invariant(this._requestReceived, \"Prepack writing message without being requested: \" + contents);\n    this._ioWrapper.writeOutSync(contents);\n    this._requestReceived = false;\n  }\n\n  sendBreakpointsAcknowledge(messageType: string, requestID: number, args: BreakpointsArguments): void {\n    this.writeOut(this._marshaller.marshallBreakpointAcknowledge(requestID, messageType, args.breakpoints));\n  }\n\n  sendBreakpointStopped(filePath: string, line: number, column: number): void {\n    let breakpointInfo: Breakpoint = {\n      kind: \"breakpoint\",\n      filePath: filePath,\n      line: line,\n      column: column,\n    };\n    this.writeOut(this._marshaller.marshallBreakpointStopped(breakpointInfo));\n  }\n\n  sendStackframeResponse(requestID: number, stackframes: Array<Stackframe>): void {\n    this.writeOut(this._marshaller.marshallStackFramesResponse(requestID, stackframes));\n  }\n\n  sendScopesResponse(requestID: number, scopes: Array<Scope>): void {\n    this.writeOut(this._marshaller.marshallScopesResponse(requestID, scopes));\n  }\n\n  sendVariablesResponse(requestID: number, variables: Array<Variable>): void {\n    this.writeOut(this._marshaller.marshallVariablesResponse(requestID, variables));\n  }\n\n  sendPrepackFinish(): void {\n    this.writeOut(this._marshaller.marshallPrepackFinish());\n  }\n}\n"]}