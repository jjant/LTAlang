{"version":3,"sources":["../../../src/debugger/channel/MessageMarshaller.js"],"names":["MessageMarshaller","_lastRunRequestID","requestID","messageType","breakpoints","JSON","stringify","args","BREAKPOINT_STOPPED_RESPONSE","filePath","line","column","PREPACK_FINISH_RESPONSE","DEBUGGER_ATTACHED","PREPACK_RUN_COMMAND","BREAKPOINT_ADD_COMMAND","STACKFRAMES_COMMAND","stackframes","STACKFRAMES_RESPONSE","frameId","SCOPES_COMMAND","scopes","SCOPES_RESPONSE","variablesReference","VARIABLES_COMMAND","variables","VARIABLES_RESPONSE","message","parts","split","length","parseInt","isNaN","command","runArgs","kind","_unmarshallBreakpointsArguments","slice","join","stackFrameArgs","_unmarshallScopesArguments","_unmarshallVariablesArguments","undefined","result","id","arguments","dbgResponse","PREPACK_READY_RESPONSE","_unmarshallReadyResponse","BREAKPOINT_ADD_ACKNOWLEDGE","_unmarshallBreakpointsAddResponse","_unmarshallBreakpointStoppedResponse","_unmarshallStackframesResponse","_unmarshallScopesResponse","_unmarshallVariablesResponse","_unmarshallFinishResponse","breakpointsString","parse","breakpoint","hasOwnProperty","e","frameIdString","varRefString","varRef","responseBody","frames","Array","isArray","frame","scope","variable"],"mappings":"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","file":"MessageMarshaller.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport type {\n  Breakpoint,\n  BreakpointsArguments,\n  ScopesArguments,\n  Stackframe,\n  DebuggerResponse,\n  StackframeResult,\n  BreakpointsAddResult,\n  BreakpointStoppedResult,\n  ReadyResult,\n  Scope,\n  ScopesResult,\n  Variable,\n  VariablesArguments,\n  VariablesResult,\n  DebuggerRequest,\n  DebuggerRequestArguments,\n  RunArguments,\n  StackframeArguments,\n  FinishResult,\n} from \"./../types.js\";\nimport invariant from \"./../../invariant.js\";\nimport { DebuggerError } from \"./../DebuggerError.js\";\n\nexport class MessageMarshaller {\n  constructor() {\n    this._lastRunRequestID = 0;\n  }\n  _lastRunRequestID: number;\n\n  marshallBreakpointAcknowledge(requestID: number, messageType: string, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${messageType} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallBreakpointStopped(args: Breakpoint): string {\n    return `${this\n      ._lastRunRequestID} ${DebugMessage.BREAKPOINT_STOPPED_RESPONSE} ${args.filePath} ${args.line} ${args.column}`;\n  }\n\n  marshallPrepackFinish(): string {\n    return `${this._lastRunRequestID} ${DebugMessage.PREPACK_FINISH_RESPONSE}`;\n  }\n\n  marshallDebuggerStart(requestID: number): string {\n    return `${requestID} ${DebugMessage.DEBUGGER_ATTACHED}`;\n  }\n\n  marshallContinueRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.PREPACK_RUN_COMMAND}`;\n  }\n\n  marshallSetBreakpointsRequest(requestID: number, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${DebugMessage.BREAKPOINT_ADD_COMMAND} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStackFramesRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_COMMAND}`;\n  }\n\n  marshallStackFramesResponse(requestID: number, stackframes: Array<Stackframe>): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_RESPONSE} ${JSON.stringify(stackframes)}`;\n  }\n\n  marshallScopesRequest(requestID: number, frameId: number): string {\n    return `${requestID} ${DebugMessage.SCOPES_COMMAND} ${frameId}`;\n  }\n\n  marshallScopesResponse(requestID: number, scopes: Array<Scope>): string {\n    return `${requestID} ${DebugMessage.SCOPES_RESPONSE} ${JSON.stringify(scopes)}`;\n  }\n\n  marshallVariablesRequest(requestID: number, variablesReference: number): string {\n    return `${requestID} ${DebugMessage.VARIABLES_COMMAND} ${variablesReference}`;\n  }\n\n  marshallVariablesResponse(requestID: number, variables: Array<Variable>): string {\n    return `${requestID} ${DebugMessage.VARIABLES_RESPONSE} ${JSON.stringify(variables)}`;\n  }\n\n  unmarshallRequest(message: string): DebuggerRequest {\n    let parts = message.split(\" \");\n    // each request must have a length and a command\n    invariant(parts.length >= 2, \"Request is not well formed\");\n    // unique ID for each request\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    let args: DebuggerRequestArguments;\n    switch (command) {\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        this._lastRunRequestID = requestID;\n        let runArgs: RunArguments = {\n          kind: \"run\",\n        };\n        args = runArgs;\n        break;\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        args = this._unmarshallBreakpointsArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        let stackFrameArgs: StackframeArguments = {\n          kind: \"stackframe\",\n        };\n        args = stackFrameArgs;\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        args = this._unmarshallScopesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        args = this._unmarshallVariablesArguments(requestID, parts[2]);\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    invariant(args !== undefined);\n    let result: DebuggerRequest = {\n      id: requestID,\n      command: command,\n      arguments: args,\n    };\n    return result;\n  }\n\n  unmarshallResponse(message: string): DebuggerResponse {\n    let parts = message.split(\" \");\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID));\n    let messageType = parts[1];\n    let dbgResponse;\n    if (messageType === DebugMessage.PREPACK_READY_RESPONSE) {\n      dbgResponse = this._unmarshallReadyResponse(requestID);\n    } else if (messageType === DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE) {\n      dbgResponse = this._unmarshallBreakpointsAddResponse(requestID, parts.slice(2).join(\" \"));\n    } else if (messageType === DebugMessage.BREAKPOINT_STOPPED_RESPONSE) {\n      dbgResponse = this._unmarshallBreakpointStoppedResponse(requestID, parts.slice(2));\n    } else if (messageType === DebugMessage.STACKFRAMES_RESPONSE) {\n      dbgResponse = this._unmarshallStackframesResponse(requestID, parts.slice(2).join(\" \"));\n    } else if (messageType === DebugMessage.SCOPES_RESPONSE) {\n      dbgResponse = this._unmarshallScopesResponse(requestID, parts.slice(2).join(\" \"));\n    } else if (messageType === DebugMessage.VARIABLES_RESPONSE) {\n      dbgResponse = this._unmarshallVariablesResponse(requestID, parts.slice(2).join(\" \"));\n    } else if (messageType === DebugMessage.PREPACK_FINISH_RESPONSE) {\n      dbgResponse = this._unmarshallFinishResponse(requestID);\n    } else {\n      invariant(false, \"Unexpected response type\");\n    }\n    return dbgResponse;\n  }\n\n  _unmarshallBreakpointsArguments(requestID: number, breakpointsString: string): BreakpointsArguments {\n    try {\n      let breakpoints = JSON.parse(breakpointsString);\n      for (const breakpoint of breakpoints) {\n        invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n        invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n        invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n        invariant(!isNaN(breakpoint.line));\n        invariant(!isNaN(breakpoint.column));\n      }\n      let result: BreakpointsArguments = {\n        kind: \"breakpoint\",\n        breakpoints: breakpoints,\n      };\n      return result;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid command\", e.message);\n    }\n  }\n\n  _unmarshallScopesArguments(requestID: number, frameIdString: string): ScopesArguments {\n    let frameId = parseInt(frameIdString, 10);\n    invariant(!isNaN(frameId));\n    let result: ScopesArguments = {\n      kind: \"scopes\",\n      frameId: frameId,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesArguments(requestID: number, varRefString: string): VariablesArguments {\n    let varRef = parseInt(varRefString, 10);\n    invariant(!isNaN(varRef));\n    let result: VariablesArguments = {\n      kind: \"variables\",\n      variablesReference: varRef,\n    };\n    return result;\n  }\n\n  _unmarshallStackframesResponse(requestID: number, responseBody: string): DebuggerResponse {\n    try {\n      let frames = JSON.parse(responseBody);\n      invariant(Array.isArray(frames), \"Stack frames is not an array\");\n      for (const frame of frames) {\n        invariant(frame.hasOwnProperty(\"id\"), \"Stack frame is missing id\");\n        invariant(frame.hasOwnProperty(\"fileName\"), \"Stack frame is missing filename\");\n        invariant(frame.hasOwnProperty(\"line\"), \"Stack frame is missing line number\");\n        invariant(frame.hasOwnProperty(\"column\"), \"Stack frame is missing column number\");\n        invariant(frame.hasOwnProperty(\"functionName\"), \"Stack frame is missing function name\");\n      }\n      let result: StackframeResult = {\n        kind: \"stackframe\",\n        stackframes: frames,\n      };\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: result,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid response\", e.message);\n    }\n  }\n\n  _unmarshallScopesResponse(requestID: number, responseBody: string): DebuggerResponse {\n    try {\n      let scopes = JSON.parse(responseBody);\n      invariant(Array.isArray(scopes), \"Scopes is not an array\");\n      for (const scope of scopes) {\n        invariant(scope.hasOwnProperty(\"name\"), \"Scope is missing name\");\n        invariant(scope.hasOwnProperty(\"variablesReference\"), \"Scope is missing variablesReference\");\n        invariant(scope.hasOwnProperty(\"expensive\"), \"Scope is missing expensive\");\n      }\n      let result: ScopesResult = {\n        kind: \"scopes\",\n        scopes: scopes,\n      };\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: result,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid response\", e.message);\n    }\n  }\n\n  _unmarshallVariablesResponse(requestID: number, responseBody: string): DebuggerResponse {\n    try {\n      let variables = JSON.parse(responseBody);\n      invariant(Array.isArray(variables), \"Variables is not an array\");\n      for (const variable of variables) {\n        invariant(variable.hasOwnProperty(\"name\"));\n        invariant(variable.hasOwnProperty(\"value\"));\n        invariant(variable.hasOwnProperty(\"variablesReference\"));\n      }\n      let result: VariablesResult = {\n        kind: \"variables\",\n        variables: variables,\n      };\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: result,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid response\", e.message);\n    }\n  }\n\n  _unmarshallBreakpointsAddResponse(requestID: number, breakpointsString: string): DebuggerResponse {\n    try {\n      let breakpoints = JSON.parse(breakpointsString);\n      for (const breakpoint of breakpoints) {\n        invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n        invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n        invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n        invariant(!isNaN(breakpoint.line));\n        invariant(!isNaN(breakpoint.column));\n      }\n\n      let result: BreakpointsAddResult = {\n        kind: \"breakpoint-add\",\n        breakpoints: breakpoints,\n      };\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: result,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid response\", e.message);\n    }\n  }\n\n  _unmarshallBreakpointStoppedResponse(requestID: number, parts: Array<string>): DebuggerResponse {\n    invariant(parts.length === 3, \"Incorrect number of arguments in breakpoint stopped response\");\n    let filePath = parts[0];\n    let line = parseInt(parts[1], 10);\n    invariant(!isNaN(line), \"Invalid line number\");\n    let column = parseInt(parts[2], 10);\n    invariant(!isNaN(column), \"Invalid column number\");\n    let result: BreakpointStoppedResult = {\n      kind: \"breakpoint-stopped\",\n      filePath: filePath,\n      line: line,\n      column: column,\n    };\n    let dbgResponse: DebuggerResponse = {\n      id: requestID,\n      result: result,\n    };\n    return dbgResponse;\n  }\n\n  _unmarshallReadyResponse(requestID: number): DebuggerResponse {\n    let result: ReadyResult = {\n      kind: \"ready\",\n    };\n    let dbgResponse: DebuggerResponse = {\n      id: requestID,\n      result: result,\n    };\n    return dbgResponse;\n  }\n\n  _unmarshallFinishResponse(requestID: number): DebuggerResponse {\n    let result: FinishResult = {\n      kind: \"finish\",\n    };\n    let dbgResponse: DebuggerResponse = {\n      id: requestID,\n      result: result,\n    };\n    return dbgResponse;\n  }\n}\n"]}