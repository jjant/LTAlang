{"version":3,"sources":["../../../src/debugger/mock-ui/UISession.js"],"names":["DebugProtocol","TWO_CRLF","UISession","proc","args","_proc","_adapterPath","adapterPath","_prepackRuntime","prepackRuntime","_sourceFile","sourceFile","_prepackArguments","prepackArguments","_inFilePath","debugInFilePath","_outFilePath","debugOutFilePath","_sequenceNum","_invalidCount","_dataHandler","_prepackWaiting","_prepackLaunched","adapterArgs","_adapterProcess","spawn","on","shutdown","stdout","data","handleData","_processMessage","bind","stderr","console","error","toString","message","msg","JSON","parse","type","_processEvent","_processResponse","e","slice","_reader","question","input","_dispatch","event","configDoneArgs","_sendConfigDoneRequest","_uiOutput","body","output","reason","startsWith","response","command","_processInitializeResponse","_processThreadsResponse","_processStackTraceResponse","_processScopesResponse","_processVariablesResponse","scopes","scope","name","variablesReference","launchArgs","_sendLaunchRequest","frames","stackFrames","frame","source","path","id","line","column","threads","thread","variables","variable","value","parts","split","length","continueArgs","threadId","PREPACK_THREAD_ID","_sendContinueRequest","filePath","parseInt","isNaN","_sendBreakpointRequest","stackFrameArgs","_sendStackFramesRequest","_sendThreadsRequest","frameId","scopesArgs","_sendScopesRequest","varRef","variableArgs","_sendVariablesRequest","success","_executeCommand","log","seq","arguments","json","stringify","_packageAndSend","breakpoint","breakpoints","stdin","write","Buffer","byteLength","_startAdapter","initArgs","clientID","CLI_CLIENTID","adapterID","linesStartAt1","columnsStartAt1","supportsVariableType","supportsVariablePaging","supportsRunInTerminalRequest","pathFormat","_sendInitializeRequest","createInterface","close","kill","exit"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;;;AACA;;;;AACA;;IAAYA,a;;AACZ;;AACA;;AACA;;;;;;;;AAWA;AACA,IAAMC,WAAW,UAAjB;;AAEA;;;;;IAIaC,S,WAAAA,S;AACX,qBAAYC,IAAZ,EAA2BC,IAA3B,EAAuD;AAAA;;AACrD,SAAKC,KAAL,GAAaF,IAAb;AACA,SAAKG,YAAL,GAAoBF,KAAKG,WAAzB;AACA,SAAKC,eAAL,GAAuBJ,KAAKK,cAA5B;AACA,SAAKC,WAAL,GAAmBN,KAAKO,UAAxB;AACA,SAAKC,iBAAL,GAAyBR,KAAKS,gBAA9B;AACA,SAAKC,WAAL,GAAmBV,KAAKW,eAAxB;AACA,SAAKC,YAAL,GAAoBZ,KAAKa,gBAAzB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,YAAL,GAAoB,8BAApB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACD;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;oCAGgB;AAAA;;AACd,UAAIC,cAAc,CAAC,KAAKjB,YAAN,CAAlB;AACA,WAAKkB,eAAL,GAAuB,wBAAcC,KAAd,CAAoB,MAApB,EAA4BF,WAA5B,CAAvB;AACA,WAAKlB,KAAL,CAAWqB,EAAX,CAAc,MAAd,EAAsB,YAAM;AAC1B,cAAKC,QAAL;AACD,OAFD;AAGA,WAAKtB,KAAL,CAAWqB,EAAX,CAAc,QAAd,EAAwB,YAAM;AAC5B,cAAKC,QAAL;AACD,OAFD;AAGA,WAAKH,eAAL,CAAqBI,MAArB,CAA4BF,EAA5B,CAA+B,MAA/B,EAAuC,UAACG,IAAD,EAAkB;AACvD;AACA,cAAKT,YAAL,CAAkBU,UAAlB,CAA6BD,IAA7B,EAAmC,MAAKE,eAAL,CAAqBC,IAArB,OAAnC;AACD,OAHD;AAIA,WAAKR,eAAL,CAAqBS,MAArB,CAA4BP,EAA5B,CAA+B,MAA/B,EAAuC,UAACG,IAAD,EAAkB;AACvDK,gBAAQC,KAAR,CAAcN,KAAKO,QAAL,EAAd;AACA,cAAKT,QAAL;AACD,OAHD;AAID;;AAED;;;;oCACgBU,O,EAAuB;AAAA;;AACrC,UAAI;AACF,YAAIC,MAAMC,KAAKC,KAAL,CAAWH,OAAX,CAAV;AACA,YAAIC,IAAIG,IAAJ,KAAa,OAAjB,EAA0B;AACxB,eAAKC,aAAL,CAAmBJ,GAAnB;AACD,SAFD,MAEO,IAAIA,IAAIG,IAAJ,KAAa,UAAjB,EAA6B;AAClC,eAAKE,gBAAL,CAAsBL,GAAtB;AACD;AACF,OAPD,CAOE,OAAOM,CAAP,EAAU;AACVV,gBAAQC,KAAR,CAAcS,CAAd;AACAV,gBAAQC,KAAR,CAAc,sBAAsBE,QAAQQ,KAAR,CAAc,CAAd,EAAiB,IAAjB,CAApC;AACD;AACD;AACA,UAAI,KAAKvB,gBAAL,IAAyB,KAAKD,eAAlC,EAAmD;AACjD,aAAKyB,OAAL,CAAaC,QAAb,CAAsB,QAAtB,EAAgC,UAACC,KAAD,EAAmB;AACjD,iBAAKC,SAAL,CAAeD,KAAf;AACD,SAFD;AAGD;AACF;;;kCAEaE,K,EAA4B;AAAA;;AACxC,UAAIA,MAAMA,KAAN,KAAgB,aAApB,EAAmC;AACjC;AACA;AAEA,YAAIC,iBAA2D,EAA/D;AACA,aAAKC,sBAAL,CAA4BD,cAA5B;AACD,OAND,MAMO,IAAID,MAAMA,KAAN,KAAgB,QAApB,EAA8B;AACnC,aAAKG,SAAL,CAAe,sBAAsBH,MAAMI,IAAN,CAAWC,MAAhD;AACD,OAFM,MAEA,IAAIL,MAAMA,KAAN,KAAgB,YAApB,EAAkC;AACvC,aAAKG,SAAL,CAAe,kCAAf;AACA,aAAK1B,QAAL;AACD,OAHM,MAGA,IAAIuB,MAAMA,KAAN,KAAgB,SAApB,EAA+B;AACpC,aAAK7B,eAAL,GAAuB,IAAvB;AACA,YAAI6B,MAAMI,IAAV,EAAgB;AACd,cAAIJ,MAAMI,IAAN,CAAWE,MAAX,KAAsB,OAA1B,EAAmC;AACjC,iBAAKH,SAAL,CAAe,kBAAf;AACA,iBAAK/B,gBAAL,GAAwB,IAAxB;AACA;AACA,iBAAKwB,OAAL,CAAaC,QAAb,CAAsB,QAAtB,EAAgC,UAACC,KAAD,EAAmB;AACjD,qBAAKC,SAAL,CAAeD,KAAf;AACD,aAFD;AAGD,WAPD,MAOO,IAAIE,MAAMI,IAAN,CAAWE,MAAX,CAAkBC,UAAlB,CAA6B,YAA7B,CAAJ,EAAgD;AACrD,iBAAKJ,SAAL,CAAe,yBAAyBH,MAAMI,IAAN,CAAWE,MAAnD;AACD;AACF;AACF;AACF;;;qCAEgBE,Q,EAAkC;AACjD,UAAIA,SAASC,OAAT,KAAqB,YAAzB,EAAuC;AACrC,aAAKC,0BAAL,CAAkCF,QAAlC;AACD,OAFD,MAEO,IAAIA,SAASC,OAAT,KAAqB,SAAzB,EAAoC;AACzC,aAAKE,uBAAL,CAA+BH,QAA/B;AACD,OAFM,MAEA,IAAIA,SAASC,OAAT,KAAqB,YAAzB,EAAuC;AAC5C;AACA,aAAKG,0BAAL,CAAkCJ,QAAlC;AACD,OAHM,MAGA,IAAIA,SAASC,OAAT,KAAqB,QAAzB,EAAmC;AACxC,aAAKI,sBAAL,CAA8BL,QAA9B;AACD,OAFM,MAEA,IAAIA,SAASC,OAAT,KAAqB,WAAzB,EAAsC;AAC3C,aAAKK,yBAAL,CAAiCN,QAAjC;AACD;AACF;;;2CAEsBA,Q,EAAwC;AAC7D,UAAIO,SAASP,SAASJ,IAAT,CAAcW,MAA3B;AAD6D;AAAA;AAAA;;AAAA;AAE7D,6BAAoBA,MAApB,8HAA4B;AAAA,cAAjBC,KAAiB;;AAC1B,eAAKb,SAAL,CAAkBa,MAAMC,IAAxB,SAAgCD,MAAME,kBAAtC;AACD;AAJ4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK9D;;;+CAE0BV,Q,EAA4C;AACrE,UAAIW,aAAqC;AACvC5D,wBAAgB,KAAKD,eADkB;AAEvCG,oBAAY,KAAKD,WAFsB;AAGvCG,0BAAkB,KAAKD,iBAHgB;AAIvCG,yBAAiB,KAAKD,WAJiB;AAKvCG,0BAAkB,KAAKD;AALgB,OAAzC;AAOA,WAAKsD,kBAAL,CAAwBD,UAAxB;AACD;;;+CAE0BX,Q,EAA4C;AACrE,UAAIa,SAASb,SAASJ,IAAT,CAAckB,WAA3B;AADqE;AAAA;AAAA;;AAAA;AAErE,8BAAoBD,MAApB,mIAA4B;AAAA,cAAjBE,KAAiB;;AAC1B,cAAIA,MAAMC,MAAN,IAAgBD,MAAMC,MAAN,CAAaC,IAAjC,EAAuC;AACrC,iBAAKtB,SAAL,CAAkBoB,MAAMG,EAAxB,UAA+BH,MAAMN,IAArC,SAA6CM,MAAMC,MAAN,CAAaC,IAA1D,SAAkEF,MAAMI,IAAxE,SAAgFJ,MAAMK,MAAtF;AACD,WAFD,MAEO;AACL,iBAAKzB,SAAL,CAAkBoB,MAAMG,EAAxB,UAA+BH,MAAMN,IAArC;AACD;AACF;AARoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAStE;;;4CAEuBT,Q,EAAyC;AAAA;AAAA;AAAA;;AAAA;AAC/D,8BAAqBA,SAASJ,IAAT,CAAcyB,OAAnC,mIAA4C;AAAA,cAAjCC,MAAiC;;AAC1C,eAAK3B,SAAL,CAAkB2B,OAAOJ,EAAzB,UAAgCI,OAAOb,IAAvC;AACD;AAH8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhE;;;8CAEyBT,Q,EAA2C;AAAA;AAAA;AAAA;;AAAA;AACnE,8BAAuBA,SAASJ,IAAT,CAAc2B,SAArC,mIAAgD;AAAA,cAArCC,QAAqC;;AAC9C,cAAIA,SAASd,kBAAT,KAAgC,CAApC,EAAuC;AACrC;AACA,iBAAKf,SAAL,CAAkB6B,SAASf,IAA3B,UAAoCe,SAASC,KAA7C;AACD,WAHD,MAGO;AACL,iBAAK9B,SAAL,CAAkB6B,SAASf,IAA3B,UAAoCe,SAASC,KAA7C,SAAsDD,SAASd,kBAA/D;AACD;AACF;AARkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpE;;AAED;AACA;;;;oCACgBpB,K,EAAwB;AACtC,UAAIoC,QAAQpC,MAAMqC,KAAN,CAAY,GAAZ,CAAZ;AACA,UAAI1B,UAAUyB,MAAM,CAAN,CAAd;;AAEA;AACA;;AAEA,cAAQzB,OAAR;AACE,aAAK,KAAL;AACE;AACA,cAAIyB,MAAME,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AACxB,cAAIC,eAAgD;AAClD;AACAC,sBAAU,qCAAkBC;AAFsB,WAApD;AAIA,eAAKC,oBAAL,CAA0BH,YAA1B;AACA;AACF,aAAK,YAAL;AACE;AACA,cAAIH,MAAME,MAAN,KAAiB,CAAjB,IAAsBF,MAAME,MAAN,KAAiB,CAA3C,EAA8C,OAAO,KAAP;AAC9C,cAAIF,MAAM,CAAN,MAAa,KAAjB,EAAwB;AACtB,gBAAIO,WAAWP,MAAM,CAAN,CAAf;AACA,gBAAIP,OAAOe,SAASR,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAX;AACA,gBAAIS,MAAMhB,IAAN,CAAJ,EAAiB,OAAO,KAAP;AACjB,gBAAIC,SAAS,CAAb;AACA,gBAAIM,MAAME,MAAN,KAAiB,CAArB,EAAwB;AACtBR,uBAASc,SAASR,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAT;AACA,kBAAIS,MAAMf,MAAN,CAAJ,EAAmB,OAAO,KAAP;AACpB;AACD,iBAAKgB,sBAAL,CAA4BH,QAA5B,EAAsCd,IAAtC,EAA4CC,MAA5C;AACD;AACD;AACF,aAAK,aAAL;AACE;AACA,cAAIiB,iBAAoD;AACtD;AACAP,sBAAU,qCAAkBC;AAF0B,WAAxD;AAIA,eAAKO,uBAAL,CAA6BD,cAA7B;AACA;AACF,aAAK,SAAL;AACE,cAAIX,MAAME,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AACxB,eAAKW,mBAAL;AACA;AACF,aAAK,QAAL;AACE,cAAIb,MAAME,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AACxB,cAAIY,UAAUN,SAASR,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAd;AACA,cAAIS,MAAMK,OAAN,CAAJ,EAAoB,OAAO,KAAP;AACpB,cAAIC,aAA4C;AAC9CD,qBAASA;AADqC,WAAhD;AAGA,eAAKE,kBAAL,CAAwBD,UAAxB;AACA;AACF,aAAK,WAAL;AACE,cAAIf,MAAME,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AACxB,cAAIe,SAAST,SAASR,MAAM,CAAN,CAAT,EAAmB,EAAnB,CAAb;AACA,cAAIS,MAAMQ,MAAN,CAAJ,EAAmB,OAAO,KAAP;AACnB,cAAIC,eAAiD;AACnDlC,gCAAoBiC;AAD+B,WAArD;AAGA,eAAKE,qBAAL,CAA2BD,YAA3B;AACA;AACF;AACE;AACA,iBAAO,KAAP;AAzDJ;AA2DA,aAAO,IAAP;AACD;;AAED;;;;8BACUtD,K,EAAe;AAAA;;AACvB,UAAIA,UAAU,MAAd,EAAsB;AACpB,aAAKrB,QAAL;AACD;AACD,UAAI6E,UAAU,KAAKC,eAAL,CAAqBzD,KAArB,CAAd;AACA,UAAI,CAACwD,OAAL,EAAc;AACZ;AACA,aAAKrF,aAAL;AACA;AACA,YAAI,KAAKA,aAAL,IAAsB,EAA1B,EAA8B;AAC5Be,kBAAQwE,GAAR,CAAY,6CAAZ;AACA,eAAK/E,QAAL;AACD;AACDO,gBAAQwE,GAAR,CAAY,sBAAsB1D,KAAlC;AACA,aAAKF,OAAL,CAAaC,QAAb,CAAsB,QAAtB,EAAgC,UAAC8B,IAAD,EAAkB;AAChD,iBAAK5B,SAAL,CAAe4B,IAAf;AACD,SAFD;AAGD;AACD;AACA,WAAK1D,aAAL,GAAqB,CAArB;AACD;;AAED;;;;2CACuBf,I,EAAgD;AACrE,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,YAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;AAED;;;;uCACmBzG,I,EAA4C;AAC7D,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,QAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;AAED;;;;2CACuBzG,I,EAAgD;AACrE,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,mBAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;AAED;;;;yCACqBzG,I,EAAuC;AAC1D,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,UAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACA,WAAKxF,eAAL,GAAuB,KAAvB;AACD;;;2CAEsBsE,Q,EAAkBd,I,EAAkC;AAAA,UAApBC,MAAoB,uEAAH,CAAG;;AACzE,UAAIJ,SAA+B;AACjCC,cAAMgB;AAD2B,OAAnC;AAGA,UAAIqB,aAA6C;AAC/CnC,cAAMA,IADyC;AAE/CC,gBAAQA;AAFuC,OAAjD;AAIA,UAAI1E,OAA8C;AAChDsE,gBAAQA,MADwC;AAEhDuC,qBAAa,CAACD,UAAD;AAFmC,OAAlD;AAIA,UAAI3E,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,gBAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;;4CAEuBzG,I,EAAyC;AAC/D,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,YAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;;0CAEqB;AACpB,UAAIxE,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS;AAHG,OAAd;AAKA,UAAIkD,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;;uCAEkBzG,I,EAAqC;AACtD,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,QAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;;0CAEqBzG,I,EAAwC;AAC5D,UAAIiC,UAAU;AACZI,cAAM,SADM;AAEZkE,aAAK,KAAKzF,YAFE;AAGZyC,iBAAS,WAHG;AAIZiD,mBAAWxG;AAJC,OAAd;AAMA,UAAIyG,OAAOtE,KAAKuE,SAAL,CAAezE,OAAf,CAAX;AACA,WAAK0E,eAAL,CAAqBF,IAArB;AACD;;AAED;;;;oCACgBxE,O,EAAiB;AAC/B;AACA,WAAKb,eAAL,CAAqB0F,KAArB,CAA2BC,KAA3B,CACE,qBAAqBC,OAAOC,UAAP,CAAkBhF,OAAlB,EAA2B,MAA3B,CAArB,GAA0DpC,QAA1D,GAAqEoC,OADvE,EAEE,MAFF;AAIA,WAAKnB,YAAL;AACD;;;8BAESmB,O,EAAiB;AACzBH,cAAQwE,GAAR,CAAYrE,OAAZ;AACD;;;4BAEO;AACN,WAAKgB,SAAL,CAAe,oCAAf;AACA;AACA,WAAKiE,aAAL;;AAEA;AACA,UAAIC,WAAqD;AACvD;AACAC,kBAAU,qCAAkBC,YAF2B;AAGvD;AACAC,mBAAW,0BAJ4C;AAKvDC,uBAAe,IALwC;AAMvDC,yBAAiB,IANsC;AAOvDC,8BAAsB,IAPiC;AAQvDC,gCAAwB,KAR+B;AASvDC,sCAA8B,KATyB;AAUvDC,oBAAY;AAV2C,OAAzD;AAYA,WAAKC,sBAAL,CAA4BV,QAA5B;;AAEA,WAAKzE,OAAL,GAAe,mBAASoF,eAAT,CAAyB,EAAElF,OAAO,KAAK3C,KAAL,CAAW6G,KAApB,EAA2B3D,QAAQ,KAAKlD,KAAL,CAAWuB,MAA9C,EAAzB,CAAf;AACD;;;+BAEU;AACT,WAAKkB,OAAL,CAAaqF,KAAb;AACA,WAAK3G,eAAL,CAAqB4G,IAArB;AACA,WAAK/H,KAAL,CAAWgI,IAAX,CAAgB,CAAhB;AACD","file":"UISession.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport readline from \"readline\";\nimport child_process from \"child_process\";\nimport * as DebugProtocol from \"vscode-debugprotocol\";\nimport { DataHandler } from \"./DataHandler.js\";\nimport { DebuggerConstants } from \"./../DebuggerConstants\";\nimport { LaunchRequestArguments } from \"./../types.js\";\n\nexport type DebuggerCLIArguments = {\n  adapterPath: string,\n  prepackRuntime: string,\n  sourceFile: string,\n  prepackArguments: Array<string>,\n  debugInFilePath: string,\n  debugOutFilePath: string,\n};\n\n//separator for messages according to the protocol\nconst TWO_CRLF = \"\\r\\n\\r\\n\";\n\n/* Represents one debugging session in the CLI.\n * Read in user input from the command line, parses the input into commands,\n * sends the commands to the adapter and process any responses\n*/\nexport class UISession {\n  constructor(proc: Process, args: DebuggerCLIArguments) {\n    this._proc = proc;\n    this._adapterPath = args.adapterPath;\n    this._prepackRuntime = args.prepackRuntime;\n    this._sourceFile = args.sourceFile;\n    this._prepackArguments = args.prepackArguments;\n    this._inFilePath = args.debugInFilePath;\n    this._outFilePath = args.debugOutFilePath;\n    this._sequenceNum = 1;\n    this._invalidCount = 0;\n    this._dataHandler = new DataHandler();\n    this._prepackWaiting = false;\n    this._prepackLaunched = false;\n  }\n  // the parent (i.e. ui) process\n  _proc: Process;\n  //path to the debug adapter\n  _adapterPath: string;\n  // path to debugger input file\n  _inFilePath: string;\n  // path to debugger output file\n  _outFilePath: string;\n  // the child (i.e. adapter) process\n  _adapterProcess: child_process.ChildProcess;\n\n  // id number for each message sent\n  _sequenceNum: number;\n  // interface to read in input from the CLI client\n  _reader: readline.Interface;\n  // number of invalid commands\n  _invalidCount: number;\n  // Prepack runtime command (e.g. lib/prepack-cli.js)\n  _prepackRuntime: string;\n  // input source file to Prepack\n  _sourceFile: string;\n  // arguments to start Prepack with\n  _prepackArguments: Array<string>;\n  // handler for any received messages\n  _dataHandler: DataHandler;\n  // flag whether Prepack is waiting for a command\n  _prepackWaiting: boolean;\n  // flag whether Prepack has been launched\n  _prepackLaunched: boolean;\n\n  _startAdapter() {\n    let adapterArgs = [this._adapterPath];\n    this._adapterProcess = child_process.spawn(\"node\", adapterArgs);\n    this._proc.on(\"exit\", () => {\n      this.shutdown();\n    });\n    this._proc.on(\"SIGINT\", () => {\n      this.shutdown();\n    });\n    this._adapterProcess.stdout.on(\"data\", (data: Buffer) => {\n      //handle the received data\n      this._dataHandler.handleData(data, this._processMessage.bind(this));\n    });\n    this._adapterProcess.stderr.on(\"data\", (data: Buffer) => {\n      console.error(data.toString());\n      this.shutdown();\n    });\n  }\n\n  // called from data handler to process a received message\n  _processMessage(message: string): void {\n    try {\n      let msg = JSON.parse(message);\n      if (msg.type === \"event\") {\n        this._processEvent(msg);\n      } else if (msg.type === \"response\") {\n        this._processResponse(msg);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid message: \" + message.slice(0, 1000));\n    }\n    //ask the user for the next command\n    if (this._prepackLaunched && this._prepackWaiting) {\n      this._reader.question(\"(dbg) \", (input: string) => {\n        this._dispatch(input);\n      });\n    }\n  }\n\n  _processEvent(event: DebugProtocol.Event) {\n    if (event.event === \"initialized\") {\n      // the adapter is ready to accept any persisted debug information\n      // (e.g. persisted breakpoints from previous sessions). the CLI\n      // does not have any persisted info, so we can send configDone immediately\n      let configDoneArgs: DebugProtocol.ConfigurationDoneArguments = {};\n      this._sendConfigDoneRequest(configDoneArgs);\n    } else if (event.event === \"output\") {\n      this._uiOutput(\"Prepack output:\\n\" + event.body.output);\n    } else if (event.event === \"terminated\") {\n      this._uiOutput(\"Prepack exited! Shutting down...\");\n      this.shutdown();\n    } else if (event.event === \"stopped\") {\n      this._prepackWaiting = true;\n      if (event.body) {\n        if (event.body.reason === \"entry\") {\n          this._uiOutput(\"Prepack is ready\");\n          this._prepackLaunched = true;\n          // start reading requests from the user\n          this._reader.question(\"(dbg) \", (input: string) => {\n            this._dispatch(input);\n          });\n        } else if (event.body.reason.startsWith(\"breakpoint\")) {\n          this._uiOutput(\"Prepack stopped on: \" + event.body.reason);\n        }\n      }\n    }\n  }\n\n  _processResponse(response: DebugProtocol.Response) {\n    if (response.command === \"initialize\") {\n      this._processInitializeResponse(((response: any): DebugProtocol.InitializeResponse));\n    } else if (response.command === \"threads\") {\n      this._processThreadsResponse(((response: any): DebugProtocol.ThreadsResponse));\n    } else if (response.command === \"stackTrace\") {\n      //flow doesn't have type refinement for interfaces, so must do a cast here\n      this._processStackTraceResponse(((response: any): DebugProtocol.StackTraceResponse));\n    } else if (response.command === \"scopes\") {\n      this._processScopesResponse(((response: any): DebugProtocol.ScopesResponse));\n    } else if (response.command === \"variables\") {\n      this._processVariablesResponse(((response: any): DebugProtocol.VariablesResponse));\n    }\n  }\n\n  _processScopesResponse(response: DebugProtocol.ScopesResponse) {\n    let scopes = response.body.scopes;\n    for (const scope of scopes) {\n      this._uiOutput(`${scope.name} ${scope.variablesReference}`);\n    }\n  }\n\n  _processInitializeResponse(response: DebugProtocol.InitializeResponse) {\n    let launchArgs: LaunchRequestArguments = {\n      prepackRuntime: this._prepackRuntime,\n      sourceFile: this._sourceFile,\n      prepackArguments: this._prepackArguments,\n      debugInFilePath: this._inFilePath,\n      debugOutFilePath: this._outFilePath,\n    };\n    this._sendLaunchRequest(launchArgs);\n  }\n\n  _processStackTraceResponse(response: DebugProtocol.StackTraceResponse) {\n    let frames = response.body.stackFrames;\n    for (const frame of frames) {\n      if (frame.source && frame.source.path) {\n        this._uiOutput(`${frame.id}: ${frame.name} ${frame.source.path} ${frame.line}:${frame.column}`);\n      } else {\n        this._uiOutput(`${frame.id}: ${frame.name} unknown source`);\n      }\n    }\n  }\n\n  _processThreadsResponse(response: DebugProtocol.ThreadsResponse) {\n    for (const thread of response.body.threads) {\n      this._uiOutput(`${thread.id}: ${thread.name}`);\n    }\n  }\n\n  _processVariablesResponse(response: DebugProtocol.VariablesResponse) {\n    for (const variable of response.body.variables) {\n      if (variable.variablesReference === 0) {\n        // 0 means there are not more nested variables to return\n        this._uiOutput(`${variable.name}: ${variable.value}`);\n      } else {\n        this._uiOutput(`${variable.name}: ${variable.value} ${variable.variablesReference}`);\n      }\n    }\n  }\n\n  // execute a command if it is valid\n  // returns whether the command was valid\n  _executeCommand(input: string): boolean {\n    let parts = input.split(\" \");\n    let command = parts[0];\n\n    // for testing purposes, init and configDone are made into user commands\n    // they can be done from the adapter without user input\n\n    switch (command) {\n      case \"run\":\n        // format: run\n        if (parts.length !== 1) return false;\n        let continueArgs: DebugProtocol.ContinueArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendContinueRequest(continueArgs);\n        break;\n      case \"breakpoint\":\n        // format: breakpoint add <filePath> <line> ?<column>\n        if (parts.length !== 4 && parts.length !== 5) return false;\n        if (parts[1] === \"add\") {\n          let filePath = parts[2];\n          let line = parseInt(parts[3], 10);\n          if (isNaN(line)) return false;\n          let column = 0;\n          if (parts.length === 5) {\n            column = parseInt(parts[4], 10);\n            if (isNaN(column)) return false;\n          }\n          this._sendBreakpointRequest(filePath, line, column);\n        }\n        break;\n      case \"stackframes\":\n        // format: stackFrames\n        let stackFrameArgs: DebugProtocol.StackTraceArguments = {\n          // Prepack will only have 1 thread, this argument will be ignored\n          threadId: DebuggerConstants.PREPACK_THREAD_ID,\n        };\n        this._sendStackFramesRequest(stackFrameArgs);\n        break;\n      case \"threads\":\n        if (parts.length !== 1) return false;\n        this._sendThreadsRequest();\n        break;\n      case \"scopes\":\n        if (parts.length !== 2) return false;\n        let frameId = parseInt(parts[1], 10);\n        if (isNaN(frameId)) return false;\n        let scopesArgs: DebugProtocol.ScopesArguments = {\n          frameId: frameId,\n        };\n        this._sendScopesRequest(scopesArgs);\n        break;\n      case \"variables\":\n        if (parts.length !== 2) return false;\n        let varRef = parseInt(parts[1], 10);\n        if (isNaN(varRef)) return false;\n        let variableArgs: DebugProtocol.VariablesArguments = {\n          variablesReference: varRef,\n        };\n        this._sendVariablesRequest(variableArgs);\n        break;\n      default:\n        // invalid command\n        return false;\n    }\n    return true;\n  }\n\n  // parses the user input into a command and executes it\n  _dispatch(input: string) {\n    if (input === \"exit\") {\n      this.shutdown();\n    }\n    let success = this._executeCommand(input);\n    if (!success) {\n      // input was invalid\n      this._invalidCount++;\n      //prevent stack overflow from recursion\n      if (this._invalidCount >= 10) {\n        console.log(\"Too many invalid commands, shutting down...\");\n        this.shutdown();\n      }\n      console.log(\"Invalid command: \" + input);\n      this._reader.question(\"(dbg) \", (line: string) => {\n        this._dispatch(line);\n      });\n    }\n    //reset the invalid command counter\n    this._invalidCount = 0;\n  }\n\n  // tell the adapter about some configuration details\n  _sendInitializeRequest(args: DebugProtocol.InitializeRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"initialize\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to start Prepack\n  _sendLaunchRequest(args: DebugProtocol.LaunchRequestArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"launch\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter that configuration is done so it can expect other commands\n  _sendConfigDoneRequest(args: DebugProtocol.ConfigurationDoneArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"configurationDone\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // tell the adapter to continue running Prepack\n  _sendContinueRequest(args: DebugProtocol.ContinueArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"continue\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n    this._prepackWaiting = false;\n  }\n\n  _sendBreakpointRequest(filePath: string, line: number, column: number = 0) {\n    let source: DebugProtocol.Source = {\n      path: filePath,\n    };\n    let breakpoint: DebugProtocol.SourceBreakpoint = {\n      line: line,\n      column: column,\n    };\n    let args: DebugProtocol.SetBreakpointsArguments = {\n      source: source,\n      breakpoints: [breakpoint],\n    };\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"setBreakpoints\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendStackFramesRequest(args: DebugProtocol.StackTraceArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"stackTrace\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendThreadsRequest() {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"threads\",\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendScopesRequest(args: DebugProtocol.ScopesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"scopes\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  _sendVariablesRequest(args: DebugProtocol.VariablesArguments) {\n    let message = {\n      type: \"request\",\n      seq: this._sequenceNum,\n      command: \"variables\",\n      arguments: args,\n    };\n    let json = JSON.stringify(message);\n    this._packageAndSend(json);\n  }\n\n  // write out a message to the adapter on stdout\n  _packageAndSend(message: string) {\n    // format: Content-Length: <length> separator <message>\n    this._adapterProcess.stdin.write(\n      \"Content-Length: \" + Buffer.byteLength(message, \"utf8\") + TWO_CRLF + message,\n      \"utf8\"\n    );\n    this._sequenceNum++;\n  }\n\n  _uiOutput(message: string) {\n    console.log(message);\n  }\n\n  serve() {\n    this._uiOutput(\"Debugger is starting up Prepack...\");\n    // Set up the adapter connection\n    this._startAdapter();\n\n    // send an initialize request to the adapter to fetch some configuration details\n    let initArgs: DebugProtocol.InitializeRequestArguments = {\n      // a unique name for each UI (e.g Nuclide, VSCode, CLI)\n      clientID: DebuggerConstants.CLI_CLIENTID,\n      // a unique name for each adapter\n      adapterID: \"Prepack-Debugger-Adapter\",\n      linesStartAt1: true,\n      columnsStartAt1: true,\n      supportsVariableType: true,\n      supportsVariablePaging: false,\n      supportsRunInTerminalRequest: false,\n      pathFormat: \"path\",\n    };\n    this._sendInitializeRequest(initArgs);\n\n    this._reader = readline.createInterface({ input: this._proc.stdin, output: this._proc.stdout });\n  }\n\n  shutdown() {\n    this._reader.close();\n    this._adapterProcess.kill();\n    this._proc.exit(0);\n  }\n}\n"]}