{"version":3,"sources":["../scripts/test-error-handler.js"],"names":["chalk","require","path","fs","search","dir","relative","tests","existsSync","readdirSync","name","loc","join","stat","statSync","isFile","push","file","readFileSync","isDirectory","concat","__dirname","errorHandler","retval","errors","error","runTest","code","console","log","inverse","recover","includes","additionalFunctions","delayUnsupportedRequires","expectedErrors","match","length","eval","constructor","Array","options","internalDebug","mathRandomSeed","bind","serialize","initializeMoreModules","red","e","message","i","prop","expected","actual","filename","JSON","stringify","run","failed","passed","total","test","basename","endsWith","Math","round","process","exit"],"mappings":"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","file":"test-error-handler.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { type CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"../lib/errors.js\";\nimport { prepackFileSync } from \"../lib/prepack-node.js\";\nimport invariant from \"../lib/invariant.js\";\n\nlet chalk = require(\"chalk\");\nlet path = require(\"path\");\nlet fs = require(\"fs\");\n\nfunction search(dir, relative) {\n  let tests = [];\n\n  if (fs.existsSync(dir)) {\n    for (let name of fs.readdirSync(dir)) {\n      let loc = path.join(dir, name);\n      let stat = fs.statSync(loc);\n\n      if (stat.isFile()) {\n        tests.push({\n          file: fs.readFileSync(loc, \"utf8\"),\n          name: path.join(relative, name),\n        });\n      } else if (stat.isDirectory()) {\n        tests = tests.concat(search(loc, path.join(relative, name)));\n      }\n    }\n  }\n\n  return tests;\n}\n\nlet tests = search(`${__dirname}/../test/error-handler`, \"test/error-handler\");\n\nfunction errorHandler(\n  retval: ErrorHandlerResult,\n  errors: Array<CompilerDiagnostic>,\n  error: CompilerDiagnostic\n): ErrorHandlerResult {\n  errors.push(error);\n  return retval;\n}\n\nfunction runTest(name: string, code: string): boolean {\n  console.log(chalk.inverse(name));\n\n  let recover = code.includes(\"// recover-from-errors\");\n  let additionalFunctions = code.includes(\"// additional functions\");\n  let delayUnsupportedRequires = code.includes(\"// delay unsupported requires\");\n\n  let expectedErrors = code.match(/\\/\\/\\s*expected errors:\\s*(.*)/);\n  invariant(expectedErrors);\n  invariant(expectedErrors.length > 1);\n  expectedErrors = expectedErrors[1];\n  expectedErrors = eval(expectedErrors); // eslint-disable-line no-eval\n  invariant(expectedErrors.constructor === Array);\n\n  let errors = [];\n  try {\n    let options = {\n      internalDebug: false,\n      delayUnsupportedRequires,\n      mathRandomSeed: \"0\",\n      errorHandler: errorHandler.bind(null, recover ? \"Recover\" : \"Fail\", errors),\n      serialize: true,\n      initializeMoreModules: false,\n    };\n    if (additionalFunctions) (options: any).additionalFunctions = [\"global.additional1\", \"global['additional2']\"];\n    prepackFileSync([name], options);\n    if (!recover) {\n      console.log(chalk.red(\"Serialization succeeded though it should have failed\"));\n      return false;\n    }\n  } catch (e) {\n    if (!(e instanceof FatalError)) {\n      console.log(chalk.red(`Unexpected error: ${e.message}`));\n    }\n  }\n  if (errors.length !== expectedErrors.length) {\n    console.log(chalk.red(`Expected ${expectedErrors.length} errors, but found ${errors.length}`));\n    return false;\n  }\n\n  for (let i = 0; i < expectedErrors.length; ++i) {\n    for (let prop in expectedErrors[i]) {\n      let expected = expectedErrors[i][prop];\n      let actual = (errors[i]: any)[prop];\n      if (prop === \"location\") {\n        if (actual) delete actual.filename;\n        actual = JSON.stringify(actual);\n        expected = JSON.stringify(expected);\n      }\n      if (expected !== actual) {\n        console.log(chalk.red(`Error ${i + 1}: Expected ${expected} errors, but found ${actual}`));\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction run() {\n  let failed = 0;\n  let passed = 0;\n  let total = 0;\n\n  for (let test of tests) {\n    // filter hidden files\n    if (path.basename(test.name)[0] === \".\") continue;\n    if (test.name.endsWith(\"~\")) continue;\n\n    total++;\n    if (runTest(test.name, test.file)) passed++;\n    else failed++;\n  }\n\n  console.log(\"Passed:\", `${passed}/${total}`, (Math.round(passed / total * 100) || 0) + \"%\");\n  return failed === 0;\n}\n\nif (!run()) process.exit(1);\n"]}