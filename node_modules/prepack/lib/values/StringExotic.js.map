{"version":3,"sources":["../../src/values/StringExotic.js"],"names":["StringExotic","realm","intrinsicName","intrinsics","StringPrototype","P","desc","OrdinaryGetOwnProperty","$Realm","undefined","ThrowIfMightHaveBeenDeleted","value","index","Infinity","str","$StringData","throwIfNotConcreteString","len","length","resultStr","charAt","writable","enumerable","configurable","keys","i","push","properties","getOwnPropertyKeysArray","filter","x","map","parseInt","sort","y","key","symbols"],"mappings":"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","file":"StringExotic.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue, Descriptor } from \"../types.js\";\nimport { ObjectValue, NumberValue, StringValue } from \"../values/index.js\";\nimport { CanonicalNumericIndexString } from \"../methods/to.js\";\nimport { IsInteger, IsArrayIndex } from \"../methods/is.js\";\nimport { ToString, ToInteger } from \"../methods/to.js\";\nimport { Properties } from \"../singletons.js\";\nimport invariant from \"../invariant\";\n\nexport default class StringExotic extends ObjectValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, realm.intrinsics.StringPrototype, intrinsicName);\n  }\n\n  // ECMA262 9.4.3.1\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Assert: IsPropertyKey(P) is true.\n\n    // 2. Let desc be OrdinaryGetOwnProperty(S, P).\n    let desc = Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n\n    // 3. If desc is not undefined, return desc.\n    if (desc !== undefined) {\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      return desc;\n    }\n\n    // 4. If Type(P) is not String, return undefined.\n    if (typeof P !== \"string\" && !(P instanceof StringValue)) return undefined;\n\n    // 5. Let index be ! CanonicalNumericIndexString(P).\n    let index = CanonicalNumericIndexString(this.$Realm, typeof P === \"string\" ? new StringValue(this.$Realm, P) : P);\n\n    // 6. If index is undefined, return undefined.\n    if (index === undefined || index === null) return undefined;\n\n    // 7. If IsInteger(index) is false, return undefined.\n    if (IsInteger(this.$Realm, index) === false) return undefined;\n\n    // 8. If index = -0, return undefined.\n    if (1.0 / index === -Infinity) return undefined;\n\n    // 9. Let str be the String value of S.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 10. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    // 11. If index < 0 or len ≤ index, return undefined.\n    if (index < 0 || len <= index) return undefined;\n\n    // 12. Let resultStr be a String value of length 1, containing one code unit from str, specifically the code unit at index index.\n    let resultStr = new StringValue(this.$Realm, str.value.charAt(index));\n\n    // 13. Return a PropertyDescriptor{[[Value]]: resultStr, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false}.\n    return {\n      value: resultStr,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    };\n  }\n\n  // ECMA262 9.4.3.2\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    // 1. Let keys be a new empty List.\n    let keys = [];\n\n    // 2. Let str be the String value of O.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 3. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    // 4. For each integer i starting with 0 such that i < len, in ascending order,\n    for (let i = 0; i < len; ++i) {\n      // a. Add ! ToString(i) as the last element of keys.\n      keys.push(new StringValue(this.$Realm, ToString(this.$Realm, new NumberValue(this.$Realm, i))));\n    }\n\n    // 5. For each own property key P of O such that P is an integer index and ToInteger(P) ≥ len, in ascending numeric index order,\n    let properties = this.getOwnPropertyKeysArray();\n    for (let key of properties\n      .filter(x => IsArrayIndex(this.$Realm, x))\n      .map(x => parseInt(x, 10))\n      .filter(x => ToInteger(this.$Realm, x) >= len)\n      .sort((x, y) => x - y)) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(this.$Realm, key + \"\"));\n    }\n\n    // 6. For each own property key P of O such that Type(P) is String and P is not an integer index, in ascending chronological order of property creation,\n    for (let key of properties.filter(x => !IsArrayIndex(this.$Realm, x))) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(this.$Realm, key));\n    }\n\n    // 7. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation,\n    for (let key of this.symbols.keys()) {\n      // i. Add P as the last element of keys.\n      keys.push(key);\n    }\n\n    // 12. Return keys.\n    return keys;\n  }\n}\n"]}