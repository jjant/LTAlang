"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var NumberValue = function (_PrimitiveValue) {
  _inherits(NumberValue, _PrimitiveValue);

  function NumberValue(realm, value, intrinsicName) {
    _classCallCheck(this, NumberValue);

    var _this = _possibleConstructorReturn(this, (NumberValue.__proto__ || Object.getPrototypeOf(NumberValue)).call(this, realm, intrinsicName));

    _this.value = value;
    return _this;
  }

  _createClass(NumberValue, [{
    key: "equals",
    value: function equals(x) {
      return x instanceof NumberValue && this.value === x.value;
    }
  }, {
    key: "getHash",
    value: function getHash() {
      var num = Math.abs(this.value);
      if (num < 100) num *= 10000000;
      return num | 0; // make a 32-bit integer out of this and get rid of NaN
    }
  }, {
    key: "mightBeFalse",
    value: function mightBeFalse() {
      return this.value === 0 || isNaN(this.value);
    }
  }, {
    key: "throwIfNotConcreteNumber",
    value: function throwIfNotConcreteNumber() {
      return this;
    }
  }, {
    key: "_serialize",
    value: function _serialize() {
      return this.value;
    }
  }, {
    key: "toDisplayString",
    value: function toDisplayString() {
      return this.value.toString();
    }
  }]);

  return NumberValue;
}(_index.PrimitiveValue);

exports.default = NumberValue;
//# sourceMappingURL=NumberValue.js.map