{"version":3,"sources":["../../src/values/PrimitiveValue.js"],"names":["PrimitiveValue","realm","intrinsicName"],"mappings":";;;;;;;;AAYA;;AACA;;;;;;;;;;+eAbA;;;;;;;;;IAeqBA,c;;;AACnB,0BAAYC,KAAZ,EAA0BC,aAA1B,EAAkD;AAAA;;AAChD,6BAAUD,KAAV,EAAiB,gBAAjB;AADgD,2HAE1CA,KAF0C,EAEnCC,aAFmC;AAGjD;;;;kDAE6C;AAC5C,aAAO,IAAP;AACD;;;sCAEyB;AACxB,+BAAU,KAAV,EAAiB,kCAAjB;AACD;;;;;;kBAZkBF,c","file":"PrimitiveValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { ConcreteValue } from \"./index.js\";\nimport invariant from \"../invariant.js\";\n\nexport default class PrimitiveValue extends ConcreteValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    invariant(realm, \"realm required\");\n    super(realm, intrinsicName);\n  }\n\n  throwIfNotConcretePrimitive(): PrimitiveValue {\n    return this;\n  }\n\n  toDisplayString(): string {\n    invariant(false, \"abstract method; please override\");\n  }\n}\n"]}