{"version":3,"sources":["../../src/values/SymbolValue.js"],"names":["SymbolValue","realm","desc","intrinsicName","$Description","x","hashValue","getHash","$Realm","symbolCount","Symbol","toDisplayString"],"mappings":";;;;;;;;AAWA;;;;;;+eAXA;;;;;;;;;IAcqBA,W;;;AACnB,uBAAYC,KAAZ,EAA0BC,IAA1B,EAA8CC,aAA9C,EAAsE;AAAA;;AAAA,0HAC9DF,KAD8D,EACvDE,aADuD;;AAEpE,UAAKC,YAAL,GAAoBF,IAApB;AAFoE;AAGrE;;;;2BAMMG,C,EAAmB;AACxB,aAAOA,aAAaL,WAAb,IAA4B,KAAKM,SAAL,KAAmBD,EAAEC,SAAjD,IAA8D,KAAKF,YAAL,KAAsBC,EAAED,YAA7F;AACD;;;8BAEiB;AAChB,UAAI,CAAC,KAAKE,SAAV,EAAqB;AACnB,aAAKA,SAAL,GAAiB,KAAKF,YAAL,GAAoB,KAAKA,YAAL,CAAkBG,OAAlB,EAApB,GAAkD,EAAE,KAAKC,MAAL,CAAYC,WAAjF;AACD;AACD,aAAO,KAAKH,SAAZ;AACD;;;mCAEuB;AACtB,aAAO,KAAP;AACD;;;+CAEuC;AACtC,aAAO,IAAP;AACD;;;iCAEoB;AACnB,aAAOI,OAAO,KAAKN,YAAZ,CAAP;AACD;;;sCAEyB;AACxB,UAAI,KAAKA,YAAT,EAAuB;AACrB,YAAI,KAAKA,YAAL,iCAAJ,EAAiD;AAC/C,6BAAiB,KAAKA,YAAL,CAAkBO,eAAlB,EAAjB;AACD;AACF;AACD,aAAO,yBAAP;AACD;;;;;;kBAxCkBX,W","file":"SymbolValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default class SymbolValue extends PrimitiveValue {\n  constructor(realm: Realm, desc: void | Value, intrinsicName?: string) {\n    super(realm, intrinsicName);\n    this.$Description = desc;\n  }\n\n  $Description: void | Value;\n\n  hashValue: void | number;\n\n  equals(x: Value): boolean {\n    return x instanceof SymbolValue && this.hashValue === x.hashValue && this.$Description === x.$Description;\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = this.$Description ? this.$Description.getHash() : ++this.$Realm.symbolCount;\n    }\n    return this.hashValue;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  throwIfNotConcreteSymbol(): SymbolValue {\n    return this;\n  }\n\n  _serialize(): Symbol {\n    return Symbol(this.$Description);\n  }\n\n  toDisplayString(): string {\n    if (this.$Description) {\n      if (this.$Description instanceof PrimitiveValue) {\n        return `Symbol(${this.$Description.toDisplayString()})`;\n      }\n    }\n    return \"Symbol(to be supported)\";\n  }\n}\n"]}