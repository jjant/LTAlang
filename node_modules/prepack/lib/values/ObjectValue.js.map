{"version":3,"sources":["../../src/values/ObjectValue.js"],"names":["ObjectValue","realm","proto","intrinsicName","refuseSerialization","recordNewObject","useAbstractInterpretation","setupBindings","getTrackedPropertyNames","$Prototype","intrinsics","null","$Extensible","true","_isPartial","false","_isSimple","properties","Map","symbols","trackedPropertyNames","propertyNames","propName","desc","writeable","value","undefined","descriptor","object","key","x","getHash","hashValue","$Realm","objectCount","isPartialObject","size","values","propertyBinding","writable","ObjectPrototype","isSimpleObject","v","$SymbolData","$StringData","$NumberData","$BooleanData","$DateValue","$RegExpMatcher","$SetData","$MapData","$DataView","$ArrayBufferData","$WeakMapData","$WeakSetData","react","enabled","$TypedArrayName","name","length","callback","defineNativeProperty","$DefineOwnProperty","enumerable","configurable","funcName","$Description","throwIfNotConcreteString","func","get","set","unknownProperty","reportIntrospectionError","keyArray","Array","from","keys","filter","pb","pv","mightHaveBeenDeleted","callReportObjectGetOwnProperties","stack","obj","ThrowIfMightHaveBeenDeleted","serializedDesc","serialize","Object","defineProperty","V","OrdinarySetPrototypeOf","P","OrdinaryGetOwnProperty","Desc","OrdinaryDefineOwnProperty","$GetOwnProperty","Receiver","prop","val","specializeJoin","$Get","mightNotBeString","result","createFromType","args","cond","createFromBinaryOp","joinValuesAsConditional","absVal","kind","generic_cond","specializeCond","arg1","arg2","createFromConditionalOp","expressionLocation","OrdinarySet","$Set","createTemplate","recordModifiedProperty","newVal","oldVal","empty","OrdinaryDelete","prototype","binding"],"mappings":"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","file":"ObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm, ExecutionContext } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport type {\n  DataBlock,\n  Descriptor,\n  IterationKind,\n  ObjectKind,\n  PromiseCapability,\n  PromiseReaction,\n  PropertyBinding,\n  PropertyKeyValue,\n  TypedArrayKind,\n} from \"../types.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  NativeFunctionValue,\n  NullValue,\n  NumberValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./index.js\";\nimport { isReactElement } from \"../react/utils.js\";\nimport type { ECMAScriptSourceFunctionValue, NativeFunctionCallback } from \"./index.js\";\nimport {\n  IsDataDescriptor,\n  OrdinaryOwnPropertyKeys,\n  OrdinaryGet,\n  OrdinaryHasProperty,\n  OrdinaryIsExtensible,\n  OrdinaryPreventExtensions,\n} from \"../methods/index.js\";\nimport { Join, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { typeAnnotation } from \"babel-types\";\n\nexport default class ObjectValue extends ConcreteValue {\n  constructor(\n    realm: Realm,\n    proto?: ObjectValue | NullValue,\n    intrinsicName?: string,\n    refuseSerialization: boolean = false\n  ) {\n    super(realm, intrinsicName);\n    realm.recordNewObject(this);\n    if (realm.useAbstractInterpretation) this.setupBindings(this.getTrackedPropertyNames());\n    this.$Prototype = proto || realm.intrinsics.null;\n    this.$Extensible = realm.intrinsics.true;\n    this._isPartial = realm.intrinsics.false;\n    this._isSimple = realm.intrinsics.false;\n    this.properties = new Map();\n    this.symbols = new Map();\n    this.refuseSerialization = refuseSerialization;\n  }\n\n  static trackedPropertyNames = [\n    \"_isPartial\",\n    \"_isSimple\",\n    \"$ArrayIteratorNextIndex\",\n    \"$DateValue\",\n    \"$Extensible\",\n    \"$IteratedList\",\n    \"$IteratedObject\",\n    \"$IteratedSet\",\n    \"$IteratedString\",\n    \"$Map\",\n    \"$MapData\",\n    \"$MapNextIndex\",\n    \"$Prototype\",\n    \"$SetData\",\n    \"$SetNextIndex\",\n    \"$StringIteratorNextIndex\",\n    \"$WeakMapData\",\n    \"$WeakSetData\",\n  ];\n\n  getTrackedPropertyNames(): Array<string> {\n    return ObjectValue.trackedPropertyNames;\n  }\n\n  setupBindings(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      let desc = { writeable: true, value: undefined };\n      (this: any)[propName + \"_binding\"] = { descriptor: desc, object: this, key: propName };\n    }\n  }\n\n  static setupTrackedPropertyAccessors(propertyNames: Array<string>) {\n    for (let propName of propertyNames) {\n      Object.defineProperty(ObjectValue.prototype, propName, {\n        configurable: true,\n        get: function() {\n          let binding = this[propName + \"_binding\"];\n          return binding.descriptor.value;\n        },\n        set: function(v) {\n          let binding = this[propName + \"_binding\"];\n          this.$Realm.recordModifiedProperty(binding);\n          binding.descriptor.value = v;\n        },\n      });\n    }\n  }\n\n  $Prototype: ObjectValue | NullValue;\n  $Extensible: BooleanValue;\n\n  $ParameterMap: void | ObjectValue; // undefined when the property is \"missing\"\n  $SymbolData: void | SymbolValue | AbstractValue;\n  $StringData: void | StringValue | AbstractValue;\n  $NumberData: void | NumberValue | AbstractValue;\n  $BooleanData: void | BooleanValue | AbstractValue;\n\n  // error\n  $ErrorData: void | {\n    // undefined when the property is \"missing\"\n    contextStack: Array<ExecutionContext>,\n    locationData: void | {\n      filename: string,\n      sourceCode: string,\n      loc: { line: number, column: number },\n      stackDecorated: boolean,\n    },\n  };\n\n  // function\n  $Call: void | ((thisArgument: Value, argumentsList: Array<Value>) => Value);\n  $Construct: void | ((argumentsList: Array<Value>, newTarget: ObjectValue) => ObjectValue);\n\n  // promise\n  $Promise: ?ObjectValue;\n  $AlreadyResolved: void | { value: boolean };\n  $PromiseState: void | \"pending\" | \"fulfilled\" | \"rejected\";\n  $PromiseResult: void | Value;\n  $PromiseFulfillReactions: void | Array<PromiseReaction>;\n  $PromiseRejectReactions: void | Array<PromiseReaction>;\n  $PromiseIsHandled: void | boolean;\n  $Capability: void | PromiseCapability;\n  $AlreadyCalled: void | { value: boolean };\n  $Index: void | number;\n  $Values: void | Array<Value>;\n  $Capabilities: void | PromiseCapability;\n  $RemainingElements: void | { value: number };\n\n  // iterator\n  $IteratedList: void | Array<Value>;\n  $ListIteratorNextIndex: void | number;\n  $IteratorNext: void | NativeFunctionValue;\n\n  // set\n  $SetIterationKind: void | IterationKind;\n  $SetNextIndex: void | number;\n  $IteratedSet: void | ObjectValue | UndefinedValue;\n  $SetData: void | Array<void | Value>;\n\n  // react\n  $SuperTypeParameters: void | typeAnnotation;\n\n  // map\n  $MapIterationKind: void | IterationKind;\n  $MapNextIndex: void | NumberValue;\n  $MapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n  $Map: void | ObjectValue | UndefinedValue;\n\n  // weak map\n  $WeakMapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n\n  // weak set\n  $WeakSetData: void | Array<void | Value>;\n\n  // date\n  $DateValue: void | NumberValue | AbstractValue; // of type number\n\n  // array\n  $ArrayIterationKind: void | IterationKind;\n  $ArrayIteratorNextIndex: void | NumberValue;\n  $IteratedObject: void | UndefinedValue | ObjectValue;\n\n  // regex\n  $OriginalSource: void | string;\n  $OriginalFlags: void | string;\n  $RegExpMatcher: void | ((S: string, lastIndex: number) => ?{ endIndex: number, captures: Array<any> });\n\n  // string\n  $StringIteratorNextIndex: void | number;\n  $IteratedString: void | StringValue;\n\n  // data view\n  $DataView: void | true;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ByteLength: void | number;\n  $ByteOffset: void | number;\n\n  // array buffer\n  $ArrayBufferData: void | null | DataBlock;\n  $ArrayBufferByteLength: void | number;\n\n  // generator\n  $GeneratorState: void | \"suspendedStart\" | \"executing\";\n  $GeneratorContext: void | ExecutionContext;\n\n  // typed array\n  $TypedArrayName: void | TypedArrayKind;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ArrayLength: void | number;\n\n  // backpointer to the constructor if this object was created its prototype object\n  originalConstructor: void | ECMAScriptSourceFunctionValue;\n\n  // partial objects\n  _isPartial: BooleanValue;\n\n  // If true, the object has no property getters or setters and it is safe\n  // to return AbstractValue for unknown properties.\n  _isSimple: BooleanValue;\n\n  isTemplate: void | true;\n\n  properties: Map<string, PropertyBinding>;\n  symbols: Map<SymbolValue, PropertyBinding>;\n  unknownProperty: void | PropertyBinding;\n\n  // An object value with an intrinsic name can either exist from the beginning of time,\n  // or it can be associated with a particular point in time by being used as a template\n  // when deriving an abstract value via a generator.\n  intrinsicNameGenerated: void | true;\n  hashValue: void | number;\n\n  // ReactElement\n  $BailOutReason: void | string;\n\n  equals(x: Value): boolean {\n    return x instanceof ObjectValue && this.getHash() === x.getHash();\n  }\n\n  getHash(): number {\n    if (!this.hashValue) {\n      this.hashValue = ++this.$Realm.objectCount;\n    }\n    return this.hashValue;\n  }\n\n  // We track some internal state as properties on the global object, these should\n  // never be serialized.\n  refuseSerialization: boolean;\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeObject(): boolean {\n    return false;\n  }\n\n  throwIfNotObject(): ObjectValue {\n    return this;\n  }\n\n  makeNotPartial(): void {\n    this._isPartial = this.$Realm.intrinsics.false;\n  }\n\n  makePartial(): void {\n    this._isPartial = this.$Realm.intrinsics.true;\n  }\n\n  makeSimple(): void {\n    this._isSimple = this.$Realm.intrinsics.true;\n  }\n\n  isPartialObject(): boolean {\n    return this._isPartial.value;\n  }\n\n  isSimpleObject(): boolean {\n    if (this._isSimple.value) return true;\n    if (this.isPartialObject()) return false;\n    if (this.symbols.size > 0) return false;\n    for (let propertyBinding of this.properties.values()) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      if (!IsDataDescriptor(this.$Realm, desc)) return false;\n      if (!desc.writable) return false;\n    }\n    if (this.$Prototype instanceof NullValue) return true;\n    if (this.$Prototype === this.$Realm.intrinsics.ObjectPrototype) return true;\n    return this.$Prototype.isSimpleObject();\n  }\n\n  getExtensible(): boolean {\n    return this.$Extensible.value;\n  }\n\n  setExtensible(v: boolean) {\n    this.$Extensible = v ? this.$Realm.intrinsics.true : this.$Realm.intrinsics.false;\n  }\n\n  getKind(): ObjectKind {\n    // we can deduce the natural prototype by checking whether the following internal slots are present\n    if (this.$SymbolData !== undefined) return \"Symbol\";\n    if (this.$StringData !== undefined) return \"String\";\n    if (this.$NumberData !== undefined) return \"Number\";\n    if (this.$BooleanData !== undefined) return \"Boolean\";\n    if (this.$DateValue !== undefined) return \"Date\";\n    if (this.$RegExpMatcher !== undefined) return \"RegExp\";\n    if (this.$SetData !== undefined) return \"Set\";\n    if (this.$MapData !== undefined) return \"Map\";\n    if (this.$DataView !== undefined) return \"DataView\";\n    if (this.$ArrayBufferData !== undefined) return \"ArrayBuffer\";\n    if (this.$WeakMapData !== undefined) return \"WeakMap\";\n    if (this.$WeakSetData !== undefined) return \"WeakSet\";\n    if (isReactElement(this) && this.$Realm.react.enabled) return \"ReactElement\";\n    if (this.$TypedArrayName !== undefined) return this.$TypedArrayName;\n    // TODO #26 #712: Promises. All kinds of iterators. Generators.\n    return \"Object\";\n  }\n\n  defineNativeMethod(\n    name: SymbolValue | string,\n    length: number,\n    callback: NativeFunctionCallback,\n    desc?: Descriptor = {}\n  ) {\n    let intrinsicName;\n    if (typeof name === \"string\") {\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n    this.defineNativeProperty(\n      name,\n      new NativeFunctionValue(this.$Realm, intrinsicName, name, length, callback, false),\n      desc\n    );\n  }\n\n  defineNativeProperty(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeGetter(name: SymbolValue | string, callback: NativeFunctionCallback, desc?: Descriptor = {}) {\n    let intrinsicName, funcName;\n    if (typeof name === \"string\") {\n      funcName = `get ${name}`;\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      funcName =\n        name.$Description instanceof Value\n          ? `get [${name.$Description.throwIfNotConcreteString().value}]`\n          : `get [${\"?\"}]`;\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n\n    let func = new NativeFunctionValue(this.$Realm, intrinsicName, funcName, 0, callback);\n    this.$DefineOwnProperty(name, {\n      get: func,\n      set: this.$Realm.intrinsics.undefined,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeConstant(name: SymbolValue | string, value?: Value | Array<Value>, desc?: Descriptor = {}) {\n    invariant(!value || value instanceof Value);\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n      ...desc,\n    });\n  }\n\n  getOwnPropertyKeysArray(): Array<string> {\n    if (this.isPartialObject() || this.unknownProperty !== undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let keyArray = Array.from(this.properties.keys());\n    keyArray = keyArray.filter(x => {\n      let pb = this.properties.get(x);\n      if (!pb || pb.descriptor === undefined) return false;\n      let pv = pb.descriptor.value;\n      if (pv === undefined) return true;\n      invariant(pv instanceof Value);\n      if (!pv.mightHaveBeenDeleted()) return true;\n      // The property may or may not be there at runtime.\n      // We can at best return an abstract keys array.\n      // For now just terminate.\n      invariant(pv instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(pv);\n      throw new FatalError();\n    });\n    this.$Realm.callReportObjectGetOwnProperties(this);\n    return keyArray;\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    let obj = set({});\n\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      let serializedDesc: any = { enumerable: desc.enumerable, configurable: desc.configurable };\n      if (desc.value) {\n        serializedDesc.writable = desc.writable;\n        invariant(desc.value instanceof Value);\n        serializedDesc.value = desc.value.serialize(stack);\n      } else {\n        invariant(desc.get !== undefined);\n        serializedDesc.get = desc.get.serialize(stack);\n        invariant(desc.set !== undefined);\n        serializedDesc.set = desc.set.serialize(stack);\n      }\n      Object.defineProperty(obj, key, serializedDesc);\n    }\n    return obj;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | NullValue {\n    return this.$Prototype;\n  }\n\n  // ECMA262 9.1.2\n  $SetPrototypeOf(V: ObjectValue | NullValue): boolean {\n    // 1. Return ! OrdinarySetPrototypeOf(O, V).\n    return Properties.OrdinarySetPrototypeOf(this.$Realm, this, V);\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    // 1. Return ! OrdinaryIsExtensible(O).\n    return OrdinaryIsExtensible(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.4\n  $PreventExtensions(): boolean {\n    // 1. Return ! OrdinaryPreventExtensions(O).\n    return OrdinaryPreventExtensions(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Return ! OrdinaryGetOwnProperty(O, P).\n    return Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    // 1. Return ? OrdinaryDefineOwnProperty(O, P, Desc).\n    return Properties.OrdinaryDefineOwnProperty(this.$Realm, this, P, Desc);\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined && this.$GetOwnProperty(P) === undefined) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    return OrdinaryHasProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    let prop = this.unknownProperty;\n    if (prop !== undefined && prop.descriptor !== undefined && this.$GetOwnProperty(P) === undefined) {\n      let desc = prop.descriptor;\n      invariant(desc !== undefined);\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      let propName;\n      if (P instanceof StringValue) {\n        propName = P;\n      } else if (typeof P === \"string\") {\n        propName = new StringValue(this.$Realm, P);\n      } else {\n        AbstractValue.reportIntrospectionError(val, \"abstract computed property name\");\n        throw new FatalError();\n      }\n      return this.specializeJoin(val, propName);\n    }\n\n    // 1. Return ? OrdinaryGet(O, P, Receiver).\n    return OrdinaryGet(this.$Realm, this, P, Receiver);\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    // We assume that simple objects have no getter/setter properties.\n    if (this !== Receiver || !this.isSimpleObject() || P.mightNotBeString()) {\n      AbstractValue.reportIntrospectionError(P, \"TODO: #1021\");\n      throw new FatalError();\n    }\n    // If all else fails, use this expression\n    let result;\n    if (this.isPartialObject()) {\n      result = AbstractValue.createFromType(this.$Realm, Value, \"sentinel member expression\");\n      result.args = [this, P];\n    } else {\n      result = this.$Realm.intrinsics.undefined;\n    }\n    // Get a specialization of the join of all values written to the object\n    // with abstract property names.\n    let prop = this.unknownProperty;\n    if (prop !== undefined) {\n      let desc = prop.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        result = this.specializeJoin(val, P);\n      }\n    }\n    // Join in all of the other values that were written to the object with\n    // concrete property names.\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      invariant(desc.value !== undefined); // otherwise this is not simple\n      let val = desc.value;\n      invariant(val instanceof Value);\n      let cond = AbstractValue.createFromBinaryOp(\n        this.$Realm,\n        \"===\",\n        P,\n        new StringValue(this.$Realm, key),\n        undefined,\n        \"check for known property\"\n      );\n      result = Join.joinValuesAsConditional(this.$Realm, cond, val, result);\n    }\n    return result;\n  }\n\n  specializeJoin(absVal: AbstractValue, propName: Value): Value {\n    invariant(absVal.args.length === 3 && absVal.kind === \"conditional\");\n    let generic_cond = absVal.args[0];\n    invariant(generic_cond instanceof AbstractValue);\n    let cond = this.specializeCond(generic_cond, propName);\n    let arg1 = absVal.args[1];\n    if (arg1 instanceof AbstractValue && arg1.args.length === 3) arg1 = this.specializeJoin(arg1, propName);\n    let arg2 = absVal.args[2];\n    if (arg2 instanceof AbstractValue && arg2.args.length === 3) arg2 = this.specializeJoin(arg2, propName);\n    return AbstractValue.createFromConditionalOp(this.$Realm, cond, arg1, arg2, absVal.expressionLocation);\n  }\n\n  specializeCond(absVal: AbstractValue, propName: Value): AbstractValue {\n    if (absVal.kind === \"template for property name condition\")\n      return AbstractValue.createFromBinaryOp(this.$Realm, \"===\", absVal.args[0], propName);\n    return absVal;\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Return ? OrdinarySet(O, P, V, Receiver).\n    return Properties.OrdinarySet(this.$Realm, this, P, V, Receiver);\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n\n    function createTemplate(realm: Realm, propName: AbstractValue) {\n      return AbstractValue.createFromBinaryOp(\n        realm,\n        \"===\",\n        propName,\n        new StringValue(realm, \"\"),\n        undefined,\n        \"template for property name condition\"\n      );\n    }\n\n    // We assume that simple objects have no getter/setter properties and\n    // that all properties are writable.\n    if (this !== Receiver || !this.isSimpleObject() || P.mightNotBeString()) {\n      AbstractValue.reportIntrospectionError(P, \"TODO #1021\");\n      throw new FatalError();\n    }\n\n    let prop;\n    if (this.unknownProperty === undefined) {\n      prop = {\n        descriptor: undefined,\n        object: this,\n        key: \"\",\n      };\n      this.unknownProperty = prop;\n    } else {\n      prop = this.unknownProperty;\n    }\n    this.$Realm.recordModifiedProperty(prop);\n    let desc = prop.descriptor;\n    if (desc === undefined) {\n      let newVal = V;\n      if (!(V instanceof UndefinedValue)) {\n        // join V with undefined, using a property name test as the condition\n        let cond = createTemplate(this.$Realm, P);\n        newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, this.$Realm.intrinsics.undefined);\n      }\n      prop.descriptor = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: newVal,\n      };\n    } else {\n      // join V with current value of this.unknownProperty. I.e. weak update.\n      let oldVal = desc.value;\n      invariant(oldVal instanceof Value);\n      let newVal = oldVal;\n      if (!(V instanceof UndefinedValue)) {\n        let cond = createTemplate(this.$Realm, P);\n        newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      }\n      desc.value = newVal;\n    }\n\n    // Since we don't know the name of the property we are writing to, we also need\n    // to perform weak updates of all of the known properties.\n    for (let [key, propertyBinding] of this.properties) {\n      let oldVal = this.$Realm.intrinsics.empty;\n      if (propertyBinding.descriptor && propertyBinding.descriptor.value) {\n        oldVal = propertyBinding.descriptor.value;\n        invariant(oldVal instanceof Value); // otherwise this is not simple\n      }\n      let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", P, new StringValue(this.$Realm, key));\n      let newVal = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      Properties.OrdinarySet(this.$Realm, this, key, newVal, Receiver);\n    }\n\n    return true;\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined) {\n      // TODO #946: generate a delete from the object\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    // 1. Return ? OrdinaryDelete(O, P).\n    return Properties.OrdinaryDelete(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.11\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    return OrdinaryOwnPropertyKeys(this.$Realm, this);\n  }\n}\n"]}