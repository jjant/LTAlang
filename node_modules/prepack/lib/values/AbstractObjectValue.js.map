{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["AbstractObjectValue","realm","types","values","hashValue","args","buildNode","optionalArgs","isTop","getElements","element","isPartialObject","reportIntrospectionError","result","undefined","isSimpleObject","makeNotPartial","makePartial","makeSimple","P","value","elements","size","cv","$GetOwnProperty","kind","cond","ob1","ob2","d1","d2","desc","$Realm","d1Value","d2Value","joinValuesAsConditional","hasProp","doesNotHaveProp","d","createFromBinaryOp","expressionLocation","Desc","$DefineOwnProperty","intrinsics","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","Receiver","$Get","d1val","d2val","cvVal","$GetPartial","V","$Set","oldVal","v","$SetPartial","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport { AbstractValue, ObjectValue, StringValue, Value } from \"./index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { IsDataDescriptor, cloneDescriptor, equalDescriptors } from \"../methods/index.js\";\nimport { Join } from \"../singletons.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    hashValue: number,\n    args: Array<Value>,\n    buildNode?: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, intrinsicName?: string |}\n  ) {\n    super(realm, types, values, hashValue, args, buildNode, optionalArgs);\n    if (!values.isTop()) {\n      for (let element of this.values.getElements()) invariant(element instanceof ObjectValue);\n    }\n  }\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartialObject()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  isPartialObject(): boolean {\n    // At the very least, the identity of the object is unknown\n    return true;\n  }\n\n  isSimpleObject(): boolean {\n    if (this.values.isTop()) return false;\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isSimpleObject();\n      } else if (result !== element.isSimpleObject()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    return true;\n  }\n\n  makeNotPartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(): void {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      return element.makeSimple();\n    }\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d2 = ob2.$GetOwnProperty(P);\n      if (d1 === undefined || d2 === undefined || !equalDescriptors(d1, d2)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = cloneDescriptor(d1);\n      invariant(desc !== undefined);\n      if (IsDataDescriptor(this.$Realm, desc)) {\n        let d1Value = d1.value;\n        invariant(d1Value === undefined || d1Value instanceof Value);\n        let d2Value = d2.value;\n        invariant(d2Value === undefined || d2Value instanceof Value);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d1Value, d2Value);\n      }\n      return desc;\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc)) {\n              AbstractValue.reportIntrospectionError(this, P);\n              throw new FatalError();\n            }\n            if (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n            desc.value = Join.joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = {\n        value: \"value\" in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: \"writable\" in Desc ? Desc.writable : false,\n        enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n        configurable: \"configurable\" in Desc ? Desc.configurable : false,\n      };\n      let new_val = desc.value;\n      invariant(new_val instanceof Value);\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let dval = d === undefined || d.vale === undefined ? this.$Realm.intrinsics.empty : d.value;\n        invariant(dval instanceof Value);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        desc.value = Join.joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true;\n        else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else if (this.kind === \"conditional\") {\n      // this is the join of two concrete objects\n      // use this join condition for the join of the two property values\n      let [cond, ob1, ob2] = this.args;\n      invariant(cond instanceof AbstractValue);\n      invariant(ob1 instanceof ObjectValue);\n      invariant(ob2 instanceof ObjectValue);\n      let d1 = ob1.$GetOwnProperty(P);\n      let d1val =\n        d1 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d1) ? d1.value : undefined;\n      let d2 = ob2.$GetOwnProperty(P);\n      let d2val =\n        d2 === undefined ? this.$Realm.intrinsics.undefined : IsDataDescriptor(this.$Realm, d2) ? d2.value : undefined;\n      if (d1val === undefined || d2val === undefined) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      invariant(d1val instanceof Value);\n      invariant(d2val instanceof Value);\n      return Join.joinValuesAsConditional(this.$Realm, cond, d1val, d2val);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, cv);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, cv);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n          result = Join.joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (P instanceof StringValue) P = P.value;\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    invariant(this === Receiver, \"TODO #1021\");\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver);\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, cv);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cond = AbstractValue.createFromBinaryOp(this.$Realm, \"===\", this, cv, this.expressionLocation);\n        let v = Join.joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    if (this.values.isTop()) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n  }\n}\n"]}