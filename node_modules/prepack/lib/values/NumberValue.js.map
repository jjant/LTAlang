{"version":3,"sources":["../../src/values/NumberValue.js"],"names":["NumberValue","realm","value","intrinsicName","x","num","Math","abs","isNaN","toString"],"mappings":";;;;;;;;AAWA;;;;;;+eAXA;;;;;;;;;IAcqBA,W;;;AACnB,uBAAYC,KAAZ,EAA0BC,KAA1B,EAAyCC,aAAzC,EAAiE;AAAA;;AAAA,0HACzDF,KADyD,EAClDE,aADkD;;AAG/D,UAAKD,KAAL,GAAaA,KAAb;AAH+D;AAIhE;;;;2BAIME,C,EAAmB;AACxB,aAAOA,aAAaJ,WAAb,IAA4B,KAAKE,KAAL,KAAeE,EAAEF,KAApD;AACD;;;8BAEiB;AAChB,UAAIG,MAAMC,KAAKC,GAAL,CAAS,KAAKL,KAAd,CAAV;AACA,UAAIG,MAAM,GAAV,EAAeA,OAAO,QAAP;AACf,aAAOA,MAAM,CAAb,CAHgB,CAGA;AACjB;;;mCAEuB;AACtB,aAAO,KAAKH,KAAL,KAAe,CAAf,IAAoBM,MAAM,KAAKN,KAAX,CAA3B;AACD;;;+CAEuC;AACtC,aAAO,IAAP;AACD;;;iCAEoB;AACnB,aAAO,KAAKA,KAAZ;AACD;;;sCAEyB;AACxB,aAAO,KAAKA,KAAL,CAAWO,QAAX,EAAP;AACD;;;;;;kBAjCkBT,W","file":"NumberValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { PrimitiveValue, Value } from \"./index.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default class NumberValue extends PrimitiveValue {\n  constructor(realm: Realm, value: number, intrinsicName?: string) {\n    super(realm, intrinsicName);\n\n    this.value = value;\n  }\n\n  value: number;\n\n  equals(x: Value): boolean {\n    return x instanceof NumberValue && this.value === x.value;\n  }\n\n  getHash(): number {\n    let num = Math.abs(this.value);\n    if (num < 100) num *= 10000000;\n    return num | 0; // make a 32-bit integer out of this and get rid of NaN\n  }\n\n  mightBeFalse(): boolean {\n    return this.value === 0 || isNaN(this.value);\n  }\n\n  throwIfNotConcreteNumber(): NumberValue {\n    return this;\n  }\n\n  _serialize(): number {\n    return this.value;\n  }\n\n  toDisplayString(): string {\n    return this.value.toString();\n  }\n}\n"]}