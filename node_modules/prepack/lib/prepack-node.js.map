{"version":3,"sources":["../src/prepack-node.js"],"names":["prepackStdin","prepackFile","prepackFileSync","options","callback","sourceMapFilename","inputSourceMapFilename","process","stdin","setEncoding","resume","on","code","readFile","mapErr","sourceMap","console","warn","filename","serialized","filePath","fileContents","sourceMapContents","err","fileErrorHandler","compatibility","fileErr","filenames","length","error","exit","sourceFiles","map","readFileSync","_e","debugChannel","enableDebugger","debugInFilePath","debugOutFilePath","debugOptions","ioWrapper","inFilePath","outFilePath"],"mappings":"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","file":"prepack-node.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/*\n Prepack API functions that require Node as the execution environment for Prepack.\n */\n\n/* @flow */\nimport { defaultOptions } from \"./options\";\nimport { type PrepackOptions } from \"./prepack-options\";\nimport { getDebuggerOptions } from \"./prepack-options\";\nimport { prepackNodeCLI, prepackNodeCLISync } from \"./prepack-node-environment.js\";\nimport { prepackSources } from \"./prepack-standalone.js\";\nimport { type SourceMap } from \"./types.js\";\nimport { DebugChannel } from \"./debugger/channel/DebugChannel.js\";\nimport { FileIOWrapper } from \"./debugger/channel/FileIOWrapper.js\";\n\nimport fs from \"fs\";\n\nexport * from \"./prepack-node-environment\";\nexport * from \"./prepack-standalone\";\n\nexport function prepackStdin(\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void\n) {\n  let sourceMapFilename = options.inputSourceMapFilename || \"\";\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.resume();\n  process.stdin.on(\"data\", function(code) {\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap) {\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let filename = \"no-filename-specified\";\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options\n        );\n      } catch (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nexport function prepackFile(\n  filename: string,\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void,\n  fileErrorHandler?: (err: ?Error) => void\n) {\n  if (options.compatibility === \"node-cli\") {\n    prepackNodeCLI(filename, options, callback);\n    return;\n  }\n  let sourceMapFilename = options.inputSourceMapFilename || filename + \".map\";\n  fs.readFile(filename, \"utf8\", function(fileErr, code) {\n    if (fileErr) {\n      if (fileErrorHandler) fileErrorHandler(fileErr);\n      return;\n    }\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap) {\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options\n        );\n      } catch (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nexport function prepackFileSync(filenames: Array<string>, options: PrepackOptions = defaultOptions) {\n  if (options.compatibility === \"node-cli\") {\n    if (filenames.length !== 1) {\n      console.error(`Does not support multiple file prepack in node-cli mode.`);\n      process.exit(1);\n    }\n    return prepackNodeCLISync(filenames[0], options);\n  }\n  const sourceFiles = filenames.map(filename => {\n    let code = fs.readFileSync(filename, \"utf8\");\n    let sourceMap = \"\";\n    let sourceMapFilename = options.inputSourceMapFilename || filename + \".map\";\n    try {\n      sourceMap = fs.readFileSync(sourceMapFilename, \"utf8\");\n    } catch (_e) {\n      if (options.inputSourceMapFilename) console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n    }\n    return { filePath: filename, fileContents: code, sourceMapContents: sourceMap };\n  });\n  let debugChannel;\n  //flag to hide the debugger for now\n  if (options.enableDebugger && options.debugInFilePath && options.debugOutFilePath) {\n    let debugOptions = getDebuggerOptions(options);\n    let ioWrapper = new FileIOWrapper(false, debugOptions.inFilePath, debugOptions.outFilePath);\n    debugChannel = new DebugChannel(ioWrapper);\n  }\n  return prepackSources(sourceFiles, options, debugChannel);\n}\n"]}