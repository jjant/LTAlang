{"version":3,"sources":["../scripts/test-residual.js"],"names":["construct_realm","require","default","initializeGlobals","AbruptCompletion","ThrowCompletion","FatalError","chalk","path","fs","vm","search","dir","relative","tests","readdirSync","name","loc","join","stat","statSync","isFile","push","file","readFileSync","isDirectory","concat","__dirname","exec","code","script","Script","cachedDataProduced","result","logOutput","write","prefix","values","runInNewContext","setTimeout","setInterval","clearTimeout","clearInterval","report","s","console","log","warn","error","runTest","realmOptions","residual","sources","filePath","fileContents","inverse","includes","realm","$GlobalEnv","executePartialEvaluator","value","err","expected","actual","codeIterations","markersToFind","positive","marker","i","indexOf","substring","length","start","max","oldCode","newCode","markersIssue","found","red","underline","run","failed","passed","total","test","basename","endsWith","Math","round","process","exit"],"mappings":"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","file":"test-residual.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nlet construct_realm = require(\"../lib/construct_realm.js\").default;\nlet initializeGlobals = require(\"../lib/globals.js\").default;\nlet AbruptCompletion = require(\"../lib/completions.js\").AbruptCompletion;\nlet ThrowCompletion = require(\"../lib/completions.js\").ThrowCompletion;\nlet FatalError = require(\"../lib/errors.js\").FatalError;\n\nlet chalk = require(\"chalk\");\nlet path = require(\"path\");\nlet fs = require(\"fs\");\nlet vm = require(\"vm\");\n\nfunction search(dir, relative) {\n  let tests = [];\n\n  for (let name of fs.readdirSync(dir)) {\n    let loc = path.join(dir, name);\n    let stat = fs.statSync(loc);\n\n    if (stat.isFile()) {\n      tests.push({\n        file: fs.readFileSync(loc, \"utf8\"),\n        name: path.join(relative, name),\n      });\n    } else if (stat.isDirectory()) {\n      tests = tests.concat(search(loc, path.join(relative, name)));\n    }\n  }\n\n  return tests;\n}\n\nlet tests = search(`${__dirname}/../test/residual`, \"test/residual\");\n\nfunction exec(code) {\n  let script = new vm.Script(\n    `var global = this; var self = this; var __result = ${code} // keep newline here as code may end with comment\n; report(__result);`,\n    { cachedDataProduced: false }\n  );\n\n  let result = \"\";\n  let logOutput = \"\";\n\n  function write(prefix, values) {\n    logOutput += \"\\n\" + prefix + values.join(\"\");\n  }\n\n  script.runInNewContext({\n    setTimeout: setTimeout,\n    setInterval: setInterval,\n    clearTimeout: clearTimeout,\n    clearInterval: clearInterval,\n    report: function(s) {\n      result = s;\n    },\n    console: {\n      log(...s) {\n        write(\"\", s);\n      },\n      warn(...s) {\n        write(\"WARN:\", s);\n      },\n      error(...s) {\n        write(\"ERROR:\", s);\n      },\n    },\n  });\n  return result + logOutput;\n}\n\nfunction runTest(name, code) {\n  let realmOptions = { residual: true };\n  let sources = [{ filePath: name, fileContents: code }];\n  console.log(chalk.inverse(name));\n  if (code.includes(\"// throws introspection error\")) {\n    try {\n      let realm = construct_realm(realmOptions);\n      initializeGlobals(realm);\n      let result = realm.$GlobalEnv.executePartialEvaluator(sources);\n      if (result instanceof ThrowCompletion) throw result.value;\n    } catch (err) {\n      if (err instanceof FatalError) return true;\n      console.log(err);\n    }\n    return false;\n  } else {\n    let expected, actual;\n    let codeIterations = [];\n    let markersToFind = [];\n    for (let [positive, marker] of [[true, \"// does contain:\"], [false, \"// does not contain:\"]]) {\n      if (code.includes(marker)) {\n        let i = code.indexOf(marker);\n        let value = code.substring(i + marker.length, code.indexOf(\"\\n\", i));\n        markersToFind.push({ positive, value, start: i + marker.length });\n      }\n    }\n    try {\n      expected = exec(`(function () { ${code}; // keep newline here as code may end with comment\nreturn __result; }).call(this);`);\n\n      let i = 0;\n      let max = 4;\n      let oldCode = code;\n      for (; i < max; i++) {\n        let realm = construct_realm(realmOptions);\n        initializeGlobals(realm);\n        let result = realm.$GlobalEnv.executePartialEvaluator(sources);\n        if (result instanceof ThrowCompletion) throw result.value;\n        if (result instanceof AbruptCompletion) throw result;\n        let newCode = result.code;\n        codeIterations.push(newCode);\n        let markersIssue = false;\n        for (let { positive, value, start } of markersToFind) {\n          let found = newCode.indexOf(value, start) !== -1;\n          if (found !== positive) {\n            console.log(chalk.red(`Output ${positive ? \"does not contain\" : \"contains\"} forbidden string: ${value}`));\n            markersIssue = true;\n          }\n        }\n        if (markersIssue) break;\n        actual = exec(`(function () { ${newCode}; // keep newline here as code may end with comment\n          return __result; }).call(this);`);\n        if (expected !== actual) {\n          console.log(chalk.red(\"Output mismatch!\"));\n          break;\n        }\n        if (oldCode === newCode) {\n          // The generated code reached a fixed point!\n          return true;\n        }\n        oldCode = newCode;\n      }\n      if (i === max) {\n        console.log(chalk.red(`Code generation did not reach fixed point after ${max} iterations!`));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    console.log(chalk.underline(\"original code\"));\n    console.log(code);\n    console.log(chalk.underline(\"output of inspect() on original code\"));\n    console.log(expected);\n    for (let i = 0; i < codeIterations.length; i++) {\n      console.log(chalk.underline(`generated code in iteration ${i}`));\n      console.log(codeIterations[i]);\n    }\n    console.log(chalk.underline(\"output of inspect() on last generated code iteration\"));\n    console.log(actual);\n    return false;\n  }\n}\nfunction run() {\n  let failed = 0;\n  let passed = 0;\n  let total = 0;\n\n  for (let test of tests) {\n    // filter hidden files\n    if (path.basename(test.name)[0] === \".\") continue;\n    if (test.name.endsWith(\"~\")) continue;\n    if (test.file.includes(\"// skip\")) continue;\n\n    total++;\n    if (runTest(test.name, test.file)) passed++;\n    else failed++;\n  }\n\n  console.log(\"Passed:\", `${passed}/${total}`, (Math.round(passed / total * 100) || 0) + \"%\");\n  return failed === 0;\n}\n\nif (!run()) process.exit(1);\n"]}