{"version":3,"sources":["../src/realm.js"],"names":["construct_empty_effects","t","Tracer","state","effects","F","thisArgument","argumentsList","newTarget","performCall","result","ExecutionContext","context","caller","isStrict","$Strict","function","loc","realm","value","oldReadOnly","isReadOnly","variableEnvironment","environmentRecord","lexicalEnvironment","intrinsics","undefined","empty","Map","Set","Realm","opts","contextStack","MOBILE_JSC_VERSION","objectCount","symbolCount","functionBodyUniqueTagSeed","nextGeneratorId","useAbstractInterpretation","serialize","residual","mathRandomSeed","mathRandomGenerator","strictlyMonotonicDateNow","timeout","timeoutCounter","timeoutCounterThreshold","start","Date","now","compatibility","maxStackDepth","omitInvariants","lazyObjectsRuntime","$TemplateMap","preludeGenerator","debugNames","uniqueSuffix","pathConditions","setupTrackedPropertyAccessors","trackedPropertyNames","tracers","$GlobalObject","evaluators","Object","create","partialEvaluators","$GlobalEnv","react","enabled","reactEnabled","flowRequired","reactElementSymbol","errorHandler","globalSymbolRegistry","key","globrec","dclrec","$DeclarativeRecord","HasBinding","GetBindingValue","readOnlyValue","forEach","ctx","setReadOnly","total","length","push","modifiedBindings","keys","b","environment","$FunctionObject","delete","c","pop","callback","pushContext","popContext","name","wrapInGlobalEnv","assignToGlobal","DeleteBinding","ast","strictCode","env","evaluateForEffects","evaluateCompletionDeref","func","node","evaluateNodeForEffects","nodeAst","nodeIO","partialEval","partiallyEvaluateCompletionDeref","f","getAndResetModifiedMaps","savedBindings","savedProperties","saved_generator","generator","saved_createdObjects","createdObjects","saved_completion","savedCompletion","t1","beginEvaluateForEffects","GetValue","e","incorporateSavedCompletion","subsequentEffects","getCapturedEffects","stopEffectCaptureAndUndoEffects","updatePossiblyNormalCompletionWithSubsequentEffects","modifiedProperties","astGenerator","astBindings","astProperties","astCreatedObjects","restoreBindings","restoreProperties","t2","endEvaluateForEffects","priorEffects","pg","pb","pp","po","sc","sg","sb","sp","so","rb","rp","ro","composeGenerators","val","m","set","desc","propertyBinding","ob","a","add","consequent","consequentEffects","composeEffects","alternate","updateAbruptCompletions","alternateEffects","completion","captureEffects","composePossiblyNormalCompletions","savedEffects","v","applyEffects","g","p","o","leadingComment","bindings","properties","appendGenerator","realmModifiedBindings","has","realmModifiedProperties","size","realmCreatedObjects","method","args","emitConsoleLog","console","getString","values","res","next","shift","nextString","binding","reportObjectGetOwnProperties","reportPropertyAccess","getRunningContext","isNewObject","object","callReportPropertyAccess","descriptor","d","propertyValue","path","isIntrinsic","intrinsicName","kind","_buildNode","memberExpression","identifier","rebuildNestedProperties","abstractValue","isTop","template","getTemplate","intrinsicNameGenerated","ThrowIfMightHaveBeenDeleted","reportIntrospectionError","rebuildObjectProperty","nextContextLocation","setLocation","message","currentLocation","error","handleError","type","__IntrospectionError","realmGenerator","diagnostic","callStack","Error","stack","$Get","msg","errorCode","location","loc_start","loc_end","end","line","column","severity","log","warn"],"mappings":"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","file":"realm.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Intrinsics, PropertyBinding, Descriptor, DebugServerType } from \"./types.js\";\nimport { CompilerDiagnostic, type ErrorHandlerResult, type ErrorHandler, FatalError } from \"./errors.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ConcreteValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  NativeFunctionValue,\n  ObjectValue,\n  ProxyValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./values/index.js\";\nimport { LexicalEnvironment, Reference, GlobalEnvironmentRecord } from \"./environment.js\";\nimport type { Binding } from \"./environment.js\";\nimport { cloneDescriptor, Construct, ToString } from \"./methods/index.js\";\nimport { Completion, ThrowCompletion, AbruptCompletion, PossiblyNormalCompletion } from \"./completions.js\";\nimport type { Compatibility, RealmOptions } from \"./options.js\";\nimport invariant from \"./invariant.js\";\nimport seedrandom from \"seedrandom\";\nimport { Generator, PreludeGenerator } from \"./utils/generator.js\";\nimport { Environment, Functions, Join, Properties } from \"./singletons.js\";\nimport type { BabelNode, BabelNodeSourceLocation, BabelNodeLVal, BabelNodeStatement } from \"babel-types\";\nimport * as t from \"babel-types\";\n\nexport type Bindings = Map<Binding, void | Value>;\nexport type EvaluationResult = Completion | Reference | Value;\nexport type PropertyBindings = Map<PropertyBinding, void | Descriptor>;\n\nexport type CreatedObjects = Set<ObjectValue>;\nexport type Effects = [EvaluationResult, Generator, Bindings, PropertyBindings, CreatedObjects];\n\nexport class Tracer {\n  beginEvaluateForEffects(state: any) {}\n  endEvaluateForEffects(state: any, effects: void | Effects) {}\n  detourCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    performCall: () => Value\n  ): void | Value {}\n  beforeCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue\n  ) {}\n  afterCall(\n    F: FunctionValue,\n    thisArgument: void | Value,\n    argumentsList: Array<Value>,\n    newTarget: void | ObjectValue,\n    result: void | Reference | Value | AbruptCompletion\n  ) {}\n}\n\nexport class ExecutionContext {\n  function: ?FunctionValue;\n  caller: ?ExecutionContext;\n  loc: ?BabelNodeSourceLocation;\n  ScriptOrModule: any;\n  realm: Realm;\n  variableEnvironment: LexicalEnvironment;\n  lexicalEnvironment: LexicalEnvironment;\n  isReadOnly: boolean;\n  isStrict: boolean;\n\n  setCaller(context: ExecutionContext): void {\n    this.caller = context;\n  }\n\n  setFunction(F: null | FunctionValue) {\n    if (F instanceof ECMAScriptSourceFunctionValue) this.isStrict = F.$Strict;\n    this.function = F;\n  }\n\n  setLocation(loc: null | BabelNodeSourceLocation) {\n    if (!loc) return;\n    this.loc = loc;\n  }\n\n  setRealm(realm: Realm): void {\n    this.realm = realm;\n  }\n\n  /*\n   Read-only envs disallow:\n   - creating bindings in their scope\n   - creating or modifying objects when they are current running context\n  */\n  setReadOnly(value: boolean): boolean {\n    let oldReadOnly = this.isReadOnly;\n    if (this.variableEnvironment) this.variableEnvironment.environmentRecord.isReadOnly = value;\n    if (this.lexicalEnvironment) this.lexicalEnvironment.environmentRecord.isReadOnly = value;\n    this.isReadOnly = value;\n    return oldReadOnly;\n  }\n\n  suspend(): void {\n    // TODO #712: suspend\n  }\n\n  resume(): Value {\n    // TODO #712: resume\n    return this.realm.intrinsics.undefined;\n  }\n}\n\nexport function construct_empty_effects(realm: Realm): Effects {\n  return [realm.intrinsics.empty, new Generator(realm), new Map(), new Map(), new Set()];\n}\n\nexport class Realm {\n  constructor(opts: RealmOptions) {\n    this.isReadOnly = false;\n    this.useAbstractInterpretation = !!opts.serialize || !!opts.residual;\n    if (opts.mathRandomSeed !== undefined) {\n      this.mathRandomGenerator = seedrandom(opts.mathRandomSeed);\n    }\n    this.strictlyMonotonicDateNow = !!opts.strictlyMonotonicDateNow;\n\n    this.timeout = opts.timeout;\n    if (this.timeout) {\n      // We'll call Date.now for every this.timeoutCounterThreshold'th AST node.\n      // The threshold is there to reduce the cost of the surprisingly expensive Date.now call.\n      this.timeoutCounter = this.timeoutCounterThreshold = 1024;\n    }\n\n    this.start = Date.now();\n    this.compatibility = opts.compatibility || \"browser\";\n    this.maxStackDepth = opts.maxStackDepth || 225;\n    this.omitInvariants = !!opts.omitInvariants;\n    // Store in realm so that we can emit magic comment for test-runner.\n    // TODO: remove it once we have better test-runner support.\n    this.lazyObjectsRuntime = opts.lazyObjectsRuntime;\n\n    this.$TemplateMap = [];\n\n    if (this.useAbstractInterpretation) {\n      this.preludeGenerator = new PreludeGenerator(opts.debugNames, opts.uniqueSuffix);\n      this.pathConditions = [];\n      ObjectValue.setupTrackedPropertyAccessors(ObjectValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(NativeFunctionValue.trackedPropertyNames);\n      ObjectValue.setupTrackedPropertyAccessors(ProxyValue.trackedPropertyNames);\n    }\n\n    this.tracers = [];\n\n    // These get initialized in construct_realm to avoid the dependency\n    this.intrinsics = ({}: any);\n    this.$GlobalObject = (({}: any): ObjectValue);\n    this.evaluators = (Object.create(null): any);\n    this.partialEvaluators = (Object.create(null): any);\n    this.$GlobalEnv = ((undefined: any): LexicalEnvironment);\n\n    this.react = {\n      enabled: opts.reactEnabled || false,\n      flowRequired: true,\n      reactElementSymbol: undefined,\n    };\n\n    this.errorHandler = opts.errorHandler;\n\n    this.globalSymbolRegistry = [];\n  }\n\n  start: number;\n  isReadOnly: boolean;\n  isStrict: boolean;\n  useAbstractInterpretation: boolean;\n  timeout: void | number;\n  mathRandomGenerator: void | (() => number);\n  strictlyMonotonicDateNow: boolean;\n  maxStackDepth: number;\n  omitInvariants: boolean;\n\n  modifiedBindings: void | Bindings;\n  modifiedProperties: void | PropertyBindings;\n  createdObjects: void | CreatedObjects;\n  reportObjectGetOwnProperties: void | (ObjectValue => void);\n  reportPropertyAccess: void | (PropertyBinding => void);\n  savedCompletion: void | PossiblyNormalCompletion;\n\n  // A list of abstract conditions that are known to be true in the current execution path.\n  // For example, the abstract condition of an if statement is known to be true inside its true branch.\n  pathConditions: Array<AbstractValue>;\n\n  currentLocation: ?BabelNodeSourceLocation;\n  nextContextLocation: ?BabelNodeSourceLocation;\n  contextStack: Array<ExecutionContext> = [];\n  $GlobalEnv: LexicalEnvironment;\n  intrinsics: Intrinsics;\n  lazyObjectsRuntime: void | string;\n\n  react: {\n    enabled: boolean,\n    flowRequired: boolean,\n    reactElementSymbol?: SymbolValue,\n  };\n\n  $GlobalObject: ObjectValue | AbstractObjectValue;\n  compatibility: Compatibility;\n\n  $TemplateMap: Array<{ $Strings: Array<string>, $Array: ObjectValue }>;\n\n  generator: void | Generator;\n  preludeGenerator: void | PreludeGenerator;\n  timeoutCounter: number;\n  timeoutCounterThreshold: number;\n  evaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => Value | Reference,\n  };\n  partialEvaluators: {\n    [key: string]: (\n      ast: BabelNode,\n      strictCode: boolean,\n      env: LexicalEnvironment,\n      realm: Realm,\n      metadata?: any\n    ) => [Completion | Reference | Value, BabelNode, Array<BabelNodeStatement>],\n  };\n  simplifyAndRefineAbstractValue: AbstractValue => Value;\n  simplifyAndRefineAbstractCondition: AbstractValue => Value;\n\n  tracers: Array<Tracer>;\n\n  MOBILE_JSC_VERSION = \"jsc-600-1-4-17\";\n\n  errorHandler: ?ErrorHandler;\n  objectCount = 0;\n  symbolCount = 867501803871088;\n  // Unique tag for identifying function body ast node. It is neeeded\n  // instead of ast node itself because we may perform ast tree deep clone\n  // during serialization which changes the ast identity.\n  functionBodyUniqueTagSeed = 1;\n\n  globalSymbolRegistry: Array<{ $Key: string, $Symbol: SymbolValue }>;\n\n  debuggerInstance: DebugServerType | void;\n\n  nextGeneratorId: number = 0;\n\n  // to force flow to type the annotations\n  isCompatibleWith(compatibility: Compatibility): boolean {\n    return compatibility === this.compatibility;\n  }\n\n  // Checks if there is a let binding at global scope with the given name\n  // returning it if so\n  getGlobalLetBinding(key: string): void | Value {\n    let globrec = this.$GlobalEnv.environmentRecord;\n    // GlobalEnv should have a GlobalEnvironmentRecord\n    invariant(globrec instanceof GlobalEnvironmentRecord);\n    let dclrec = globrec.$DeclarativeRecord;\n\n    return dclrec.HasBinding(key) ? dclrec.GetBindingValue(key, false) : undefined;\n  }\n\n  /*\n   Read only realms disallow:\n   - using console.log\n   - creating bindings in any existing scopes\n   - modifying object properties in any existing scopes\n   Setting a realm read-only sets all contained environments to read-only, but\n   all new environments (e.g. new ExecutionContexts) will be writeable.\n   */\n  setReadOnly(readOnlyValue: boolean) {\n    this.isReadOnly = readOnlyValue;\n    this.$GlobalEnv.environmentRecord.isReadOnly = readOnlyValue;\n    this.contextStack.forEach(ctx => {\n      ctx.setReadOnly(readOnlyValue);\n    });\n  }\n\n  testTimeout() {\n    let timeout = this.timeout;\n    if (timeout && !--this.timeoutCounter) {\n      this.timeoutCounter = this.timeoutCounterThreshold;\n      let total = Date.now() - this.start;\n      if (total > timeout) {\n        throw new FatalError(\"Timed out\");\n      }\n    }\n  }\n\n  getRunningContext(): ExecutionContext {\n    let context = this.contextStack[this.contextStack.length - 1];\n    invariant(context, \"There's no running execution context\");\n    return context;\n  }\n\n  pushContext(context: ExecutionContext): void {\n    if (this.contextStack.length >= this.maxStackDepth) {\n      throw new FatalError(\"Maximum stack depth exceeded\");\n    }\n    this.contextStack.push(context);\n  }\n\n  popContext(context: ExecutionContext): void {\n    let modifiedBindings = this.modifiedBindings;\n    if (modifiedBindings !== undefined) {\n      for (let b of modifiedBindings.keys()) {\n        if (b.environment.$FunctionObject === context.function) modifiedBindings.delete(b);\n      }\n    }\n    let c = this.contextStack.pop();\n    invariant(c === context);\n  }\n\n  wrapInGlobalEnv<T>(callback: () => T): T {\n    let context = new ExecutionContext();\n    context.isStrict = this.isStrict;\n    context.lexicalEnvironment = this.$GlobalEnv;\n    context.variableEnvironment = this.$GlobalEnv;\n    context.realm = this;\n\n    this.pushContext(context);\n    try {\n      return callback();\n    } finally {\n      this.popContext(context);\n    }\n  }\n\n  assignToGlobal(name: BabelNodeLVal, value: Value) {\n    this.wrapInGlobalEnv(() => this.$GlobalEnv.assignToGlobal(name, value));\n  }\n\n  deleteGlobalBinding(name: string) {\n    this.$GlobalEnv.environmentRecord.DeleteBinding(name);\n  }\n\n  // Evaluate the given ast in a sandbox and return the evaluation results\n  // in the form of a completion, a code generator, a map of changed variable\n  // bindings and a map of changed property bindings.\n  evaluateNodeForEffects(ast: BabelNode, strictCode: boolean, env: LexicalEnvironment, state?: any): Effects {\n    return this.evaluateForEffects(() => env.evaluateCompletionDeref(ast, strictCode), state);\n  }\n\n  evaluateAndRevertInGlobalEnv(func: () => Value): void {\n    this.wrapInGlobalEnv(() => this.evaluateForEffects(func));\n  }\n\n  evaluateNodeForEffectsInGlobalEnv(node: BabelNode, state?: any): Effects {\n    return this.wrapInGlobalEnv(() => this.evaluateNodeForEffects(node, false, this.$GlobalEnv, state));\n  }\n\n  partiallyEvaluateNodeForEffects(\n    ast: BabelNode,\n    strictCode: boolean,\n    env: LexicalEnvironment\n  ): [Effects, BabelNode, Array<BabelNodeStatement>] {\n    let nodeAst, nodeIO;\n    function partialEval() {\n      let result;\n      [result, nodeAst, nodeIO] = env.partiallyEvaluateCompletionDeref(ast, strictCode);\n      return result;\n    }\n    let effects = this.evaluateForEffects(partialEval);\n    invariant(nodeAst !== undefined && nodeIO !== undefined);\n    return [effects, nodeAst, nodeIO];\n  }\n\n  evaluateForEffects(f: () => Completion | Value, state: any): Effects {\n    // Save old state and set up empty state for ast\n    let [savedBindings, savedProperties] = this.getAndResetModifiedMaps();\n    let saved_generator = this.generator;\n    let saved_createdObjects = this.createdObjects;\n    let saved_completion = this.savedCompletion;\n    this.generator = new Generator(this);\n    this.createdObjects = new Set();\n    this.savedCompletion = undefined; // while in this call, we only explore the normal path.\n\n    let result;\n    try {\n      for (let t1 of this.tracers) t1.beginEvaluateForEffects(state);\n\n      let c;\n      try {\n        try {\n          c = f();\n          if (c instanceof Reference) c = Environment.GetValue(this, c);\n        } catch (e) {\n          if (e instanceof AbruptCompletion) c = e;\n          else throw e;\n        }\n        // This is a join point for the normal branch of a PossiblyNormalCompletion.\n        if (c instanceof Value || c instanceof AbruptCompletion) c = Functions.incorporateSavedCompletion(this, c);\n        invariant(c !== undefined);\n        if (c instanceof PossiblyNormalCompletion) {\n          // The current state may have advanced since the time control forked into the various paths recorded in c.\n          // Update the normal path and restore the global state to what it was at the time of the fork.\n          let subsequentEffects = this.getCapturedEffects(c, c.value);\n          invariant(subsequentEffects !== undefined);\n          this.stopEffectCaptureAndUndoEffects(c);\n          Join.updatePossiblyNormalCompletionWithSubsequentEffects(this, c, subsequentEffects);\n          this.savedCompletion = undefined;\n        }\n\n        invariant(this.generator !== undefined);\n        invariant(this.modifiedBindings !== undefined);\n        invariant(this.modifiedProperties !== undefined);\n        invariant(this.createdObjects !== undefined);\n        let astGenerator = this.generator;\n        let astBindings = this.modifiedBindings;\n        let astProperties = this.modifiedProperties;\n        let astCreatedObjects = this.createdObjects;\n\n        // Return the captured state changes and evaluation result\n        result = [c, astGenerator, astBindings, astProperties, astCreatedObjects];\n        return result;\n      } finally {\n        // Roll back the state changes\n        if (this.savedCompletion !== undefined) this.stopEffectCaptureAndUndoEffects(this.savedCompletion);\n        if (result !== undefined) {\n          this.restoreBindings(result[2]);\n          this.restoreProperties(result[3]);\n        } else {\n          this.restoreBindings(this.modifiedBindings);\n          this.restoreProperties(this.modifiedProperties);\n        }\n        this.generator = saved_generator;\n        this.modifiedBindings = savedBindings;\n        this.modifiedProperties = savedProperties;\n        this.createdObjects = saved_createdObjects;\n        this.savedCompletion = saved_completion;\n      }\n    } finally {\n      for (let t2 of this.tracers) t2.endEvaluateForEffects(state, result);\n    }\n  }\n\n  composeEffects(priorEffects: Effects, subsequentEffects: Effects): Effects {\n    let [, pg, pb, pp, po] = priorEffects;\n    let [sc, sg, sb, sp, so] = subsequentEffects;\n    let result = construct_empty_effects(this);\n    let [, , rb, rp, ro] = result;\n\n    result[0] = sc;\n\n    result[1] = Join.composeGenerators(this, pg || result[1], sg);\n\n    if (pb) {\n      pb.forEach((val, key, m) => rb.set(key, val));\n    }\n    sb.forEach((val, key, m) => rb.set(key, val));\n\n    if (pp) {\n      pp.forEach((desc, propertyBinding, m) => rp.set(propertyBinding, desc));\n    }\n    sp.forEach((val, key, m) => rp.set(key, val));\n\n    if (po) {\n      po.forEach((ob, a) => ro.add(ob));\n    }\n    so.forEach((ob, a) => ro.add(ob));\n\n    return result;\n  }\n\n  updateAbruptCompletions(priorEffects: Effects, c: PossiblyNormalCompletion) {\n    if (c.consequent instanceof AbruptCompletion) {\n      c.consequentEffects = this.composeEffects(priorEffects, c.consequentEffects);\n      let alternate = c.alternate;\n      if (alternate instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, alternate);\n    } else {\n      invariant(c.alternate instanceof AbruptCompletion);\n      c.alternateEffects = this.composeEffects(priorEffects, c.alternateEffects);\n      let consequent = c.consequent;\n      if (consequent instanceof PossiblyNormalCompletion) this.updateAbruptCompletions(priorEffects, consequent);\n    }\n  }\n\n  composeWithSavedCompletion(completion: PossiblyNormalCompletion): Value {\n    if (this.savedCompletion === undefined) {\n      this.savedCompletion = completion;\n      this.captureEffects(completion);\n    } else {\n      this.savedCompletion = Join.composePossiblyNormalCompletions(this, this.savedCompletion, completion);\n    }\n    return completion.value;\n  }\n\n  captureEffects(completion: PossiblyNormalCompletion) {\n    if (completion.savedEffects !== undefined) {\n      // Already called captureEffects, just carry on\n      return;\n    }\n    completion.savedEffects = [\n      this.intrinsics.undefined,\n      (this.generator: any),\n      (this.modifiedBindings: any),\n      (this.modifiedProperties: any),\n      (this.createdObjects: any),\n    ];\n    this.generator = new Generator(this);\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    this.createdObjects = new Set();\n  }\n\n  getCapturedEffects(completion: PossiblyNormalCompletion, v?: Value): void | Effects {\n    if (completion.savedEffects === undefined) return undefined;\n    if (v === undefined) v = this.intrinsics.undefined;\n    invariant(this.generator !== undefined);\n    invariant(this.modifiedBindings !== undefined);\n    invariant(this.modifiedProperties !== undefined);\n    invariant(this.createdObjects !== undefined);\n    return [v, this.generator, this.modifiedBindings, this.modifiedProperties, this.createdObjects];\n  }\n\n  stopEffectCapture(completion: PossiblyNormalCompletion) {\n    let e = this.getCapturedEffects(completion);\n    if (e !== undefined) {\n      this.stopEffectCaptureAndUndoEffects(completion);\n      this.applyEffects(e);\n    }\n  }\n\n  stopEffectCaptureAndUndoEffects(completion: PossiblyNormalCompletion) {\n    // Roll back the state changes\n    this.restoreBindings(this.modifiedBindings);\n    this.restoreProperties(this.modifiedProperties);\n\n    // Restore saved state\n    if (completion.savedEffects !== undefined) {\n      let [c, g, b, p, o] = completion.savedEffects;\n      c;\n      completion.savedEffects = undefined;\n      this.generator = g;\n      this.modifiedBindings = b;\n      this.modifiedProperties = p;\n      this.createdObjects = o;\n    } else {\n      invariant(false);\n    }\n  }\n\n  // Apply the given effects to the global state\n  applyEffects(effects: Effects, leadingComment: string = \"\") {\n    let [, generator, bindings, properties, createdObjects] = effects;\n\n    // Add generated code for property modifications\n    this.appendGenerator(generator, leadingComment);\n\n    // Restore bindings\n    this.restoreBindings(bindings);\n    this.restoreProperties(properties);\n\n    // track bindings\n    let realmModifiedBindings = this.modifiedBindings;\n    if (realmModifiedBindings !== undefined) {\n      bindings.forEach((val, key, m) => {\n        invariant(realmModifiedBindings !== undefined);\n        if (!realmModifiedBindings.has(key)) {\n          realmModifiedBindings.set(key, val);\n        }\n      });\n    }\n    let realmModifiedProperties = this.modifiedProperties;\n    if (realmModifiedProperties !== undefined) {\n      properties.forEach((desc, propertyBinding, m) => {\n        invariant(realmModifiedProperties !== undefined);\n        if (!realmModifiedProperties.has(propertyBinding)) {\n          realmModifiedProperties.set(propertyBinding, desc);\n        }\n      });\n    }\n\n    // add created objects\n    if (createdObjects.size > 0) {\n      let realmCreatedObjects = this.createdObjects;\n      if (realmCreatedObjects === undefined) this.createdObjects = new Set(createdObjects);\n      else {\n        createdObjects.forEach((ob, a) => {\n          invariant(realmCreatedObjects !== undefined);\n          realmCreatedObjects.add(ob);\n        });\n      }\n    }\n  }\n\n  outputToConsole(method: \"log\" | \"warn\" | \"error\", args: Array<string | ConcreteValue>): void {\n    if (this.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to create console output in read-only realm\");\n    }\n    if (this.useAbstractInterpretation) {\n      invariant(this.generator !== undefined);\n      this.generator.emitConsoleLog(method, args);\n    } else {\n      console[method](getString(this, args));\n    }\n\n    function getString(realm: Realm, values: Array<string | ConcreteValue>) {\n      let res = \"\";\n      while (values.length) {\n        let next = values.shift();\n        let nextString = ToString(realm, next);\n        res += nextString;\n      }\n      return res;\n    }\n  }\n\n  // Record the current value of binding in this.modifiedBindings unless\n  // there is already an entry for binding.\n  recordModifiedBinding(binding: Binding): Binding {\n    if (binding.environment.isReadOnly) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a binding in read-only realm\");\n    }\n    if (this.modifiedBindings !== undefined && !this.modifiedBindings.has(binding))\n      this.modifiedBindings.set(binding, binding.value);\n    return binding;\n  }\n\n  callReportObjectGetOwnProperties(ob: ObjectValue): void {\n    if (this.reportObjectGetOwnProperties !== undefined) {\n      this.reportObjectGetOwnProperties(ob);\n    }\n  }\n\n  callReportPropertyAccess(binding: PropertyBinding): void {\n    if (this.reportPropertyAccess !== undefined) {\n      this.reportPropertyAccess(binding);\n    }\n  }\n\n  // Record the current value of binding in this.modifiedProperties unless\n  // there is already an entry for binding.\n  recordModifiedProperty(binding: void | PropertyBinding): void {\n    if (binding === undefined) return;\n    if (this.isReadOnly && (this.getRunningContext().isReadOnly || !this.isNewObject(binding.object))) {\n      // This only happens during speculative execution and is reported elsewhere\n      throw new FatalError(\"Trying to modify a property in read-only realm\");\n    }\n    this.callReportPropertyAccess(binding);\n    if (this.modifiedProperties !== undefined && !this.modifiedProperties.has(binding)) {\n      this.modifiedProperties.set(binding, cloneDescriptor(binding.descriptor));\n    }\n  }\n\n  isNewObject(object: AbstractObjectValue | ObjectValue): boolean {\n    if (object instanceof AbstractObjectValue) return false;\n    return this.createdObjects === undefined || this.createdObjects.has(object);\n  }\n\n  recordNewObject(object: ObjectValue): void {\n    if (this.createdObjects !== undefined) {\n      this.createdObjects.add(object);\n    }\n  }\n\n  // Returns the current values of modifiedBindings and modifiedProperties\n  // and then assigns new empty maps to them.\n  getAndResetModifiedMaps(): [void | Bindings, void | PropertyBindings] {\n    let result = [this.modifiedBindings, this.modifiedProperties];\n    this.modifiedBindings = new Map();\n    this.modifiedProperties = new Map();\n    return result;\n  }\n\n  // Restores each Binding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreBindings(modifiedBindings: void | Bindings) {\n    if (modifiedBindings === undefined) return;\n    modifiedBindings.forEach((val, key, m) => {\n      let v = key.value;\n      key.value = val;\n      m.set(key, v);\n    });\n  }\n\n  // Restores each PropertyBinding in the given map to the value it\n  // had when it was entered into the map and updates the map to record\n  // the value the Binding had just before the call to this method.\n  restoreProperties(modifiedProperties: void | PropertyBindings) {\n    if (modifiedProperties === undefined) return;\n    modifiedProperties.forEach((desc, propertyBinding, m) => {\n      let d = propertyBinding.descriptor;\n      propertyBinding.descriptor = desc;\n      m.set(propertyBinding, d);\n    });\n  }\n\n  // Provide the realm with maps in which to track modifications.\n  // A map can be set to undefined if no tracking is required.\n  setModifiedMaps(modifiedBindings: void | Bindings, modifiedProperties: void | PropertyBindings) {\n    this.modifiedBindings = modifiedBindings;\n    this.modifiedProperties = modifiedProperties;\n  }\n\n  rebuildObjectProperty(object: Value, key: string, propertyValue: Value, path: string) {\n    if (!(propertyValue instanceof AbstractValue)) return;\n    if (!propertyValue.isIntrinsic()) {\n      propertyValue.intrinsicName = `${path}.${key}`;\n      propertyValue.kind = \"rebuiltProperty\";\n      propertyValue.args = [object];\n      propertyValue._buildNode = ([node]) => t.memberExpression(node, t.identifier(key));\n      this.rebuildNestedProperties(propertyValue, propertyValue.intrinsicName);\n    }\n  }\n\n  rebuildNestedProperties(abstractValue: AbstractValue | UndefinedValue, path: string) {\n    if (!(abstractValue instanceof AbstractObjectValue)) return;\n    if (abstractValue.values.isTop()) return;\n    let template = abstractValue.getTemplate();\n    invariant(!template.intrinsicName || template.intrinsicName === path);\n    // TODO #882: We are using the concept of \"intrinsic values\" to mark the template\n    // object as intrinsic, so that we'll never emit code that creates it, as it instead is used\n    // to refer to an unknown but existing object.\n    // However, it's not really an intrinsic object, and it might not exist ahead of time, but only starting\n    // from this point on, which might be tied to some nested generator.\n    // Which we currently don't track, and that needs to get fixed.\n    // For now, we use intrinsicNameGenerated to mark this case.\n    template.intrinsicName = path;\n    template.intrinsicNameGenerated = true;\n    for (let [key, binding] of template.properties) {\n      if (binding === undefined || binding.descriptor === undefined) continue; // deleted\n      invariant(binding.descriptor !== undefined);\n      let value = binding.descriptor.value;\n      Properties.ThrowIfMightHaveBeenDeleted(value);\n      if (value === undefined) {\n        AbstractValue.reportIntrospectionError(abstractValue, key);\n        throw new FatalError();\n      }\n      invariant(value instanceof Value);\n      this.rebuildObjectProperty(abstractValue, key, value, path);\n    }\n  }\n\n  createExecutionContext(): ExecutionContext {\n    let context = new ExecutionContext();\n\n    let loc = this.nextContextLocation;\n    if (loc) {\n      context.setLocation(loc);\n      this.nextContextLocation = null;\n    }\n\n    return context;\n  }\n\n  setNextExecutionContextLocation(loc: ?BabelNodeSourceLocation) {\n    if (!loc) return;\n\n    //if (this.nextContextLocation) {\n    //  throw new ThrowCompletion(\n    //    Construct(this, this.intrinsics.TypeError, [new StringValue(this, \"Already have a context location that we haven't used yet\")])\n    //  );\n    //} else {\n    this.nextContextLocation = loc;\n    //}\n  }\n\n  reportIntrospectionError(message?: void | string | StringValue) {\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    let error = new CompilerDiagnostic(message.value, this.currentLocation, \"PP0001\", \"FatalError\");\n    this.handleError(error);\n  }\n\n  createErrorThrowCompletion(type: NativeFunctionValue, message?: void | string | StringValue): ThrowCompletion {\n    invariant(type !== this.intrinsics.__IntrospectionError);\n    if (message === undefined) message = \"\";\n    if (typeof message === \"string\") message = new StringValue(this, message);\n    invariant(message instanceof StringValue);\n    this.nextContextLocation = this.currentLocation;\n    return new ThrowCompletion(Construct(this, type, [message]), this.currentLocation);\n  }\n\n  appendGenerator(generator: Generator, leadingComment: string = \"\"): void {\n    let realmGenerator = this.generator;\n    if (realmGenerator === undefined) {\n      invariant(generator.empty());\n      return;\n    }\n    realmGenerator.appendGenerator(generator, leadingComment);\n  }\n\n  // Pass the error to the realm's error-handler\n  // Return value indicates whether the caller should try to recover from the\n  // error or not ('true' means recover if possible).\n  handleError(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (!diagnostic.callStack && this.contextStack.length > 0) {\n      let error = Construct(this, this.intrinsics.Error);\n      let stack = error.$Get(\"stack\", error);\n      if (stack instanceof StringValue) diagnostic.callStack = stack.value;\n    }\n    // Default behaviour is to bail on the first error\n    let errorHandler = this.errorHandler;\n    if (!errorHandler) {\n      let msg = `${diagnostic.errorCode}: ${diagnostic.message}`;\n      if (diagnostic.location) {\n        let loc_start = diagnostic.location.start;\n        let loc_end = diagnostic.location.end;\n        msg += ` at ${loc_start.line}:${loc_start.column} to ${loc_end.line}:${loc_end.column}`;\n      }\n      try {\n        switch (diagnostic.severity) {\n          case \"Information\":\n            console.log(`Info: ${msg}`);\n            return \"Recover\";\n          case \"Warning\":\n            console.warn(`Warn: ${msg}`);\n            return \"Recover\";\n          case \"RecoverableError\":\n            console.error(`Error: ${msg}`);\n            return \"Fail\";\n          case \"FatalError\":\n            console.error(`Fatal Error: ${msg}`);\n            return \"Fail\";\n          default:\n            invariant(false, \"Unexpected error type\");\n        }\n      } finally {\n        console.log(diagnostic.callStack);\n      }\n    }\n    return errorHandler(diagnostic);\n  }\n}\n"]}