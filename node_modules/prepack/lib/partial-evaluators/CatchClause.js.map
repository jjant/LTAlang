{"version":3,"sources":["../../src/partial-evaluators/CatchClause.js"],"names":["ast","strictCode","env","realm","thrownValue","result","evaluateCompletionDeref"],"mappings":";;;;;;kBAoBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKbC,WALa,EAMgE;AAC7E,2BAAUA,mDAAV,EAAkD,mCAAlD;;AAEA,MAAIC,SAASH,IAAII,uBAAJ,CAA4BN,GAA5B,EAAiCC,UAAjC,CAAb;AACA,SAAO,CAACI,MAAD,EAASL,GAAT,EAAc,EAAd,CAAP;AACD,C;;AAhBD;;AACA;;AACA","file":"CatchClause.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeCatchClause, BabelNodeStatement } from \"babel-types\";\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\n\nimport { AbruptCompletion, ThrowCompletion } from \"../completions.js\";\nimport { Value } from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\n\n// ECAM262 13.15.7\nexport default function(\n  ast: BabelNodeCatchClause,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm,\n  thrownValue: any\n): [AbruptCompletion | Value, BabelNodeCatchClause, Array<BabelNodeStatement>] {\n  invariant(thrownValue instanceof ThrowCompletion, \"Metadata isn't a throw completion\");\n\n  let result = env.evaluateCompletionDeref(ast, strictCode);\n  return [result, ast, []];\n}\n"]}