{"version":3,"sources":["../scripts/generate-sourcemaps-test.js"],"names":["chalk","require","path","fs","search","dir","relative","tests","readdirSync","name","loc","join","stat","statSync","isFile","push","file","readFileSync","isDirectory","concat","__dirname","errorHandler","diagnostic","location","console","log","start","line","column","errorCode","message","generateTest","test_path","code","inverse","newCode1","newMap1","newCode2","newMap2","s","internalDebug","sourceMaps","serialize","process","exit","writeFileSync","map","JSON","stringify","compatibility","inputSourceMapFilename","err","underline","run","failed","passed","total","test","basename","endsWith","Math","round"],"mappings":"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","file":"generate-sourcemaps-test.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { CompilerDiagnostic, ErrorHandlerResult } from \"../lib/errors.js\";\nimport { prepackFileSync } from \"../lib/prepack-node.js\";\nimport invariant from \"../lib/invariant.js\";\n\nlet chalk = require(\"chalk\");\nlet path = require(\"path\");\nlet fs = require(\"fs\");\n\nfunction search(dir, relative) {\n  let tests = [];\n\n  for (let name of fs.readdirSync(dir)) {\n    let loc = path.join(dir, name);\n    let stat = fs.statSync(loc);\n\n    if (stat.isFile()) {\n      tests.push({\n        file: fs.readFileSync(loc, \"utf8\"),\n        path: path.join(relative, name),\n        name: name,\n      });\n    } else if (stat.isDirectory()) {\n      tests = tests.concat(search(loc, path.join(relative, name)));\n    }\n  }\n\n  return tests;\n}\n\nlet tests = search(`${__dirname}/../test/source-maps`, \"test/source-maps\");\n\nfunction errorHandler(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n  let loc = diagnostic.location;\n  if (loc) console.log(`${loc.start.line}:${loc.start.column + 1} ${diagnostic.errorCode} ${diagnostic.message}`);\n  else console.log(`unknown location: ${diagnostic.errorCode} ${diagnostic.message}`);\n  return \"Fail\";\n}\n\nfunction generateTest(name: string, test_path: string, code: string): boolean {\n  console.log(chalk.inverse(name));\n  let newCode1, newMap1, newCode2, newMap2;\n  try {\n    let s = prepackFileSync([test_path], {\n      internalDebug: true,\n      errorHandler: errorHandler,\n      sourceMaps: true,\n      serialize: true,\n    });\n    if (!s) {\n      process.exit(1);\n      invariant(false);\n    }\n    newCode1 = s.code;\n    fs.writeFileSync(name + \".new1.js\", newCode1);\n    newMap1 = s.map;\n    fs.writeFileSync(name + \".new1.js.map\", JSON.stringify(newMap1));\n    s = prepackFileSync([name + \".new1.js\"], {\n      compatibility: \"node-source-maps\",\n      inputSourceMapFilename: name + \".new1.js.map\",\n      internalDebug: true,\n      errorHandler: errorHandler,\n      sourceMaps: true,\n      serialize: true,\n    });\n    if (!s) {\n      process.exit(1);\n      invariant(false);\n    }\n    newCode2 = s.code + \"\\nf();\\n\\n//# sourceMappingURL=\" + name + \".new2.js.map\\n\";\n    fs.writeFileSync(name + \".new2.js\", newCode2);\n    newMap2 = s.map;\n    fs.writeFileSync(name + \".new2.js.map\", JSON.stringify(newMap2));\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n  console.log(chalk.underline(\"original code\"));\n  console.log(code);\n  console.log(chalk.underline(\"generated code 1\"));\n  console.log(newCode1);\n  console.log(chalk.underline(\"newMap 1\"));\n  console.log(newMap1);\n  console.log(chalk.underline(\"generated code 2\"));\n  console.log(newCode2);\n  console.log(chalk.underline(\"newMap 2\"));\n  console.log(newMap2);\n\n  return false;\n}\n\nfunction run() {\n  let failed = 0;\n  let passed = 0;\n  let total = 0;\n\n  for (let test of tests) {\n    // filter hidden files\n    if (path.basename(test.name)[0] === \".\") continue;\n    if (test.name.endsWith(\"~\")) continue;\n\n    total++;\n    if (generateTest(test.name, test.path, test.file)) passed++;\n    else failed++;\n  }\n\n  console.log(\"Generated:\", `${passed}/${total}`, (Math.round(passed / total * 100) || 0) + \"%\");\n  return failed === 0;\n}\n\nif (!run()) process.exit(1);\n"]}