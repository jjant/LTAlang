{"version":3,"sources":["../../src/react/jsx.js"],"names":["convertExpressionToJSXIdentifier","convertJSXExpressionToIdentifier","convertKeyValueToJSXAttribute","t","expr","isRoot","type","jSXIdentifier","name","value","length","toLowerCase","computed","jSXMemberExpression","object","property","identifier","memberExpression","key","jSXAttribute","jSXExpressionContainer"],"mappings":";;;;;QAsBgBA,gC,GAAAA,gC;QAqCAC,gC,GAAAA,gC;QAgBAC,6B,GAAAA,6B;;AAhEhB;;IAAYC,C;;AAQZ;;;;AACA;;;;;;AAEO,SAASH,gCAAT,CACLI,IADK,EAELC,MAFK,EAGkD;AACvD,UAAQD,KAAKE,IAAb;AACE,SAAK,gBAAL;AACE,+BAAUD,WAAW,KAArB;AACA,aAAOF,EAAEI,aAAF,CAAgB,MAAhB,CAAP;AACF,SAAK,YAAL;AACE,UAAIC,OAAOJ,KAAKI,IAAhB;AACA;AACE;AACA;AACAH,iBAAW,KAAX,IAAoB,6BAAiBG,IAAjB,CAHtB,EAIE,yEAJF;AAMA,aAAOL,EAAEI,aAAF,CAAgBC,IAAhB,CAAP;AACF,SAAK,eAAL;AACE,UAAIC,QAAQL,KAAKK,KAAjB;AACA;AACE;AACA;AACAA,YAAMC,MAAN,GAAe,CAAf,IAAoBD,MAAM,CAAN,MAAaA,MAAM,CAAN,EAASE,WAAT,EAHnC,EAIE,6DAJF;AAMA,aAAOR,EAAEI,aAAF,CAAgBE,KAAhB,CAAP;AACF,SAAK,kBAAL;AACE,+BAAUL,KAAKQ,QAAL,KAAkB,KAA5B,EAAmC,iDAAnC;AACA,aAAOT,EAAEU,mBAAF,CACLb,iCAAiCI,KAAKU,MAAtC,EAA8C,KAA9C,CADK,EAEHd,iCAAiCI,KAAKW,QAAtC,EAAgD,KAAhD,CAFG,CAAP;AAIF;AACE,+BAAU,KAAV,EAAiB,kBAAjB;AA7BJ;AA+BD,C,CAzDD;;;;;;;;;AA2DO,SAASd,gCAAT,CACLG,IADK,EAE4C;AACjD,UAAQA,KAAKE,IAAb;AACE,SAAK,eAAL;AACE,aAAOH,EAAEa,UAAF,CAAaZ,KAAKI,IAAlB,CAAP;AACF,SAAK,qBAAL;AACE,aAAOL,EAAEc,gBAAF,CACLhB,iCAAiCG,KAAKU,MAAtC,CADK,EAEJb,iCAAiCG,KAAKW,QAAtC,CAFI,CAAP;AAIF;AACE,+BAAU,KAAV,EAAiB,kBAAjB;AATJ;AAWD;;AAEM,SAASb,6BAAT,CAAuCgB,GAAvC,EAAoDd,IAApD,EAA+E;AACpF,SAAOD,EAAEgB,YAAF,CAAehB,EAAEI,aAAF,CAAgBW,GAAhB,CAAf,EAAqCd,KAAKE,IAAL,KAAc,eAAd,GAAgCF,IAAhC,GAAuCD,EAAEiB,sBAAF,CAAyBhB,IAAzB,CAA5E,CAAP;AACD","file":"jsx.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport * as t from \"babel-types\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeJSXMemberExpression,\n  BabelNodeJSXIdentifier,\n  BabelNodeIdentifier,\n  BabelNodeMemberExpression,\n} from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport { isReactComponent } from \"./utils\";\n\nexport function convertExpressionToJSXIdentifier(\n  expr: BabelNodeExpression,\n  isRoot: boolean\n): BabelNodeJSXMemberExpression | BabelNodeJSXIdentifier {\n  switch (expr.type) {\n    case \"ThisExpression\":\n      invariant(isRoot === false, `invalid conversion of root expression to JSXIdentifier for ThisExpression`);\n      return t.jSXIdentifier(\"this\");\n    case \"Identifier\":\n      let name = expr.name;\n      invariant(\n        // ensure the 1st character of the string is uppercase\n        // for a component unless it is not the root\n        isRoot === false || isReactComponent(name),\n        \"invalid JSXIdentifer from Identifier, Identifier name must be uppercase\"\n      );\n      return t.jSXIdentifier(name);\n    case \"StringLiteral\":\n      let value = expr.value;\n      invariant(\n        // ensure the 1st character of the string is lowercase\n        // otherwise it will appear as a component\n        value.length > 0 && value[0] === value[0].toLowerCase(),\n        \"invalid JSXIdentifer from string, strings must be lowercase\"\n      );\n      return t.jSXIdentifier(value);\n    case \"MemberExpression\":\n      invariant(expr.computed === false, \"Cannot inline computed expressions in JSX type.\");\n      return t.jSXMemberExpression(\n        convertExpressionToJSXIdentifier(expr.object, false),\n        ((convertExpressionToJSXIdentifier(expr.property, false): any): BabelNodeJSXIdentifier)\n      );\n    default:\n      invariant(false, \"Invalid JSX type\");\n  }\n}\n\nexport function convertJSXExpressionToIdentifier(\n  expr: BabelNodeExpression\n): BabelNodeMemberExpression | BabelNodeIdentifier {\n  switch (expr.type) {\n    case \"JSXIdentifier\":\n      return t.identifier(expr.name);\n    case \"JSXMemberExpression\":\n      return t.memberExpression(\n        convertJSXExpressionToIdentifier(expr.object),\n        (convertJSXExpressionToIdentifier(expr.property): any)\n      );\n    default:\n      invariant(false, \"Invalid JSX type\");\n  }\n}\n\nexport function convertKeyValueToJSXAttribute(key: string, expr: BabelNodeExpression) {\n  return t.jSXAttribute(t.jSXIdentifier(key), expr.type === \"StringLiteral\" ? expr : t.jSXExpressionContainer(expr));\n}\n"]}