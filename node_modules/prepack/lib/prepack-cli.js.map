{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","statsFileName","maxStackDepth","timeout","additionalFunctions","lazyObjectsRuntime","debugInFilePath","debugOutFilePath","flags","initializeMoreModules","trace","debugNames","omitInvariants","inlineExpressions","logStatistics","logModules","delayInitializations","delayUnsupportedRequires","internalDebug","debugScopes","serialize","residual","profile","reactEnabled","length","arg","shift","startsWith","push","slice","includes","error","exit","value","isNaN","parseInt","seconds","line","split","log","keys","s","resolvedOptions","assign","inputSourceMapFilename","errorHandler","sourceMaps","enableDebugger","errors","Map","diagnostic","location","set","processSerializedCode","serialized","x","message","stack","size","foundFatal","loc","severity","source","start","column","errorCode","err","code","writeFileSync","statistics","undefined","timingStats","stats","SerializerStatistics","TimingStatistics","MemoryStatistics","getHeapStatistics","stringify","__residual"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport { type Compatibility, CompatibilityValues } from \"./options.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\n\n// Prepack helper\ndeclare var __residual: any;\n\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input                    The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out                    The name of the output file\n    --compatibility          The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed         If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn               The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                             the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut              The output sourcemap filename.\n    --maxStackDepth          Specify the maximum call stack depth.\n    --timeout                The amount of time in seconds until Prepack should time out.\n    --additionalFunctions    Additional functions that should be prepacked (comma separated).\n    --lazyObjectsRuntime     Enable lazy objects feature and specify the JS runtime that support this feature.\n    --debugNames             Changes the output of Prepack so that for named functions and variables that get emitted into\n                             Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --speculate              Enable speculative initialization of modules (for the module system Prepack has builtin\n                             knowledge about). Prepack will try to execute all factory functions it is able to.\n    --trace                  Traces the order of module initialization.\n    --serialize              Serializes the partially evaluated global environment as a program that recreates it.\n                             (default = true)\n    --residual               Produces the residual program that results after constant folding.\n    --profile                Enables console logging of profile information of different phases of prepack.\n    --statsFile              The name of the output file where statistics will be written to.\n    --inlineExpressions      When generating code, tells prepack to avoid naming expressions when they are only used once,\n                             and instead inline them where they are used.\n    --omitInvariants         When generating code, tells prepack to omit writing invariants. (Invariants generated by default.)\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMap;\n  let outputSourceMap;\n  let statsFileName;\n  let maxStackDepth: number;\n  let timeout: number;\n  let additionalFunctions: Array<string>;\n  let lazyObjectsRuntime: string;\n  let debugInFilePath: string;\n  let debugOutFilePath: string;\n  let flags = {\n    initializeMoreModules: false,\n    trace: false,\n    debugNames: false,\n    omitInvariants: false,\n    inlineExpressions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    delayUnsupportedRequires: false,\n    internalDebug: false,\n    debugScopes: false,\n    serialize: false,\n    residual: false,\n    profile: false,\n    reactEnabled: false,\n  };\n\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      inputFilenames.push(arg);\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          break;\n        case \"srcmapIn\":\n          inputSourceMap = args.shift();\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          break;\n        case \"maxStackDepth\":\n          let value = args.shift();\n          if (isNaN(value)) {\n            console.error(\"Stack depth value must be a number\");\n            process.exit(1);\n          }\n          maxStackDepth = parseInt(value, 10);\n          break;\n        case \"timeout\":\n          let seconds = args.shift();\n          if (isNaN(seconds)) {\n            console.error(\"Timeout must be a number\");\n            process.exit(1);\n          }\n          timeout = parseInt(seconds, 10) * 1000;\n          break;\n        case \"additionalFunctions\":\n          let line = args.shift();\n          additionalFunctions = line.split(\",\");\n          break;\n        case \"debugInFilePath\":\n          debugInFilePath = args.shift();\n          break;\n        case \"debugOutFilePath\":\n          debugOutFilePath = args.shift();\n          break;\n        case \"lazyObjectsRuntime\":\n          lazyObjectsRuntime = args.shift();\n          break;\n        case \"help\":\n          console.log(\n            \"Usage: prepack.js [ -- | input.js ] [ --out output.js ] [ --compatibility jsc ] [ --mathRandomSeed seedvalue ] [ --srcmapIn inputMap ] [ --srcmapOut outputMap ] [ --maxStackDepth depthValue ] [ --timeout seconds ] [ --additionalFunctions fnc1,fnc2,... ] [ --lazyObjectsRuntime lazyObjectsRuntimeName]\" +\n              Object.keys(flags).map(s => \"[ --\" + s + \"]\").join(\" \") +\n              \"\\n\" +\n              HELP_STR\n          );\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n  if (!flags.serialize && !flags.residual) flags.serialize = true;\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      errorHandler: errorHandler,\n      sourceMaps: !!outputSourceMap,\n      maxStackDepth: maxStackDepth,\n      timeout: timeout,\n      additionalFunctions: additionalFunctions,\n      lazyObjectsRuntime: lazyObjectsRuntime,\n      enableDebugger: false, //always turn off debugger until debugger is fully built\n      debugInFilePath: debugInFilePath,\n      debugOutFilePath: debugOutFilePath,\n    },\n    flags\n  );\n  if (\n    lazyObjectsRuntime &&\n    (resolvedOptions.additionalFunctions || resolvedOptions.delayInitializations || resolvedOptions.inlineExpressions)\n  ) {\n    console.error(\n      \"lazy objects feature is incompatible with additionalFunctions, delayInitializations and inlineExpressions options\"\n    );\n    process.exit(1);\n  }\n\n  let errors: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  function errorHandler(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (diagnostic.location) errors.set(diagnostic.location, diagnostic);\n    return \"Recover\";\n  }\n\n  try {\n    if (inputFilenames.length === 0) {\n      prepackStdin(resolvedOptions, processSerializedCode);\n      return;\n    }\n    let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n    processSerializedCode(null, serialized);\n  } catch (x) {\n    console.log(x.message);\n    console.log(x.stack);\n    if (errors.size === 0) process.exit(1);\n  } finally {\n    if (errors.size > 0) {\n      let foundFatal = false;\n      for (let [loc, error] of errors) {\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.log(\n          `${loc.source || \"\"}(${loc.start.line}:${loc.start.column +\n            1}) ${error.severity} ${error.errorCode}: ${error.message}` +\n            ` (https://github.com/facebook/prepack/wiki/${error.errorCode})`\n        );\n      }\n      if (foundFatal) process.exit(1);\n    }\n  }\n\n  function processSerializedCode(err, serialized) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    if (errors.size > 0) {\n      console.log(\"Errors found while prepacking\");\n      let foundFatal = false;\n      for (let [loc, error] of errors) {\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.log(\n          `${loc.source || \"\"}(${loc.start.line}:${loc.start.column +\n            1}) ${error.severity} ${error.errorCode}: ${error.message}`\n        );\n      }\n      if (foundFatal) process.exit(1);\n    }\n    if (serialized) {\n      if (serialized.code === \"\") {\n        console.log(\"No source code to prepack.\");\n        return;\n      }\n      if (outputFilename) {\n        console.log(`Prepacked source code written to ${outputFilename}.`);\n        fs.writeFileSync(outputFilename, serialized.code);\n      } else {\n        console.log(serialized.code);\n      }\n      if (statsFileName) {\n        if (serialized.statistics === undefined || serialized.timingStats === undefined) {\n          return;\n        }\n        let stats = {\n          SerializerStatistics: serialized.statistics,\n          TimingStatistics: serialized.timingStats,\n          MemoryStatistics: v8.getHeapStatistics(),\n        };\n        fs.writeFileSync(statsFileName, JSON.stringify(stats));\n      }\n      if (outputSourceMap) {\n        fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n      }\n    }\n  }\n\n  return true;\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"]}